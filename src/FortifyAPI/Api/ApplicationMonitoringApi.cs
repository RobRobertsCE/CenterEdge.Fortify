/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationMonitoringApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetApplicationMonitoringConfigResponse</returns>
        GetApplicationMonitoringConfigResponse ApplicationMonitoringV3GetApplicationMonitoringConfiguration (int? applicationId);

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetApplicationMonitoringConfigResponse</returns>
        ApiResponse<GetApplicationMonitoringConfigResponse> ApplicationMonitoringV3GetApplicationMonitoringConfigurationWithHttpInfo (int? applicationId);
        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationMonitoringRiskProfileFindingListResponse</returns>
        ApplicationMonitoringRiskProfileFindingListResponse ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationMonitoringRiskProfileFindingListResponse</returns>
        ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        ApplicationMonitoringVulnerabilityFindingListResponse ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Update an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns></returns>
        void ApplicationMonitoringV3PutApplicationMonitoringConfig (int? applicationId, PutApplicationMonitoringConfigRequest requestModel);

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplicationMonitoringV3PutApplicationMonitoringConfigWithHttpInfo (int? applicationId, PutApplicationMonitoringConfigRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetApplicationMonitoringConfigResponse</returns>
        System.Threading.Tasks.Task<GetApplicationMonitoringConfigResponse> ApplicationMonitoringV3GetApplicationMonitoringConfigurationAsync (int? applicationId);

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetApplicationMonitoringConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationMonitoringConfigResponse>> ApplicationMonitoringV3GetApplicationMonitoringConfigurationAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationMonitoringRiskProfileFindingListResponse</returns>
        System.Threading.Tasks.Task<ApplicationMonitoringRiskProfileFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMonitoringRiskProfileFindingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse>> ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        System.Threading.Tasks.Task<ApplicationMonitoringVulnerabilityFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMonitoringVulnerabilityFindingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse>> ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Update an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplicationMonitoringV3PutApplicationMonitoringConfigAsync (int? applicationId, PutApplicationMonitoringConfigRequest requestModel);

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationMonitoringV3PutApplicationMonitoringConfigAsyncWithHttpInfo (int? applicationId, PutApplicationMonitoringConfigRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationMonitoringApi : IApplicationMonitoringApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationMonitoringApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationMonitoringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationMonitoringApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetApplicationMonitoringConfigResponse</returns>
        public GetApplicationMonitoringConfigResponse ApplicationMonitoringV3GetApplicationMonitoringConfiguration (int? applicationId)
        {
             ApiResponse<GetApplicationMonitoringConfigResponse> localVarResponse = ApplicationMonitoringV3GetApplicationMonitoringConfigurationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetApplicationMonitoringConfigResponse</returns>
        public ApiResponse< GetApplicationMonitoringConfigResponse > ApplicationMonitoringV3GetApplicationMonitoringConfigurationWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringConfiguration");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetApplicationMonitoringConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetApplicationMonitoringConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetApplicationMonitoringConfigResponse)));
        }

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetApplicationMonitoringConfigResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationMonitoringConfigResponse> ApplicationMonitoringV3GetApplicationMonitoringConfigurationAsync (int? applicationId)
        {
             ApiResponse<GetApplicationMonitoringConfigResponse> localVarResponse = await ApplicationMonitoringV3GetApplicationMonitoringConfigurationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetApplicationMonitoringConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetApplicationMonitoringConfigResponse>> ApplicationMonitoringV3GetApplicationMonitoringConfigurationAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringConfiguration");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetApplicationMonitoringConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetApplicationMonitoringConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetApplicationMonitoringConfigResponse)));
        }

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationMonitoringRiskProfileFindingListResponse</returns>
        public ApplicationMonitoringRiskProfileFindingListResponse ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse> localVarResponse = ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationMonitoringRiskProfileFindingListResponse</returns>
        public ApiResponse< ApplicationMonitoringRiskProfileFindingListResponse > ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/risk-profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMonitoringRiskProfileFindingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMonitoringRiskProfileFindingListResponse)));
        }

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationMonitoringRiskProfileFindingListResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationMonitoringRiskProfileFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse> localVarResponse = await ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesAsyncWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Application Monitoring Risk Profiles for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMonitoringRiskProfileFindingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse>> ApplicationMonitoringV3GetApplicationMonitoringRiskProfilesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/risk-profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringRiskProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMonitoringRiskProfileFindingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMonitoringRiskProfileFindingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMonitoringRiskProfileFindingListResponse)));
        }

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        public ApplicationMonitoringVulnerabilityFindingListResponse ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse> localVarResponse = ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        public ApiResponse< ApplicationMonitoringVulnerabilityFindingListResponse > ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/vulnerabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMonitoringVulnerabilityFindingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMonitoringVulnerabilityFindingListResponse)));
        }

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationMonitoringVulnerabilityFindingListResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationMonitoringVulnerabilityFindingListResponse> ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse> localVarResponse = await ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesAsyncWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Application Monitoring Vulnerability for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationMonitoringVulnerabilityFindingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse>> ApplicationMonitoringV3GetApplicationMonitoringVulnerabilitiesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/vulnerabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3GetApplicationMonitoringVulnerabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationMonitoringVulnerabilityFindingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationMonitoringVulnerabilityFindingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationMonitoringVulnerabilityFindingListResponse)));
        }

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns></returns>
        public void ApplicationMonitoringV3PutApplicationMonitoringConfig (int? applicationId, PutApplicationMonitoringConfigRequest requestModel)
        {
             ApplicationMonitoringV3PutApplicationMonitoringConfigWithHttpInfo(applicationId, requestModel);
        }

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplicationMonitoringV3PutApplicationMonitoringConfigWithHttpInfo (int? applicationId, PutApplicationMonitoringConfigRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3PutApplicationMonitoringConfig");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationMonitoringApi->ApplicationMonitoringV3PutApplicationMonitoringConfig");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3PutApplicationMonitoringConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplicationMonitoringV3PutApplicationMonitoringConfigAsync (int? applicationId, PutApplicationMonitoringConfigRequest requestModel)
        {
             await ApplicationMonitoringV3PutApplicationMonitoringConfigAsyncWithHttpInfo(applicationId, requestModel);

        }

        /// <summary>
        /// Update an Application Monitoring Configuration for a given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application monitoring config data</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplicationMonitoringV3PutApplicationMonitoringConfigAsyncWithHttpInfo (int? applicationId, PutApplicationMonitoringConfigRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationMonitoringApi->ApplicationMonitoringV3PutApplicationMonitoringConfig");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationMonitoringApi->ApplicationMonitoringV3PutApplicationMonitoringConfig");

            var localVarPath = "/api/v3/applications/{applicationId}/application-monitoring/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationMonitoringV3PutApplicationMonitoringConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
