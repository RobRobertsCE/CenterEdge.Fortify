/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMobileScansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        PutImportScanResponse MobileScansV3PutImportScan (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);

        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        ApiResponse<PutImportScanResponse> MobileScansV3PutImportScanWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);
        /// <summary>
        /// Saves mobile scan setup details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>PutMobileScanSetupResponse</returns>
        PutMobileScanSetupResponse MobileScansV3PutMobileScanSetup (int? releaseId, PutMobileScanSetupRequest requestModel);

        /// <summary>
        /// Saves mobile scan setup details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>ApiResponse of PutMobileScanSetupResponse</returns>
        ApiResponse<PutMobileScanSetupResponse> MobileScansV3PutMobileScanSetupWithHttpInfo (int? releaseId, PutMobileScanSetupRequest requestModel);
        /// <summary>
        /// Starts a mobile scan for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>PostMobileScanResponse</returns>
        PostMobileScanResponse MobileScansV3Scan (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null);

        /// <summary>
        /// Starts a mobile scan for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>ApiResponse of PostMobileScanResponse</returns>
        ApiResponse<PostMobileScanResponse> MobileScansV3ScanWithHttpInfo (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        System.Threading.Tasks.Task<PutImportScanResponse> MobileScansV3PutImportScanAsync (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);

        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> MobileScansV3PutImportScanAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);
        /// <summary>
        /// Saves mobile scan setup details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>Task of PutMobileScanSetupResponse</returns>
        System.Threading.Tasks.Task<PutMobileScanSetupResponse> MobileScansV3PutMobileScanSetupAsync (int? releaseId, PutMobileScanSetupRequest requestModel);

        /// <summary>
        /// Saves mobile scan setup details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>Task of ApiResponse (PutMobileScanSetupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutMobileScanSetupResponse>> MobileScansV3PutMobileScanSetupAsyncWithHttpInfo (int? releaseId, PutMobileScanSetupRequest requestModel);
        /// <summary>
        /// Starts a mobile scan for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>Task of PostMobileScanResponse</returns>
        System.Threading.Tasks.Task<PostMobileScanResponse> MobileScansV3ScanAsync (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null);

        /// <summary>
        /// Starts a mobile scan for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>Task of ApiResponse (PostMobileScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostMobileScanResponse>> MobileScansV3ScanAsyncWithHttpInfo (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MobileScansApi : IMobileScansApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MobileScansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MobileScansApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MobileScansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MobileScansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        public PutImportScanResponse MobileScansV3PutImportScan (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = MobileScansV3PutImportScanWithHttpInfo(releaseId, fragNo, offset, fileLength, importScanSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        public ApiResponse< PutImportScanResponse > MobileScansV3PutImportScanWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'fileLength' is set
            if (fileLength == null)
                throw new ApiException(400, "Missing required parameter 'fileLength' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'importScanSessionId' is set
            if (importScanSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importScanSessionId' when calling MobileScansApi->MobileScansV3PutImportScan");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fileLength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fileLength", fileLength)); // query parameter
            if (importScanSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importScanSessionId", importScanSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        public async System.Threading.Tasks.Task<PutImportScanResponse> MobileScansV3PutImportScanAsync (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = await MobileScansV3PutImportScanAsyncWithHttpInfo(releaseId, fragNo, offset, fileLength, importScanSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> MobileScansV3PutImportScanAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'fileLength' is set
            if (fileLength == null)
                throw new ApiException(400, "Missing required parameter 'fileLength' when calling MobileScansApi->MobileScansV3PutImportScan");
            // verify the required parameter 'importScanSessionId' is set
            if (importScanSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importScanSessionId' when calling MobileScansApi->MobileScansV3PutImportScan");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fileLength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fileLength", fileLength)); // query parameter
            if (importScanSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importScanSessionId", importScanSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

        /// <summary>
        /// Saves mobile scan setup details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>PutMobileScanSetupResponse</returns>
        public PutMobileScanSetupResponse MobileScansV3PutMobileScanSetup (int? releaseId, PutMobileScanSetupRequest requestModel)
        {
             ApiResponse<PutMobileScanSetupResponse> localVarResponse = MobileScansV3PutMobileScanSetupWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves mobile scan setup details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>ApiResponse of PutMobileScanSetupResponse</returns>
        public ApiResponse< PutMobileScanSetupResponse > MobileScansV3PutMobileScanSetupWithHttpInfo (int? releaseId, PutMobileScanSetupRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3PutMobileScanSetup");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling MobileScansApi->MobileScansV3PutMobileScanSetup");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/scan-setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3PutMobileScanSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutMobileScanSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutMobileScanSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutMobileScanSetupResponse)));
        }

        /// <summary>
        /// Saves mobile scan setup details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>Task of PutMobileScanSetupResponse</returns>
        public async System.Threading.Tasks.Task<PutMobileScanSetupResponse> MobileScansV3PutMobileScanSetupAsync (int? releaseId, PutMobileScanSetupRequest requestModel)
        {
             ApiResponse<PutMobileScanSetupResponse> localVarResponse = await MobileScansV3PutMobileScanSetupAsyncWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves mobile scan setup details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutMobileScanRequest model</param>
        /// <returns>Task of ApiResponse (PutMobileScanSetupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutMobileScanSetupResponse>> MobileScansV3PutMobileScanSetupAsyncWithHttpInfo (int? releaseId, PutMobileScanSetupRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3PutMobileScanSetup");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling MobileScansApi->MobileScansV3PutMobileScanSetup");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/scan-setup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3PutMobileScanSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutMobileScanSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutMobileScanSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutMobileScanSetupResponse)));
        }

        /// <summary>
        /// Starts a mobile scan for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>PostMobileScanResponse</returns>
        public PostMobileScanResponse MobileScansV3Scan (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null)
        {
             ApiResponse<PostMobileScanResponse> localVarResponse = MobileScansV3ScanWithHttpInfo(releaseId, startDate, assessmentTypeId, frameworkType, platformType, timeZone, fragNo, offset, entitlementId, entitlementFrequencyType, isRemediationScan, isBundledAssessment, parentAssessmentTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a mobile scan for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>ApiResponse of PostMobileScanResponse</returns>
        public ApiResponse< PostMobileScanResponse > MobileScansV3ScanWithHttpInfo (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'assessmentTypeId' is set
            if (assessmentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentTypeId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'frameworkType' is set
            if (frameworkType == null)
                throw new ApiException(400, "Missing required parameter 'frameworkType' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'platformType' is set
            if (platformType == null)
                throw new ApiException(400, "Missing required parameter 'platformType' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'timeZone' is set
            if (timeZone == null)
                throw new ApiException(400, "Missing required parameter 'timeZone' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'entitlementFrequencyType' is set
            if (entitlementFrequencyType == null)
                throw new ApiException(400, "Missing required parameter 'entitlementFrequencyType' when calling MobileScansApi->MobileScansV3Scan");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/start-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (frameworkType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "frameworkType", frameworkType)); // query parameter
            if (platformType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platformType", platformType)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeZone", timeZone)); // query parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (entitlementId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementId", entitlementId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (isBundledAssessment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isBundledAssessment", isBundledAssessment)); // query parameter
            if (parentAssessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentAssessmentTypeId", parentAssessmentTypeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3Scan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostMobileScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostMobileScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostMobileScanResponse)));
        }

        /// <summary>
        /// Starts a mobile scan for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>Task of PostMobileScanResponse</returns>
        public async System.Threading.Tasks.Task<PostMobileScanResponse> MobileScansV3ScanAsync (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null)
        {
             ApiResponse<PostMobileScanResponse> localVarResponse = await MobileScansV3ScanAsyncWithHttpInfo(releaseId, startDate, assessmentTypeId, frameworkType, platformType, timeZone, fragNo, offset, entitlementId, entitlementFrequencyType, isRemediationScan, isBundledAssessment, parentAssessmentTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts a mobile scan for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="startDate">The start date for the scan in MM/dd/yyyy HH:mm format</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="frameworkType">The framework type id. Only iOS and Android are supported at this time</param>
        /// <param name="platformType">The platform type</param>
        /// <param name="timeZone">The time zone</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="isRemediationScan">Indicates if the scan is a remediation scan (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <returns>Task of ApiResponse (PostMobileScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostMobileScanResponse>> MobileScansV3ScanAsyncWithHttpInfo (int? releaseId, DateTime? startDate, int? assessmentTypeId, string frameworkType, string platformType, string timeZone, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, bool? isRemediationScan = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'assessmentTypeId' is set
            if (assessmentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentTypeId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'frameworkType' is set
            if (frameworkType == null)
                throw new ApiException(400, "Missing required parameter 'frameworkType' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'platformType' is set
            if (platformType == null)
                throw new ApiException(400, "Missing required parameter 'platformType' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'timeZone' is set
            if (timeZone == null)
                throw new ApiException(400, "Missing required parameter 'timeZone' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling MobileScansApi->MobileScansV3Scan");
            // verify the required parameter 'entitlementFrequencyType' is set
            if (entitlementFrequencyType == null)
                throw new ApiException(400, "Missing required parameter 'entitlementFrequencyType' when calling MobileScansApi->MobileScansV3Scan");

            var localVarPath = "/api/v3/releases/{releaseId}/mobile-scans/start-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (frameworkType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "frameworkType", frameworkType)); // query parameter
            if (platformType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "platformType", platformType)); // query parameter
            if (timeZone != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timeZone", timeZone)); // query parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (entitlementId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementId", entitlementId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (isBundledAssessment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isBundledAssessment", isBundledAssessment)); // query parameter
            if (parentAssessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentAssessmentTypeId", parentAssessmentTypeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MobileScansV3Scan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostMobileScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostMobileScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostMobileScanResponse)));
        }

    }
}
