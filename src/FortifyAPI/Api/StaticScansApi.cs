/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaticScansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        PutImportScanResponse StaticScansV3PutImportScan (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);

        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        ApiResponse<PutImportScanResponse> StaticScansV3PutImportScanWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);
        /// <summary>
        /// Start a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>PostStartScanResponse</returns>
        PostStartScanResponse StaticScansV3StartScan (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null);

        /// <summary>
        /// Start a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>ApiResponse of PostStartScanResponse</returns>
        ApiResponse<PostStartScanResponse> StaticScansV3StartScanWithHttpInfo (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null);
        /// <summary>
        /// Start a static scan using the default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>PostStartScanResponse</returns>
        PostStartScanResponse StaticScansV3StartScanWithDefaults (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null);

        /// <summary>
        /// Start a static scan using the default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>ApiResponse of PostStartScanResponse</returns>
        ApiResponse<PostStartScanResponse> StaticScansV3StartScanWithDefaultsWithHttpInfo (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        System.Threading.Tasks.Task<PutImportScanResponse> StaticScansV3PutImportScanAsync (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);

        /// <summary>
        /// Saves the contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> StaticScansV3PutImportScanAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId);
        /// <summary>
        /// Start a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of PostStartScanResponse</returns>
        System.Threading.Tasks.Task<PostStartScanResponse> StaticScansV3StartScanAsync (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null);

        /// <summary>
        /// Start a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of ApiResponse (PostStartScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostStartScanResponse>> StaticScansV3StartScanAsyncWithHttpInfo (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null);
        /// <summary>
        /// Start a static scan using the default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of PostStartScanResponse</returns>
        System.Threading.Tasks.Task<PostStartScanResponse> StaticScansV3StartScanWithDefaultsAsync (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null);

        /// <summary>
        /// Start a static scan using the default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of ApiResponse (PostStartScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostStartScanResponse>> StaticScansV3StartScanWithDefaultsAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StaticScansApi : IStaticScansApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticScansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StaticScansApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaticScansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StaticScansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        public PutImportScanResponse StaticScansV3PutImportScan (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = StaticScansV3PutImportScanWithHttpInfo(releaseId, fragNo, offset, fileLength, importScanSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        public ApiResponse< PutImportScanResponse > StaticScansV3PutImportScanWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'fileLength' is set
            if (fileLength == null)
                throw new ApiException(400, "Missing required parameter 'fileLength' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'importScanSessionId' is set
            if (importScanSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importScanSessionId' when calling StaticScansApi->StaticScansV3PutImportScan");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fileLength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fileLength", fileLength)); // query parameter
            if (importScanSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importScanSessionId", importScanSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        public async System.Threading.Tasks.Task<PutImportScanResponse> StaticScansV3PutImportScanAsync (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = await StaticScansV3PutImportScanAsyncWithHttpInfo(releaseId, fragNo, offset, fileLength, importScanSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves the contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="fileLength">The number of bytes of the file being imported</param>
        /// <param name="importScanSessionId">The unique importScanSessionId to use for the session provided by GET /api/v3/releases/{releaseId}/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> StaticScansV3PutImportScanAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, long? fileLength, string importScanSessionId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'fileLength' is set
            if (fileLength == null)
                throw new ApiException(400, "Missing required parameter 'fileLength' when calling StaticScansApi->StaticScansV3PutImportScan");
            // verify the required parameter 'importScanSessionId' is set
            if (importScanSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importScanSessionId' when calling StaticScansApi->StaticScansV3PutImportScan");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fileLength != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fileLength", fileLength)); // query parameter
            if (importScanSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importScanSessionId", importScanSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

        /// <summary>
        /// Start a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>PostStartScanResponse</returns>
        public PostStartScanResponse StaticScansV3StartScan (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null)
        {
             ApiResponse<PostStartScanResponse> localVarResponse = StaticScansV3StartScanWithHttpInfo(releaseId, assessmentTypeId, technologyStack, fragNo, offset, entitlementId, entitlementFrequencyType, languageLevel, isRemediationScan, doSonatypeScan, excludeThirdPartyLibs, scanPreferenceType, auditPreferenceType, isBundledAssessment, parentAssessmentTypeId, notes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>ApiResponse of PostStartScanResponse</returns>
        public ApiResponse< PostStartScanResponse > StaticScansV3StartScanWithHttpInfo (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'assessmentTypeId' is set
            if (assessmentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentTypeId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'technologyStack' is set
            if (technologyStack == null)
                throw new ApiException(400, "Missing required parameter 'technologyStack' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'entitlementFrequencyType' is set
            if (entitlementFrequencyType == null)
                throw new ApiException(400, "Missing required parameter 'entitlementFrequencyType' when calling StaticScansApi->StaticScansV3StartScan");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/start-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (technologyStack != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "technologyStack", technologyStack)); // query parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (entitlementId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementId", entitlementId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter
            if (languageLevel != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "languageLevel", languageLevel)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (doSonatypeScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "doSonatypeScan", doSonatypeScan)); // query parameter
            if (excludeThirdPartyLibs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeThirdPartyLibs", excludeThirdPartyLibs)); // query parameter
            if (scanPreferenceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanPreferenceType", scanPreferenceType)); // query parameter
            if (auditPreferenceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "auditPreferenceType", auditPreferenceType)); // query parameter
            if (isBundledAssessment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isBundledAssessment", isBundledAssessment)); // query parameter
            if (parentAssessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentAssessmentTypeId", parentAssessmentTypeId)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3StartScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStartScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostStartScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStartScanResponse)));
        }

        /// <summary>
        /// Start a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of PostStartScanResponse</returns>
        public async System.Threading.Tasks.Task<PostStartScanResponse> StaticScansV3StartScanAsync (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null)
        {
             ApiResponse<PostStartScanResponse> localVarResponse = await StaticScansV3StartScanAsyncWithHttpInfo(releaseId, assessmentTypeId, technologyStack, fragNo, offset, entitlementId, entitlementFrequencyType, languageLevel, isRemediationScan, doSonatypeScan, excludeThirdPartyLibs, scanPreferenceType, auditPreferenceType, isBundledAssessment, parentAssessmentTypeId, notes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="assessmentTypeId">The assessment type id for the scan</param>
        /// <param name="technologyStack">The technology stack</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="entitlementId">The entitlement id to consume</param>
        /// <param name="entitlementFrequencyType">The entitlement frequency type</param>
        /// <param name="languageLevel">The language level (optional)</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="doSonatypeScan">Indicates if a sonatype scan should be included (optional)</param>
        /// <param name="excludeThirdPartyLibs">Indicates if third party libraries should be excluded (optional)</param>
        /// <param name="scanPreferenceType">This parameter is depcrecated. (optional)</param>
        /// <param name="auditPreferenceType">The audit preference type (optional)</param>
        /// <param name="isBundledAssessment">Indicates if the assessment is a bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="parentAssessmentTypeId">The parent assessment type id for the bundled assessment. If not supplied legacy behavior will apply (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of ApiResponse (PostStartScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostStartScanResponse>> StaticScansV3StartScanAsyncWithHttpInfo (int? releaseId, int? assessmentTypeId, string technologyStack, long? fragNo, long? offset, int? entitlementId, string entitlementFrequencyType, string languageLevel = null, bool? isRemediationScan = null, bool? doSonatypeScan = null, bool? excludeThirdPartyLibs = null, string scanPreferenceType = null, string auditPreferenceType = null, bool? isBundledAssessment = null, int? parentAssessmentTypeId = null, string notes = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'assessmentTypeId' is set
            if (assessmentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentTypeId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'technologyStack' is set
            if (technologyStack == null)
                throw new ApiException(400, "Missing required parameter 'technologyStack' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling StaticScansApi->StaticScansV3StartScan");
            // verify the required parameter 'entitlementFrequencyType' is set
            if (entitlementFrequencyType == null)
                throw new ApiException(400, "Missing required parameter 'entitlementFrequencyType' when calling StaticScansApi->StaticScansV3StartScan");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/start-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (technologyStack != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "technologyStack", technologyStack)); // query parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (entitlementId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementId", entitlementId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter
            if (languageLevel != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "languageLevel", languageLevel)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (doSonatypeScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "doSonatypeScan", doSonatypeScan)); // query parameter
            if (excludeThirdPartyLibs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeThirdPartyLibs", excludeThirdPartyLibs)); // query parameter
            if (scanPreferenceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanPreferenceType", scanPreferenceType)); // query parameter
            if (auditPreferenceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "auditPreferenceType", auditPreferenceType)); // query parameter
            if (isBundledAssessment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isBundledAssessment", isBundledAssessment)); // query parameter
            if (parentAssessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentAssessmentTypeId", parentAssessmentTypeId)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3StartScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStartScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostStartScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStartScanResponse)));
        }

        /// <summary>
        /// Start a static scan using the default settings 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>PostStartScanResponse</returns>
        public PostStartScanResponse StaticScansV3StartScanWithDefaults (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null)
        {
             ApiResponse<PostStartScanResponse> localVarResponse = StaticScansV3StartScanWithDefaultsWithHttpInfo(releaseId, fragNo, offset, isRemediationScan, notes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a static scan using the default settings 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>ApiResponse of PostStartScanResponse</returns>
        public ApiResponse< PostStartScanResponse > StaticScansV3StartScanWithDefaultsWithHttpInfo (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/start-scan-with-defaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3StartScanWithDefaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStartScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostStartScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStartScanResponse)));
        }

        /// <summary>
        /// Start a static scan using the default settings 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of PostStartScanResponse</returns>
        public async System.Threading.Tasks.Task<PostStartScanResponse> StaticScansV3StartScanWithDefaultsAsync (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null)
        {
             ApiResponse<PostStartScanResponse> localVarResponse = await StaticScansV3StartScanWithDefaultsAsyncWithHttpInfo(releaseId, fragNo, offset, isRemediationScan, notes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a static scan using the default settings 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="isRemediationScan">Indicates of the scan is a remediation scan (optional)</param>
        /// <param name="notes">The notes about the scan. (optional)</param>
        /// <returns>Task of ApiResponse (PostStartScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostStartScanResponse>> StaticScansV3StartScanWithDefaultsAsyncWithHttpInfo (int? releaseId, long? fragNo, long? offset, bool? isRemediationScan = null, string notes = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling StaticScansApi->StaticScansV3StartScanWithDefaults");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scans/start-scan-with-defaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (isRemediationScan != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isRemediationScan", isRemediationScan)); // query parameter
            if (notes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "notes", notes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StaticScansV3StartScanWithDefaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostStartScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostStartScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostStartScanResponse)));
        }

    }
}
