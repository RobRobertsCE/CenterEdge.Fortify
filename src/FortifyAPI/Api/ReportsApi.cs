/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>DeleteReportResponse</returns>
        DeleteReportResponse ReportsV3Delete (int? reportId);

        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of DeleteReportResponse</returns>
        ApiResponse<DeleteReportResponse> ReportsV3DeleteWithHttpInfo (int? reportId);
        /// <summary>
        /// Download the report in binary format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReportsV3Download (int? reportId);

        /// <summary>
        /// Download the report in binary format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReportsV3DownloadWithHttpInfo (int? reportId);
        /// <summary>
        /// Get report summary data for the given report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Report</returns>
        Report ReportsV3GetReport (int? reportId);

        /// <summary>
        /// Get report summary data for the given report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of Report</returns>
        ApiResponse<Report> ReportsV3GetReportWithHttpInfo (int? reportId);
        /// <summary>
        /// Get a list of report summary data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReportListResponse</returns>
        ReportListResponse ReportsV3GetReports (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of report summary data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReportListResponse</returns>
        ApiResponse<ReportListResponse> ReportsV3GetReportsWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>PostReportResponse</returns>
        PostReportResponse ReportsV3PostReport (PostReportRequest requestModel);

        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>ApiResponse of PostReportResponse</returns>
        ApiResponse<PostReportResponse> ReportsV3PostReportWithHttpInfo (PostReportRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of DeleteReportResponse</returns>
        System.Threading.Tasks.Task<DeleteReportResponse> ReportsV3DeleteAsync (int? reportId);

        /// <summary>
        /// Delete a report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (DeleteReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteReportResponse>> ReportsV3DeleteAsyncWithHttpInfo (int? reportId);
        /// <summary>
        /// Download the report in binary format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReportsV3DownloadAsync (int? reportId);

        /// <summary>
        /// Download the report in binary format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReportsV3DownloadAsyncWithHttpInfo (int? reportId);
        /// <summary>
        /// Get report summary data for the given report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of Report</returns>
        System.Threading.Tasks.Task<Report> ReportsV3GetReportAsync (int? reportId);

        /// <summary>
        /// Get report summary data for the given report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        System.Threading.Tasks.Task<ApiResponse<Report>> ReportsV3GetReportAsyncWithHttpInfo (int? reportId);
        /// <summary>
        /// Get a list of report summary data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReportListResponse</returns>
        System.Threading.Tasks.Task<ReportListResponse> ReportsV3GetReportsAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of report summary data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReportListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportListResponse>> ReportsV3GetReportsAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>Task of PostReportResponse</returns>
        System.Threading.Tasks.Task<PostReportResponse> ReportsV3PostReportAsync (PostReportRequest requestModel);

        /// <summary>
        /// Create a new report
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>Task of ApiResponse (PostReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostReportResponse>> ReportsV3PostReportAsyncWithHttpInfo (PostReportRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>DeleteReportResponse</returns>
        public DeleteReportResponse ReportsV3Delete (int? reportId)
        {
             ApiResponse<DeleteReportResponse> localVarResponse = ReportsV3DeleteWithHttpInfo(reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of DeleteReportResponse</returns>
        public ApiResponse< DeleteReportResponse > ReportsV3DeleteWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3Delete");

            var localVarPath = "/api/v3/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteReportResponse)));
        }

        /// <summary>
        /// Delete a report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of DeleteReportResponse</returns>
        public async System.Threading.Tasks.Task<DeleteReportResponse> ReportsV3DeleteAsync (int? reportId)
        {
             ApiResponse<DeleteReportResponse> localVarResponse = await ReportsV3DeleteAsyncWithHttpInfo(reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (DeleteReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteReportResponse>> ReportsV3DeleteAsyncWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3Delete");

            var localVarPath = "/api/v3/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteReportResponse)));
        }

        /// <summary>
        /// Download the report in binary format 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReportsV3Download (int? reportId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReportsV3DownloadWithHttpInfo(reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download the report in binary format 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > ReportsV3DownloadWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3Download");

            var localVarPath = "/api/v3/reports/{reportId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3Download", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download the report in binary format 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReportsV3DownloadAsync (int? reportId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReportsV3DownloadAsyncWithHttpInfo(reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download the report in binary format 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReportsV3DownloadAsyncWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3Download");

            var localVarPath = "/api/v3/reports/{reportId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3Download", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get report summary data for the given report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Report</returns>
        public Report ReportsV3GetReport (int? reportId)
        {
             ApiResponse<Report> localVarResponse = ReportsV3GetReportWithHttpInfo(reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get report summary data for the given report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>ApiResponse of Report</returns>
        public ApiResponse< Report > ReportsV3GetReportWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3GetReport");

            var localVarPath = "/api/v3/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
        }

        /// <summary>
        /// Get report summary data for the given report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of Report</returns>
        public async System.Threading.Tasks.Task<Report> ReportsV3GetReportAsync (int? reportId)
        {
             ApiResponse<Report> localVarResponse = await ReportsV3GetReportAsyncWithHttpInfo(reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report summary data for the given report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">The report id</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Report>> ReportsV3GetReportAsyncWithHttpInfo (int? reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ReportsApi->ReportsV3GetReport");

            var localVarPath = "/api/v3/reports/{reportId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportId != null) localVarPathParams.Add("reportId", Configuration.ApiClient.ParameterToString(reportId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3GetReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
        }

        /// <summary>
        /// Get a list of report summary data 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReportListResponse</returns>
        public ReportListResponse ReportsV3GetReports (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReportListResponse> localVarResponse = ReportsV3GetReportsWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of report summary data 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReportListResponse</returns>
        public ApiResponse< ReportListResponse > ReportsV3GetReportsWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportListResponse)));
        }

        /// <summary>
        /// Get a list of report summary data 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReportListResponse</returns>
        public async System.Threading.Tasks.Task<ReportListResponse> ReportsV3GetReportsAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReportListResponse> localVarResponse = await ReportsV3GetReportsAsyncWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of report summary data 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReportListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportListResponse>> ReportsV3GetReportsAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3GetReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportListResponse)));
        }

        /// <summary>
        /// Create a new report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>PostReportResponse</returns>
        public PostReportResponse ReportsV3PostReport (PostReportRequest requestModel)
        {
             ApiResponse<PostReportResponse> localVarResponse = ReportsV3PostReportWithHttpInfo(requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>ApiResponse of PostReportResponse</returns>
        public ApiResponse< PostReportResponse > ReportsV3PostReportWithHttpInfo (PostReportRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReportsApi->ReportsV3PostReport");

            var localVarPath = "/api/v3/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3PostReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostReportResponse)));
        }

        /// <summary>
        /// Create a new report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>Task of PostReportResponse</returns>
        public async System.Threading.Tasks.Task<PostReportResponse> ReportsV3PostReportAsync (PostReportRequest requestModel)
        {
             ApiResponse<PostReportResponse> localVarResponse = await ReportsV3PostReportAsyncWithHttpInfo(requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new report 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReportRequest model</param>
        /// <returns>Task of ApiResponse (PostReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostReportResponse>> ReportsV3PostReportAsyncWithHttpInfo (PostReportRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReportsApi->ReportsV3PostReport");

            var localVarPath = "/api/v3/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportsV3PostReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostReportResponse)));
        }

    }
}
