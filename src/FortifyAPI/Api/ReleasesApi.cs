/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReleasesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>CategoryRollupsResponse</returns>
        CategoryRollupsResponse ReleasesV3CategoryRollups (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null);

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>ApiResponse of CategoryRollupsResponse</returns>
        ApiResponse<CategoryRollupsResponse> ReleasesV3CategoryRollupsWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null);
        /// <summary>
        /// Deletes the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>DeleteReleaseResponse</returns>
        DeleteReleaseResponse ReleasesV3DeleteRelease (int? releaseId);

        /// <summary>
        /// Deletes the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of DeleteReleaseResponse</returns>
        ApiResponse<DeleteReleaseResponse> ReleasesV3DeleteReleaseWithHttpInfo (int? releaseId);
        /// <summary>
        /// Get a list of available assessment types for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseAssessmentTypeListResponse</returns>
        ReleaseAssessmentTypeListResponse ReleasesV3GetAssessmentTypes (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of available assessment types for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseAssessmentTypeListResponse</returns>
        ApiResponse<ReleaseAssessmentTypeListResponse> ReleasesV3GetAssessmentTypesWithHttpInfo (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get audit options for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>GetAuditOptionsResponse</returns>
        GetAuditOptionsResponse ReleasesV3GetAuditOptions (int? releaseId);

        /// <summary>
        /// Get audit options for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of GetAuditOptionsResponse</returns>
        ApiResponse<GetAuditOptionsResponse> ReleasesV3GetAuditOptionsWithHttpInfo (int? releaseId);
        /// <summary>
        /// Initiates an import scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>GetImportScanSessionIdResponse</returns>
        GetImportScanSessionIdResponse ReleasesV3GetImportScanSessionId (int? releaseId);

        /// <summary>
        /// Initiates an import scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>ApiResponse of GetImportScanSessionIdResponse</returns>
        ApiResponse<GetImportScanSessionIdResponse> ReleasesV3GetImportScanSessionIdWithHttpInfo (int? releaseId);
        /// <summary>
        /// Returns the specific release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Release</returns>
        Release ReleasesV3GetRelease (int? releaseId);

        /// <summary>
        /// Returns the specific release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> ReleasesV3GetReleaseWithHttpInfo (int? releaseId);
        /// <summary>
        /// Returns summary information for the requested scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Scan</returns>
        Scan ReleasesV3GetReleaseScan (int? releaseId, int? scanId);

        /// <summary>
        /// Returns summary information for the requested scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>ApiResponse of Scan</returns>
        ApiResponse<Scan> ReleasesV3GetReleaseScanWithHttpInfo (int? releaseId, int? scanId);
        /// <summary>
        /// Returns a list of releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseListResponse</returns>
        ReleaseListResponse ReleasesV3GetReleases (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseListResponse</returns>
        ApiResponse<ReleaseListResponse> ReleasesV3GetReleasesWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get the fpr for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ReleasesV3GetReleasesFPR (int? releaseId, string scanType);

        /// <summary>
        /// Get the fpr for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ReleasesV3GetReleasesFPRWithHttpInfo (int? releaseId, string scanType);
        /// <summary>
        /// Get a list of scans for a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ScanListResponse</returns>
        ScanListResponse ReleasesV3GetScansByReleaseId (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of scans for a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ScanListResponse</returns>
        ApiResponse<ScanListResponse> ReleasesV3GetScansByReleaseIdWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get the build server integration token for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>GetStaticScanBSITokenResponse</returns>
        GetStaticScanBSITokenResponse ReleasesV3GetStaticScanBSIToken (int? releaseId);

        /// <summary>
        /// Get the build server integration token for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of GetStaticScanBSITokenResponse</returns>
        ApiResponse<GetStaticScanBSITokenResponse> ReleasesV3GetStaticScanBSITokenWithHttpInfo (int? releaseId);
        /// <summary>
        /// Get a list of options available for starting a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>GetStaticScanOptionsResponse</returns>
        GetStaticScanOptionsResponse ReleasesV3GetStaticScanOptions (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null);

        /// <summary>
        /// Get a list of options available for starting a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of GetStaticScanOptionsResponse</returns>
        ApiResponse<GetStaticScanOptionsResponse> ReleasesV3GetStaticScanOptionsWithHttpInfo (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null);
        /// <summary>
        /// Sets the audit action for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns></returns>
        void ReleasesV3PostAuditAction (int? releaseId, PostAuditActionRequest requestModel);

        /// <summary>
        /// Sets the audit action for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReleasesV3PostAuditActionWithHttpInfo (int? releaseId, PostAuditActionRequest requestModel);
        /// <summary>
        /// Cancels a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>PostCancelScanResponse</returns>
        PostCancelScanResponse ReleasesV3PostCancelScan (int? releaseId, int? scanId);

        /// <summary>
        /// Cancels a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>ApiResponse of PostCancelScanResponse</returns>
        ApiResponse<PostCancelScanResponse> ReleasesV3PostCancelScanWithHttpInfo (int? releaseId, int? scanId);
        /// <summary>
        /// Creates a new release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>PostReleaseResponse</returns>
        PostReleaseResponse ReleasesV3PostRelease (PostReleaseRequest requestModel);

        /// <summary>
        /// Creates a new release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>ApiResponse of PostReleaseResponse</returns>
        ApiResponse<PostReleaseResponse> ReleasesV3PostReleaseWithHttpInfo (PostReleaseRequest requestModel);
        /// <summary>
        /// Updates an existing release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>PutReleaseResponse</returns>
        PutReleaseResponse ReleasesV3PutRelease (int? releaseId, PutReleaseRequest requestModel);

        /// <summary>
        /// Updates an existing release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>ApiResponse of PutReleaseResponse</returns>
        ApiResponse<PutReleaseResponse> ReleasesV3PutReleaseWithHttpInfo (int? releaseId, PutReleaseRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>Task of CategoryRollupsResponse</returns>
        System.Threading.Tasks.Task<CategoryRollupsResponse> ReleasesV3CategoryRollupsAsync (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null);

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>Task of ApiResponse (CategoryRollupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryRollupsResponse>> ReleasesV3CategoryRollupsAsyncWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null);
        /// <summary>
        /// Deletes the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of DeleteReleaseResponse</returns>
        System.Threading.Tasks.Task<DeleteReleaseResponse> ReleasesV3DeleteReleaseAsync (int? releaseId);

        /// <summary>
        /// Deletes the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (DeleteReleaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteReleaseResponse>> ReleasesV3DeleteReleaseAsyncWithHttpInfo (int? releaseId);
        /// <summary>
        /// Get a list of available assessment types for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseAssessmentTypeListResponse</returns>
        System.Threading.Tasks.Task<ReleaseAssessmentTypeListResponse> ReleasesV3GetAssessmentTypesAsync (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of available assessment types for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseAssessmentTypeListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseAssessmentTypeListResponse>> ReleasesV3GetAssessmentTypesAsyncWithHttpInfo (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get audit options for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of GetAuditOptionsResponse</returns>
        System.Threading.Tasks.Task<GetAuditOptionsResponse> ReleasesV3GetAuditOptionsAsync (int? releaseId);

        /// <summary>
        /// Get audit options for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (GetAuditOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuditOptionsResponse>> ReleasesV3GetAuditOptionsAsyncWithHttpInfo (int? releaseId);
        /// <summary>
        /// Initiates an import scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>Task of GetImportScanSessionIdResponse</returns>
        System.Threading.Tasks.Task<GetImportScanSessionIdResponse> ReleasesV3GetImportScanSessionIdAsync (int? releaseId);

        /// <summary>
        /// Initiates an import scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>Task of ApiResponse (GetImportScanSessionIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetImportScanSessionIdResponse>> ReleasesV3GetImportScanSessionIdAsyncWithHttpInfo (int? releaseId);
        /// <summary>
        /// Returns the specific release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> ReleasesV3GetReleaseAsync (int? releaseId);

        /// <summary>
        /// Returns the specific release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> ReleasesV3GetReleaseAsyncWithHttpInfo (int? releaseId);
        /// <summary>
        /// Returns summary information for the requested scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of Scan</returns>
        System.Threading.Tasks.Task<Scan> ReleasesV3GetReleaseScanAsync (int? releaseId, int? scanId);

        /// <summary>
        /// Returns summary information for the requested scan id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of ApiResponse (Scan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scan>> ReleasesV3GetReleaseScanAsyncWithHttpInfo (int? releaseId, int? scanId);
        /// <summary>
        /// Returns a list of releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseListResponse</returns>
        System.Threading.Tasks.Task<ReleaseListResponse> ReleasesV3GetReleasesAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseListResponse>> ReleasesV3GetReleasesAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get the fpr for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ReleasesV3GetReleasesFPRAsync (int? releaseId, string scanType);

        /// <summary>
        /// Get the fpr for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReleasesV3GetReleasesFPRAsyncWithHttpInfo (int? releaseId, string scanType);
        /// <summary>
        /// Get a list of scans for a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ScanListResponse</returns>
        System.Threading.Tasks.Task<ScanListResponse> ReleasesV3GetScansByReleaseIdAsync (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of scans for a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ScanListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanListResponse>> ReleasesV3GetScansByReleaseIdAsyncWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Get the build server integration token for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of GetStaticScanBSITokenResponse</returns>
        System.Threading.Tasks.Task<GetStaticScanBSITokenResponse> ReleasesV3GetStaticScanBSITokenAsync (int? releaseId);

        /// <summary>
        /// Get the build server integration token for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (GetStaticScanBSITokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStaticScanBSITokenResponse>> ReleasesV3GetStaticScanBSITokenAsyncWithHttpInfo (int? releaseId);
        /// <summary>
        /// Get a list of options available for starting a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>Task of GetStaticScanOptionsResponse</returns>
        System.Threading.Tasks.Task<GetStaticScanOptionsResponse> ReleasesV3GetStaticScanOptionsAsync (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null);

        /// <summary>
        /// Get a list of options available for starting a static scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>Task of ApiResponse (GetStaticScanOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStaticScanOptionsResponse>> ReleasesV3GetStaticScanOptionsAsyncWithHttpInfo (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null);
        /// <summary>
        /// Sets the audit action for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReleasesV3PostAuditActionAsync (int? releaseId, PostAuditActionRequest requestModel);

        /// <summary>
        /// Sets the audit action for the given release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesV3PostAuditActionAsyncWithHttpInfo (int? releaseId, PostAuditActionRequest requestModel);
        /// <summary>
        /// Cancels a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of PostCancelScanResponse</returns>
        System.Threading.Tasks.Task<PostCancelScanResponse> ReleasesV3PostCancelScanAsync (int? releaseId, int? scanId);

        /// <summary>
        /// Cancels a scan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of ApiResponse (PostCancelScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCancelScanResponse>> ReleasesV3PostCancelScanAsyncWithHttpInfo (int? releaseId, int? scanId);
        /// <summary>
        /// Creates a new release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>Task of PostReleaseResponse</returns>
        System.Threading.Tasks.Task<PostReleaseResponse> ReleasesV3PostReleaseAsync (PostReleaseRequest requestModel);

        /// <summary>
        /// Creates a new release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>Task of ApiResponse (PostReleaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostReleaseResponse>> ReleasesV3PostReleaseAsyncWithHttpInfo (PostReleaseRequest requestModel);
        /// <summary>
        /// Updates an existing release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>Task of PutReleaseResponse</returns>
        System.Threading.Tasks.Task<PutReleaseResponse> ReleasesV3PutReleaseAsync (int? releaseId, PutReleaseRequest requestModel);

        /// <summary>
        /// Updates an existing release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>Task of ApiResponse (PutReleaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutReleaseResponse>> ReleasesV3PutReleaseAsyncWithHttpInfo (int? releaseId, PutReleaseRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReleasesApi : IReleasesApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReleasesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReleasesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>CategoryRollupsResponse</returns>
        public CategoryRollupsResponse ReleasesV3CategoryRollups (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null)
        {
             ApiResponse<CategoryRollupsResponse> localVarResponse = ReleasesV3CategoryRollupsWithHttpInfo(releaseId, orderBy, orderByDirection, showFixed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>ApiResponse of CategoryRollupsResponse</returns>
        public ApiResponse< CategoryRollupsResponse > ReleasesV3CategoryRollupsWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3CategoryRollups");

            var localVarPath = "/api/v3/releases/{releaseId}/category-rollups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (showFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showFixed", showFixed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3CategoryRollups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryRollupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryRollupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryRollupsResponse)));
        }

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>Task of CategoryRollupsResponse</returns>
        public async System.Threading.Tasks.Task<CategoryRollupsResponse> ReleasesV3CategoryRollupsAsync (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null)
        {
             ApiResponse<CategoryRollupsResponse> localVarResponse = await ReleasesV3CategoryRollupsAsyncWithHttpInfo(releaseId, orderBy, orderByDirection, showFixed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and count of vulnerabilities categories, by severity for this release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="showFixed">Indicates of vulnerabilities marked as fixed should be included (optional)</param>
        /// <returns>Task of ApiResponse (CategoryRollupsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryRollupsResponse>> ReleasesV3CategoryRollupsAsyncWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, bool? showFixed = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3CategoryRollups");

            var localVarPath = "/api/v3/releases/{releaseId}/category-rollups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (showFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "showFixed", showFixed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3CategoryRollups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryRollupsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryRollupsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryRollupsResponse)));
        }

        /// <summary>
        /// Deletes the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>DeleteReleaseResponse</returns>
        public DeleteReleaseResponse ReleasesV3DeleteRelease (int? releaseId)
        {
             ApiResponse<DeleteReleaseResponse> localVarResponse = ReleasesV3DeleteReleaseWithHttpInfo(releaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of DeleteReleaseResponse</returns>
        public ApiResponse< DeleteReleaseResponse > ReleasesV3DeleteReleaseWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3DeleteRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3DeleteRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteReleaseResponse)));
        }

        /// <summary>
        /// Deletes the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of DeleteReleaseResponse</returns>
        public async System.Threading.Tasks.Task<DeleteReleaseResponse> ReleasesV3DeleteReleaseAsync (int? releaseId)
        {
             ApiResponse<DeleteReleaseResponse> localVarResponse = await ReleasesV3DeleteReleaseAsyncWithHttpInfo(releaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (DeleteReleaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteReleaseResponse>> ReleasesV3DeleteReleaseAsyncWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3DeleteRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3DeleteRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteReleaseResponse)));
        }

        /// <summary>
        /// Get a list of available assessment types for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseAssessmentTypeListResponse</returns>
        public ReleaseAssessmentTypeListResponse ReleasesV3GetAssessmentTypes (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseAssessmentTypeListResponse> localVarResponse = ReleasesV3GetAssessmentTypesWithHttpInfo(releaseId, scanType, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of available assessment types for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseAssessmentTypeListResponse</returns>
        public ApiResponse< ReleaseAssessmentTypeListResponse > ReleasesV3GetAssessmentTypesWithHttpInfo (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetAssessmentTypes");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReleasesApi->ReleasesV3GetAssessmentTypes");

            var localVarPath = "/api/v3/releases/{releaseId}/assessment-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanType", scanType)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetAssessmentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseAssessmentTypeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseAssessmentTypeListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseAssessmentTypeListResponse)));
        }

        /// <summary>
        /// Get a list of available assessment types for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseAssessmentTypeListResponse</returns>
        public async System.Threading.Tasks.Task<ReleaseAssessmentTypeListResponse> ReleasesV3GetAssessmentTypesAsync (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseAssessmentTypeListResponse> localVarResponse = await ReleasesV3GetAssessmentTypesAsyncWithHttpInfo(releaseId, scanType, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of available assessment types for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseAssessmentTypeListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseAssessmentTypeListResponse>> ReleasesV3GetAssessmentTypesAsyncWithHttpInfo (int? releaseId, string scanType, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetAssessmentTypes");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReleasesApi->ReleasesV3GetAssessmentTypes");

            var localVarPath = "/api/v3/releases/{releaseId}/assessment-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanType", scanType)); // query parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetAssessmentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseAssessmentTypeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseAssessmentTypeListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseAssessmentTypeListResponse)));
        }

        /// <summary>
        /// Get audit options for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>GetAuditOptionsResponse</returns>
        public GetAuditOptionsResponse ReleasesV3GetAuditOptions (int? releaseId)
        {
             ApiResponse<GetAuditOptionsResponse> localVarResponse = ReleasesV3GetAuditOptionsWithHttpInfo(releaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit options for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of GetAuditOptionsResponse</returns>
        public ApiResponse< GetAuditOptionsResponse > ReleasesV3GetAuditOptionsWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetAuditOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/audit-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetAuditOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAuditOptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditOptionsResponse)));
        }

        /// <summary>
        /// Get audit options for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of GetAuditOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAuditOptionsResponse> ReleasesV3GetAuditOptionsAsync (int? releaseId)
        {
             ApiResponse<GetAuditOptionsResponse> localVarResponse = await ReleasesV3GetAuditOptionsAsyncWithHttpInfo(releaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit options for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (GetAuditOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAuditOptionsResponse>> ReleasesV3GetAuditOptionsAsyncWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetAuditOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/audit-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetAuditOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAuditOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAuditOptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAuditOptionsResponse)));
        }

        /// <summary>
        /// Initiates an import scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>GetImportScanSessionIdResponse</returns>
        public GetImportScanSessionIdResponse ReleasesV3GetImportScanSessionId (int? releaseId)
        {
             ApiResponse<GetImportScanSessionIdResponse> localVarResponse = ReleasesV3GetImportScanSessionIdWithHttpInfo(releaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiates an import scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>ApiResponse of GetImportScanSessionIdResponse</returns>
        public ApiResponse< GetImportScanSessionIdResponse > ReleasesV3GetImportScanSessionIdWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetImportScanSessionId");

            var localVarPath = "/api/v3/releases/{releaseId}/import-scan-session-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetImportScanSessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportScanSessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportScanSessionIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportScanSessionIdResponse)));
        }

        /// <summary>
        /// Initiates an import scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>Task of GetImportScanSessionIdResponse</returns>
        public async System.Threading.Tasks.Task<GetImportScanSessionIdResponse> ReleasesV3GetImportScanSessionIdAsync (int? releaseId)
        {
             ApiResponse<GetImportScanSessionIdResponse> localVarResponse = await ReleasesV3GetImportScanSessionIdAsyncWithHttpInfo(releaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiates an import scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">Release Id of the scan to import</param>
        /// <returns>Task of ApiResponse (GetImportScanSessionIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetImportScanSessionIdResponse>> ReleasesV3GetImportScanSessionIdAsyncWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetImportScanSessionId");

            var localVarPath = "/api/v3/releases/{releaseId}/import-scan-session-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetImportScanSessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportScanSessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportScanSessionIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportScanSessionIdResponse)));
        }

        /// <summary>
        /// Returns the specific release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Release</returns>
        public Release ReleasesV3GetRelease (int? releaseId)
        {
             ApiResponse<Release> localVarResponse = ReleasesV3GetReleaseWithHttpInfo(releaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the specific release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > ReleasesV3GetReleaseWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Returns the specific release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> ReleasesV3GetReleaseAsync (int? releaseId)
        {
             ApiResponse<Release> localVarResponse = await ReleasesV3GetReleaseAsyncWithHttpInfo(releaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the specific release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> ReleasesV3GetReleaseAsyncWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Returns summary information for the requested scan id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Scan</returns>
        public Scan ReleasesV3GetReleaseScan (int? releaseId, int? scanId)
        {
             ApiResponse<Scan> localVarResponse = ReleasesV3GetReleaseScanWithHttpInfo(releaseId, scanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns summary information for the requested scan id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>ApiResponse of Scan</returns>
        public ApiResponse< Scan > ReleasesV3GetReleaseScanWithHttpInfo (int? releaseId, int? scanId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetReleaseScan");
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ApiException(400, "Missing required parameter 'scanId' when calling ReleasesApi->ReleasesV3GetReleaseScan");

            var localVarPath = "/api/v3/releases/{releaseId}/scans/{scanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanId != null) localVarPathParams.Add("scanId", Configuration.ApiClient.ParameterToString(scanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleaseScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Scan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scan)));
        }

        /// <summary>
        /// Returns summary information for the requested scan id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of Scan</returns>
        public async System.Threading.Tasks.Task<Scan> ReleasesV3GetReleaseScanAsync (int? releaseId, int? scanId)
        {
             ApiResponse<Scan> localVarResponse = await ReleasesV3GetReleaseScanAsyncWithHttpInfo(releaseId, scanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns summary information for the requested scan id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of ApiResponse (Scan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scan>> ReleasesV3GetReleaseScanAsyncWithHttpInfo (int? releaseId, int? scanId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetReleaseScan");
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ApiException(400, "Missing required parameter 'scanId' when calling ReleasesApi->ReleasesV3GetReleaseScan");

            var localVarPath = "/api/v3/releases/{releaseId}/scans/{scanId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanId != null) localVarPathParams.Add("scanId", Configuration.ApiClient.ParameterToString(scanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleaseScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Scan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Scan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Scan)));
        }

        /// <summary>
        /// Returns a list of releases 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseListResponse</returns>
        public ReleaseListResponse ReleasesV3GetReleases (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseListResponse> localVarResponse = ReleasesV3GetReleasesWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of releases 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseListResponse</returns>
        public ApiResponse< ReleaseListResponse > ReleasesV3GetReleasesWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseListResponse)));
        }

        /// <summary>
        /// Returns a list of releases 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseListResponse</returns>
        public async System.Threading.Tasks.Task<ReleaseListResponse> ReleasesV3GetReleasesAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseListResponse> localVarResponse = await ReleasesV3GetReleasesAsyncWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of releases 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseListResponse>> ReleasesV3GetReleasesAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseListResponse)));
        }

        /// <summary>
        /// Get the fpr for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ReleasesV3GetReleasesFPR (int? releaseId, string scanType)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ReleasesV3GetReleasesFPRWithHttpInfo(releaseId, scanType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the fpr for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > ReleasesV3GetReleasesFPRWithHttpInfo (int? releaseId, string scanType)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetReleasesFPR");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReleasesApi->ReleasesV3GetReleasesFPR");

            var localVarPath = "/api/v3/releases/{releaseId}/fpr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanType", scanType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleasesFPR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get the fpr for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ReleasesV3GetReleasesFPRAsync (int? releaseId, string scanType)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ReleasesV3GetReleasesFPRAsyncWithHttpInfo(releaseId, scanType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the fpr for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanType">The scan type</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ReleasesV3GetReleasesFPRAsyncWithHttpInfo (int? releaseId, string scanType)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetReleasesFPR");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReleasesApi->ReleasesV3GetReleasesFPR");

            var localVarPath = "/api/v3/releases/{releaseId}/fpr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scanType", scanType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetReleasesFPR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get a list of scans for a release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ScanListResponse</returns>
        public ScanListResponse ReleasesV3GetScansByReleaseId (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ScanListResponse> localVarResponse = ReleasesV3GetScansByReleaseIdWithHttpInfo(releaseId, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of scans for a release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ScanListResponse</returns>
        public ApiResponse< ScanListResponse > ReleasesV3GetScansByReleaseIdWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetScansByReleaseId");

            var localVarPath = "/api/v3/releases/{releaseId}/scans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetScansByReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScanListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanListResponse)));
        }

        /// <summary>
        /// Get a list of scans for a release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ScanListResponse</returns>
        public async System.Threading.Tasks.Task<ScanListResponse> ReleasesV3GetScansByReleaseIdAsync (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ScanListResponse> localVarResponse = await ReleasesV3GetScansByReleaseIdAsyncWithHttpInfo(releaseId, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of scans for a release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ScanListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScanListResponse>> ReleasesV3GetScansByReleaseIdAsyncWithHttpInfo (int? releaseId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetScansByReleaseId");

            var localVarPath = "/api/v3/releases/{releaseId}/scans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetScansByReleaseId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScanListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanListResponse)));
        }

        /// <summary>
        /// Get the build server integration token for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>GetStaticScanBSITokenResponse</returns>
        public GetStaticScanBSITokenResponse ReleasesV3GetStaticScanBSIToken (int? releaseId)
        {
             ApiResponse<GetStaticScanBSITokenResponse> localVarResponse = ReleasesV3GetStaticScanBSITokenWithHttpInfo(releaseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the build server integration token for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>ApiResponse of GetStaticScanBSITokenResponse</returns>
        public ApiResponse< GetStaticScanBSITokenResponse > ReleasesV3GetStaticScanBSITokenWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetStaticScanBSIToken");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scan-bsi-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetStaticScanBSIToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStaticScanBSITokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStaticScanBSITokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStaticScanBSITokenResponse)));
        }

        /// <summary>
        /// Get the build server integration token for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of GetStaticScanBSITokenResponse</returns>
        public async System.Threading.Tasks.Task<GetStaticScanBSITokenResponse> ReleasesV3GetStaticScanBSITokenAsync (int? releaseId)
        {
             ApiResponse<GetStaticScanBSITokenResponse> localVarResponse = await ReleasesV3GetStaticScanBSITokenAsyncWithHttpInfo(releaseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the build server integration token for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <returns>Task of ApiResponse (GetStaticScanBSITokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStaticScanBSITokenResponse>> ReleasesV3GetStaticScanBSITokenAsyncWithHttpInfo (int? releaseId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetStaticScanBSIToken");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scan-bsi-token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetStaticScanBSIToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStaticScanBSITokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStaticScanBSITokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStaticScanBSITokenResponse)));
        }

        /// <summary>
        /// Get a list of options available for starting a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>GetStaticScanOptionsResponse</returns>
        public GetStaticScanOptionsResponse ReleasesV3GetStaticScanOptions (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null)
        {
             ApiResponse<GetStaticScanOptionsResponse> localVarResponse = ReleasesV3GetStaticScanOptionsWithHttpInfo(releaseId, technologyStack, languageLevel, assessmentTypeId, entitlementFrequencyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of options available for starting a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>ApiResponse of GetStaticScanOptionsResponse</returns>
        public ApiResponse< GetStaticScanOptionsResponse > ReleasesV3GetStaticScanOptionsWithHttpInfo (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetStaticScanOptions");
            // verify the required parameter 'technologyStack' is set
            if (technologyStack == null)
                throw new ApiException(400, "Missing required parameter 'technologyStack' when calling ReleasesApi->ReleasesV3GetStaticScanOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scan-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (technologyStack != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "technologyStack", technologyStack)); // query parameter
            if (languageLevel != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "languageLevel", languageLevel)); // query parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetStaticScanOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStaticScanOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStaticScanOptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStaticScanOptionsResponse)));
        }

        /// <summary>
        /// Get a list of options available for starting a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>Task of GetStaticScanOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetStaticScanOptionsResponse> ReleasesV3GetStaticScanOptionsAsync (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null)
        {
             ApiResponse<GetStaticScanOptionsResponse> localVarResponse = await ReleasesV3GetStaticScanOptionsAsyncWithHttpInfo(releaseId, technologyStack, languageLevel, assessmentTypeId, entitlementFrequencyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of options available for starting a static scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="technologyStack">&lt;p&gt;The technology stack&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;TechnologyTypes&lt;/p&gt;</param>
        /// <param name="languageLevel">&lt;p&gt;The lanaguage level&lt;/p&gt;  &lt;p&gt;Values can be obtained by calling GET /api/v3/lookup-items?type&#x3D;LanguageLevels&lt;/p&gt; (optional)</param>
        /// <param name="assessmentTypeId">&lt;p&gt;The assessment type id for the scan&lt;/p&gt;  &lt;p&gt;If this parameter is supplied entitlementFrequencyType is also required&lt;/p&gt; (optional)</param>
        /// <param name="entitlementFrequencyType">&lt;p&gt;The entitlement frequency type&lt;/p&gt;  &lt;p&gt;If this parameter is supplied assessmentTypeId is also required&lt;/p&gt; (optional)</param>
        /// <returns>Task of ApiResponse (GetStaticScanOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStaticScanOptionsResponse>> ReleasesV3GetStaticScanOptionsAsyncWithHttpInfo (int? releaseId, string technologyStack, string languageLevel = null, int? assessmentTypeId = null, string entitlementFrequencyType = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3GetStaticScanOptions");
            // verify the required parameter 'technologyStack' is set
            if (technologyStack == null)
                throw new ApiException(400, "Missing required parameter 'technologyStack' when calling ReleasesApi->ReleasesV3GetStaticScanOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/static-scan-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (technologyStack != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "technologyStack", technologyStack)); // query parameter
            if (languageLevel != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "languageLevel", languageLevel)); // query parameter
            if (assessmentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "assessmentTypeId", assessmentTypeId)); // query parameter
            if (entitlementFrequencyType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entitlementFrequencyType", entitlementFrequencyType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3GetStaticScanOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStaticScanOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStaticScanOptionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStaticScanOptionsResponse)));
        }

        /// <summary>
        /// Sets the audit action for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns></returns>
        public void ReleasesV3PostAuditAction (int? releaseId, PostAuditActionRequest requestModel)
        {
             ReleasesV3PostAuditActionWithHttpInfo(releaseId, requestModel);
        }

        /// <summary>
        /// Sets the audit action for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReleasesV3PostAuditActionWithHttpInfo (int? releaseId, PostAuditActionRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PostAuditAction");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PostAuditAction");

            var localVarPath = "/api/v3/releases/{releaseId}/audit-action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostAuditAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the audit action for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReleasesV3PostAuditActionAsync (int? releaseId, PostAuditActionRequest requestModel)
        {
             await ReleasesV3PostAuditActionAsyncWithHttpInfo(releaseId, requestModel);

        }

        /// <summary>
        /// Sets the audit action for the given release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostAuditActionRequest model</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReleasesV3PostAuditActionAsyncWithHttpInfo (int? releaseId, PostAuditActionRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PostAuditAction");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PostAuditAction");

            var localVarPath = "/api/v3/releases/{releaseId}/audit-action";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostAuditAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels a scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>PostCancelScanResponse</returns>
        public PostCancelScanResponse ReleasesV3PostCancelScan (int? releaseId, int? scanId)
        {
             ApiResponse<PostCancelScanResponse> localVarResponse = ReleasesV3PostCancelScanWithHttpInfo(releaseId, scanId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>ApiResponse of PostCancelScanResponse</returns>
        public ApiResponse< PostCancelScanResponse > ReleasesV3PostCancelScanWithHttpInfo (int? releaseId, int? scanId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PostCancelScan");
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ApiException(400, "Missing required parameter 'scanId' when calling ReleasesApi->ReleasesV3PostCancelScan");

            var localVarPath = "/api/v3/releases/{releaseId}/scans/{scanId}/cancel-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanId != null) localVarPathParams.Add("scanId", Configuration.ApiClient.ParameterToString(scanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostCancelScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCancelScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostCancelScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCancelScanResponse)));
        }

        /// <summary>
        /// Cancels a scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of PostCancelScanResponse</returns>
        public async System.Threading.Tasks.Task<PostCancelScanResponse> ReleasesV3PostCancelScanAsync (int? releaseId, int? scanId)
        {
             ApiResponse<PostCancelScanResponse> localVarResponse = await ReleasesV3PostCancelScanAsyncWithHttpInfo(releaseId, scanId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels a scan 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="scanId">The scan id</param>
        /// <returns>Task of ApiResponse (PostCancelScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostCancelScanResponse>> ReleasesV3PostCancelScanAsyncWithHttpInfo (int? releaseId, int? scanId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PostCancelScan");
            // verify the required parameter 'scanId' is set
            if (scanId == null)
                throw new ApiException(400, "Missing required parameter 'scanId' when calling ReleasesApi->ReleasesV3PostCancelScan");

            var localVarPath = "/api/v3/releases/{releaseId}/scans/{scanId}/cancel-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (scanId != null) localVarPathParams.Add("scanId", Configuration.ApiClient.ParameterToString(scanId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostCancelScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostCancelScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostCancelScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostCancelScanResponse)));
        }

        /// <summary>
        /// Creates a new release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>PostReleaseResponse</returns>
        public PostReleaseResponse ReleasesV3PostRelease (PostReleaseRequest requestModel)
        {
             ApiResponse<PostReleaseResponse> localVarResponse = ReleasesV3PostReleaseWithHttpInfo(requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>ApiResponse of PostReleaseResponse</returns>
        public ApiResponse< PostReleaseResponse > ReleasesV3PostReleaseWithHttpInfo (PostReleaseRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PostRelease");

            var localVarPath = "/api/v3/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostReleaseResponse)));
        }

        /// <summary>
        /// Creates a new release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>Task of PostReleaseResponse</returns>
        public async System.Threading.Tasks.Task<PostReleaseResponse> ReleasesV3PostReleaseAsync (PostReleaseRequest requestModel)
        {
             ApiResponse<PostReleaseResponse> localVarResponse = await ReleasesV3PostReleaseAsyncWithHttpInfo(requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostReleaseRequest model</param>
        /// <returns>Task of ApiResponse (PostReleaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostReleaseResponse>> ReleasesV3PostReleaseAsyncWithHttpInfo (PostReleaseRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PostRelease");

            var localVarPath = "/api/v3/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PostRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostReleaseResponse)));
        }

        /// <summary>
        /// Updates an existing release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>PutReleaseResponse</returns>
        public PutReleaseResponse ReleasesV3PutRelease (int? releaseId, PutReleaseRequest requestModel)
        {
             ApiResponse<PutReleaseResponse> localVarResponse = ReleasesV3PutReleaseWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>ApiResponse of PutReleaseResponse</returns>
        public ApiResponse< PutReleaseResponse > ReleasesV3PutReleaseWithHttpInfo (int? releaseId, PutReleaseRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PutRelease");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PutRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PutRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutReleaseResponse)));
        }

        /// <summary>
        /// Updates an existing release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>Task of PutReleaseResponse</returns>
        public async System.Threading.Tasks.Task<PutReleaseResponse> ReleasesV3PutReleaseAsync (int? releaseId, PutReleaseRequest requestModel)
        {
             ApiResponse<PutReleaseResponse> localVarResponse = await ReleasesV3PutReleaseAsyncWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PutReleaseRequest model</param>
        /// <returns>Task of ApiResponse (PutReleaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutReleaseResponse>> ReleasesV3PutReleaseAsyncWithHttpInfo (int? releaseId, PutReleaseRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling ReleasesApi->ReleasesV3PutRelease");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ReleasesApi->ReleasesV3PutRelease");

            var localVarPath = "/api/v3/releases/{releaseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleasesV3PutRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutReleaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutReleaseResponse)));
        }

    }
}
