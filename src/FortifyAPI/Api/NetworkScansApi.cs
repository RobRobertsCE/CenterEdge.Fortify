/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkScansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Initiates an import network scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>GetImportScanSessionIdResponse</returns>
        GetImportScanSessionIdResponse NetworkScansV3PostImportScanSessionId (int? applicationId, PostImportNetworkScanSessionRequest requestModel);

        /// <summary>
        /// Initiates an import network scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>ApiResponse of GetImportScanSessionIdResponse</returns>
        ApiResponse<GetImportScanSessionIdResponse> NetworkScansV3PostImportScanSessionIdWithHttpInfo (int? applicationId, PostImportNetworkScanSessionRequest requestModel);
        /// <summary>
        /// Saves contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        PutImportScanResponse NetworkScansV3PutImportScan (int? applicationId, long? fragNo, long? offset, string importSessionId);

        /// <summary>
        /// Saves contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        ApiResponse<PutImportScanResponse> NetworkScansV3PutImportScanWithHttpInfo (int? applicationId, long? fragNo, long? offset, string importSessionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Initiates an import network scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>Task of GetImportScanSessionIdResponse</returns>
        System.Threading.Tasks.Task<GetImportScanSessionIdResponse> NetworkScansV3PostImportScanSessionIdAsync (int? applicationId, PostImportNetworkScanSessionRequest requestModel);

        /// <summary>
        /// Initiates an import network scan session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>Task of ApiResponse (GetImportScanSessionIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetImportScanSessionIdResponse>> NetworkScansV3PostImportScanSessionIdAsyncWithHttpInfo (int? applicationId, PostImportNetworkScanSessionRequest requestModel);
        /// <summary>
        /// Saves contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        System.Threading.Tasks.Task<PutImportScanResponse> NetworkScansV3PutImportScanAsync (int? applicationId, long? fragNo, long? offset, string importSessionId);

        /// <summary>
        /// Saves contents to import scan file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> NetworkScansV3PutImportScanAsyncWithHttpInfo (int? applicationId, long? fragNo, long? offset, string importSessionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NetworkScansApi : INetworkScansApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkScansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkScansApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkScansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkScansApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Initiates an import network scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>GetImportScanSessionIdResponse</returns>
        public GetImportScanSessionIdResponse NetworkScansV3PostImportScanSessionId (int? applicationId, PostImportNetworkScanSessionRequest requestModel)
        {
             ApiResponse<GetImportScanSessionIdResponse> localVarResponse = NetworkScansV3PostImportScanSessionIdWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiates an import network scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>ApiResponse of GetImportScanSessionIdResponse</returns>
        public ApiResponse< GetImportScanSessionIdResponse > NetworkScansV3PostImportScanSessionIdWithHttpInfo (int? applicationId, PostImportNetworkScanSessionRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NetworkScansApi->NetworkScansV3PostImportScanSessionId");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling NetworkScansApi->NetworkScansV3PostImportScanSessionId");

            var localVarPath = "/api/v3/applications/{applicationId}/network-scans/import-scan-session-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkScansV3PostImportScanSessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportScanSessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportScanSessionIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportScanSessionIdResponse)));
        }

        /// <summary>
        /// Initiates an import network scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>Task of GetImportScanSessionIdResponse</returns>
        public async System.Threading.Tasks.Task<GetImportScanSessionIdResponse> NetworkScansV3PostImportScanSessionIdAsync (int? applicationId, PostImportNetworkScanSessionRequest requestModel)
        {
             ApiResponse<GetImportScanSessionIdResponse> localVarResponse = await NetworkScansV3PostImportScanSessionIdAsyncWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiates an import network scan session 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The network scan session request model</param>
        /// <returns>Task of ApiResponse (GetImportScanSessionIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetImportScanSessionIdResponse>> NetworkScansV3PostImportScanSessionIdAsyncWithHttpInfo (int? applicationId, PostImportNetworkScanSessionRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NetworkScansApi->NetworkScansV3PostImportScanSessionId");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling NetworkScansApi->NetworkScansV3PostImportScanSessionId");

            var localVarPath = "/api/v3/applications/{applicationId}/network-scans/import-scan-session-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkScansV3PostImportScanSessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetImportScanSessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetImportScanSessionIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetImportScanSessionIdResponse)));
        }

        /// <summary>
        /// Saves contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>PutImportScanResponse</returns>
        public PutImportScanResponse NetworkScansV3PutImportScan (int? applicationId, long? fragNo, long? offset, string importSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = NetworkScansV3PutImportScanWithHttpInfo(applicationId, fragNo, offset, importSessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>ApiResponse of PutImportScanResponse</returns>
        public ApiResponse< PutImportScanResponse > NetworkScansV3PutImportScanWithHttpInfo (int? applicationId, long? fragNo, long? offset, string importSessionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'importSessionId' is set
            if (importSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importSessionId' when calling NetworkScansApi->NetworkScansV3PutImportScan");

            var localVarPath = "/api/v3/applications/{applicationId}/network-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (importSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importSessionId", importSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

        /// <summary>
        /// Saves contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>Task of PutImportScanResponse</returns>
        public async System.Threading.Tasks.Task<PutImportScanResponse> NetworkScansV3PutImportScanAsync (int? applicationId, long? fragNo, long? offset, string importSessionId)
        {
             ApiResponse<PutImportScanResponse> localVarResponse = await NetworkScansV3PutImportScanAsyncWithHttpInfo(applicationId, fragNo, offset, importSessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves contents to import scan file 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="fragNo">-1 indicates the fragment of bytes has been sent. The value starts with 0 and increments by 1 for each fragment of bytes sent</param>
        /// <param name="offset">The offset of the bytes sent. 0 indicates the first bytes</param>
        /// <param name="importSessionId">The unique importSessionId to use for the session provided by GET /api/v3/applications/network-scans/import-scan-session-id</param>
        /// <returns>Task of ApiResponse (PutImportScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutImportScanResponse>> NetworkScansV3PutImportScanAsyncWithHttpInfo (int? applicationId, long? fragNo, long? offset, string importSessionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'fragNo' is set
            if (fragNo == null)
                throw new ApiException(400, "Missing required parameter 'fragNo' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling NetworkScansApi->NetworkScansV3PutImportScan");
            // verify the required parameter 'importSessionId' is set
            if (importSessionId == null)
                throw new ApiException(400, "Missing required parameter 'importSessionId' when calling NetworkScansApi->NetworkScansV3PutImportScan");

            var localVarPath = "/api/v3/applications/{applicationId}/network-scans/import-scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (fragNo != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fragNo", fragNo)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (importSessionId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "importSessionId", importSessionId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkScansV3PutImportScan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutImportScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutImportScanResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutImportScanResponse)));
        }

    }
}
