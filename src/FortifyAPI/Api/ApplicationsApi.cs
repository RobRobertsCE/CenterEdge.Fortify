/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>DeleteApplicationResponse</returns>
        DeleteApplicationResponse ApplicationsV3Delete (int? applicationId);

        /// <summary>
        /// Deletes an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of DeleteApplicationResponse</returns>
        ApiResponse<DeleteApplicationResponse> ApplicationsV3DeleteWithHttpInfo (int? applicationId);
        /// <summary>
        /// Retrieves an individual application by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Application</returns>
        Application ApplicationsV3GetApplication (int? applicationId);

        /// <summary>
        /// Retrieves an individual application by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> ApplicationsV3GetApplicationWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns the bug tracker settings for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApplicationBugTracker</returns>
        ApplicationBugTracker ApplicationsV3GetApplicationBugTracker (int? applicationId);

        /// <summary>
        /// Returns the bug tracker settings for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of ApplicationBugTracker</returns>
        ApiResponse<ApplicationBugTracker> ApplicationsV3GetApplicationBugTrackerWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of users that can be set as an application owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationUserListResponse</returns>
        ApplicationUserListResponse ApplicationsV3GetApplicationOwners ();

        /// <summary>
        /// Returns a list of users that can be set as an application owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationUserListResponse</returns>
        ApiResponse<ApplicationUserListResponse> ApplicationsV3GetApplicationOwnersWithHttpInfo ();
        /// <summary>
        /// Returns a list of releases for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseListResponse</returns>
        ReleaseListResponse ApplicationsV3GetApplicationReleases (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of releases for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseListResponse</returns>
        ApiResponse<ReleaseListResponse> ApplicationsV3GetApplicationReleasesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Returns the permissions the current user has for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApplicationUserPermissions</returns>
        ApplicationUserPermissions ApplicationsV3GetApplicationUserPermissions (int? applicationId);

        /// <summary>
        /// Returns the permissions the current user has for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of ApplicationUserPermissions</returns>
        ApiResponse<ApplicationUserPermissions> ApplicationsV3GetApplicationUserPermissionsWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of users that have access to the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetApplicationUsersResponse</returns>
        GetApplicationUsersResponse ApplicationsV3GetApplicationUsers (int? applicationId);

        /// <summary>
        /// Returns a list of users that have access to the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetApplicationUsersResponse</returns>
        ApiResponse<GetApplicationUsersResponse> ApplicationsV3GetApplicationUsersWithHttpInfo (int? applicationId);
        /// <summary>
        /// Retrieve a collection of applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationListResponse</returns>
        ApplicationListResponse ApplicationsV3GetApplications (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve a collection of applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationListResponse</returns>
        ApiResponse<ApplicationListResponse> ApplicationsV3GetApplicationsWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Returns the associated auto-run report type for the application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetAutoReportResponse</returns>
        GetAutoReportResponse ApplicationsV3GetAutoReport (int? applicationId);

        /// <summary>
        /// Returns the associated auto-run report type for the application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetAutoReportResponse</returns>
        ApiResponse<GetAutoReportResponse> ApplicationsV3GetAutoReportWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of scans for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ScanListResponse</returns>
        ScanListResponse ApplicationsV3GetScansByApplicationId (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of scans for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ScanListResponse</returns>
        ApiResponse<ScanListResponse> ApplicationsV3GetScansByApplicationIdWithHttpInfo (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new application and release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>PostApplicationResponse</returns>
        PostApplicationResponse ApplicationsV3PostApplication (PostApplicationRequest requestModel);

        /// <summary>
        /// Create a new application and release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>ApiResponse of PostApplicationResponse</returns>
        ApiResponse<PostApplicationResponse> ApplicationsV3PostApplicationWithHttpInfo (PostApplicationRequest requestModel);
        /// <summary>
        /// Set-up the associated auto-run report for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>PostAutoReportResponse</returns>
        PostAutoReportResponse ApplicationsV3PostAutoReport (int? applicationId, PostAutoReportRequest requestModel);

        /// <summary>
        /// Set-up the associated auto-run report for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>ApiResponse of PostAutoReportResponse</returns>
        ApiResponse<PostAutoReportResponse> ApplicationsV3PostAutoReportWithHttpInfo (int? applicationId, PostAutoReportRequest requestModel);
        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>PutApplicationResponse</returns>
        PutApplicationResponse ApplicationsV3PutApplication (int? applicationId, PutApplicationRequest requestModel);

        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>ApiResponse of PutApplicationResponse</returns>
        ApiResponse<PutApplicationResponse> ApplicationsV3PutApplicationWithHttpInfo (int? applicationId, PutApplicationRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of DeleteApplicationResponse</returns>
        System.Threading.Tasks.Task<DeleteApplicationResponse> ApplicationsV3DeleteAsync (int? applicationId);

        /// <summary>
        /// Deletes an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (DeleteApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteApplicationResponse>> ApplicationsV3DeleteAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Retrieves an individual application by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> ApplicationsV3GetApplicationAsync (int? applicationId);

        /// <summary>
        /// Retrieves an individual application by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsV3GetApplicationAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns the bug tracker settings for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApplicationBugTracker</returns>
        System.Threading.Tasks.Task<ApplicationBugTracker> ApplicationsV3GetApplicationBugTrackerAsync (int? applicationId);

        /// <summary>
        /// Returns the bug tracker settings for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (ApplicationBugTracker)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationBugTracker>> ApplicationsV3GetApplicationBugTrackerAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of users that can be set as an application owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationUserListResponse</returns>
        System.Threading.Tasks.Task<ApplicationUserListResponse> ApplicationsV3GetApplicationOwnersAsync ();

        /// <summary>
        /// Returns a list of users that can be set as an application owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationUserListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUserListResponse>> ApplicationsV3GetApplicationOwnersAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a list of releases for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseListResponse</returns>
        System.Threading.Tasks.Task<ReleaseListResponse> ApplicationsV3GetApplicationReleasesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of releases for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReleaseListResponse>> ApplicationsV3GetApplicationReleasesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Returns the permissions the current user has for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApplicationUserPermissions</returns>
        System.Threading.Tasks.Task<ApplicationUserPermissions> ApplicationsV3GetApplicationUserPermissionsAsync (int? applicationId);

        /// <summary>
        /// Returns the permissions the current user has for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (ApplicationUserPermissions)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUserPermissions>> ApplicationsV3GetApplicationUserPermissionsAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of users that have access to the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetApplicationUsersResponse</returns>
        System.Threading.Tasks.Task<GetApplicationUsersResponse> ApplicationsV3GetApplicationUsersAsync (int? applicationId);

        /// <summary>
        /// Returns a list of users that have access to the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetApplicationUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetApplicationUsersResponse>> ApplicationsV3GetApplicationUsersAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Retrieve a collection of applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationListResponse</returns>
        System.Threading.Tasks.Task<ApplicationListResponse> ApplicationsV3GetApplicationsAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Retrieve a collection of applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationListResponse>> ApplicationsV3GetApplicationsAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Returns the associated auto-run report type for the application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetAutoReportResponse</returns>
        System.Threading.Tasks.Task<GetAutoReportResponse> ApplicationsV3GetAutoReportAsync (int? applicationId);

        /// <summary>
        /// Returns the associated auto-run report type for the application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetAutoReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAutoReportResponse>> ApplicationsV3GetAutoReportAsyncWithHttpInfo (int? applicationId);
        /// <summary>
        /// Returns a list of scans for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ScanListResponse</returns>
        System.Threading.Tasks.Task<ScanListResponse> ApplicationsV3GetScansByApplicationIdAsync (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Returns a list of scans for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ScanListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanListResponse>> ApplicationsV3GetScansByApplicationIdAsyncWithHttpInfo (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new application and release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of PostApplicationResponse</returns>
        System.Threading.Tasks.Task<PostApplicationResponse> ApplicationsV3PostApplicationAsync (PostApplicationRequest requestModel);

        /// <summary>
        /// Create a new application and release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of ApiResponse (PostApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostApplicationResponse>> ApplicationsV3PostApplicationAsyncWithHttpInfo (PostApplicationRequest requestModel);
        /// <summary>
        /// Set-up the associated auto-run report for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>Task of PostAutoReportResponse</returns>
        System.Threading.Tasks.Task<PostAutoReportResponse> ApplicationsV3PostAutoReportAsync (int? applicationId, PostAutoReportRequest requestModel);

        /// <summary>
        /// Set-up the associated auto-run report for the application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>Task of ApiResponse (PostAutoReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostAutoReportResponse>> ApplicationsV3PostAutoReportAsyncWithHttpInfo (int? applicationId, PostAutoReportRequest requestModel);
        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of PutApplicationResponse</returns>
        System.Threading.Tasks.Task<PutApplicationResponse> ApplicationsV3PutApplicationAsync (int? applicationId, PutApplicationRequest requestModel);

        /// <summary>
        /// Update an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of ApiResponse (PutApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutApplicationResponse>> ApplicationsV3PutApplicationAsyncWithHttpInfo (int? applicationId, PutApplicationRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationsApi : IApplicationsApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>DeleteApplicationResponse</returns>
        public DeleteApplicationResponse ApplicationsV3Delete (int? applicationId)
        {
             ApiResponse<DeleteApplicationResponse> localVarResponse = ApplicationsV3DeleteWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of DeleteApplicationResponse</returns>
        public ApiResponse< DeleteApplicationResponse > ApplicationsV3DeleteWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3Delete");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApplicationResponse)));
        }

        /// <summary>
        /// Deletes an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of DeleteApplicationResponse</returns>
        public async System.Threading.Tasks.Task<DeleteApplicationResponse> ApplicationsV3DeleteAsync (int? applicationId)
        {
             ApiResponse<DeleteApplicationResponse> localVarResponse = await ApplicationsV3DeleteAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (DeleteApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteApplicationResponse>> ApplicationsV3DeleteAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3Delete");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApplicationResponse)));
        }

        /// <summary>
        /// Retrieves an individual application by id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Application</returns>
        public Application ApplicationsV3GetApplication (int? applicationId)
        {
             ApiResponse<Application> localVarResponse = ApplicationsV3GetApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an individual application by id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > ApplicationsV3GetApplicationWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplication");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Retrieves an individual application by id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> ApplicationsV3GetApplicationAsync (int? applicationId)
        {
             ApiResponse<Application> localVarResponse = await ApplicationsV3GetApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an individual application by id 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> ApplicationsV3GetApplicationAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplication");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Returns the bug tracker settings for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApplicationBugTracker</returns>
        public ApplicationBugTracker ApplicationsV3GetApplicationBugTracker (int? applicationId)
        {
             ApiResponse<ApplicationBugTracker> localVarResponse = ApplicationsV3GetApplicationBugTrackerWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the bug tracker settings for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of ApplicationBugTracker</returns>
        public ApiResponse< ApplicationBugTracker > ApplicationsV3GetApplicationBugTrackerWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationBugTracker");

            var localVarPath = "/api/v3/applications/{applicationId}/bug-tracker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationBugTracker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationBugTracker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationBugTracker) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationBugTracker)));
        }

        /// <summary>
        /// Returns the bug tracker settings for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApplicationBugTracker</returns>
        public async System.Threading.Tasks.Task<ApplicationBugTracker> ApplicationsV3GetApplicationBugTrackerAsync (int? applicationId)
        {
             ApiResponse<ApplicationBugTracker> localVarResponse = await ApplicationsV3GetApplicationBugTrackerAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the bug tracker settings for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (ApplicationBugTracker)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationBugTracker>> ApplicationsV3GetApplicationBugTrackerAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationBugTracker");

            var localVarPath = "/api/v3/applications/{applicationId}/bug-tracker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationBugTracker", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationBugTracker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationBugTracker) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationBugTracker)));
        }

        /// <summary>
        /// Returns a list of users that can be set as an application owner 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationUserListResponse</returns>
        public ApplicationUserListResponse ApplicationsV3GetApplicationOwners ()
        {
             ApiResponse<ApplicationUserListResponse> localVarResponse = ApplicationsV3GetApplicationOwnersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of users that can be set as an application owner 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationUserListResponse</returns>
        public ApiResponse< ApplicationUserListResponse > ApplicationsV3GetApplicationOwnersWithHttpInfo ()
        {

            var localVarPath = "/api/v3/applications/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUserListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUserListResponse)));
        }

        /// <summary>
        /// Returns a list of users that can be set as an application owner 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationUserListResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationUserListResponse> ApplicationsV3GetApplicationOwnersAsync ()
        {
             ApiResponse<ApplicationUserListResponse> localVarResponse = await ApplicationsV3GetApplicationOwnersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of users that can be set as an application owner 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationUserListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUserListResponse>> ApplicationsV3GetApplicationOwnersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/applications/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUserListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUserListResponse)));
        }

        /// <summary>
        /// Returns a list of releases for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ReleaseListResponse</returns>
        public ReleaseListResponse ApplicationsV3GetApplicationReleases (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseListResponse> localVarResponse = ApplicationsV3GetApplicationReleasesWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of releases for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ReleaseListResponse</returns>
        public ApiResponse< ReleaseListResponse > ApplicationsV3GetApplicationReleasesWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationReleases");

            var localVarPath = "/api/v3/applications/{applicationId}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseListResponse)));
        }

        /// <summary>
        /// Returns a list of releases for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ReleaseListResponse</returns>
        public async System.Threading.Tasks.Task<ReleaseListResponse> ApplicationsV3GetApplicationReleasesAsync (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ReleaseListResponse> localVarResponse = await ApplicationsV3GetApplicationReleasesAsyncWithHttpInfo(applicationId, filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of releases for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ReleaseListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReleaseListResponse>> ApplicationsV3GetApplicationReleasesAsyncWithHttpInfo (int? applicationId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationReleases");

            var localVarPath = "/api/v3/applications/{applicationId}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReleaseListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReleaseListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReleaseListResponse)));
        }

        /// <summary>
        /// Returns the permissions the current user has for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApplicationUserPermissions</returns>
        public ApplicationUserPermissions ApplicationsV3GetApplicationUserPermissions (int? applicationId)
        {
             ApiResponse<ApplicationUserPermissions> localVarResponse = ApplicationsV3GetApplicationUserPermissionsWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the permissions the current user has for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of ApplicationUserPermissions</returns>
        public ApiResponse< ApplicationUserPermissions > ApplicationsV3GetApplicationUserPermissionsWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationUserPermissions");

            var localVarPath = "/api/v3/applications/{applicationId}/user-permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationUserPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUserPermissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUserPermissions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUserPermissions)));
        }

        /// <summary>
        /// Returns the permissions the current user has for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApplicationUserPermissions</returns>
        public async System.Threading.Tasks.Task<ApplicationUserPermissions> ApplicationsV3GetApplicationUserPermissionsAsync (int? applicationId)
        {
             ApiResponse<ApplicationUserPermissions> localVarResponse = await ApplicationsV3GetApplicationUserPermissionsAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the permissions the current user has for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (ApplicationUserPermissions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUserPermissions>> ApplicationsV3GetApplicationUserPermissionsAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationUserPermissions");

            var localVarPath = "/api/v3/applications/{applicationId}/user-permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationUserPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUserPermissions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationUserPermissions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUserPermissions)));
        }

        /// <summary>
        /// Returns a list of users that have access to the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetApplicationUsersResponse</returns>
        public GetApplicationUsersResponse ApplicationsV3GetApplicationUsers (int? applicationId)
        {
             ApiResponse<GetApplicationUsersResponse> localVarResponse = ApplicationsV3GetApplicationUsersWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of users that have access to the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetApplicationUsersResponse</returns>
        public ApiResponse< GetApplicationUsersResponse > ApplicationsV3GetApplicationUsersWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationUsers");

            var localVarPath = "/api/v3/applications/{applicationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetApplicationUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetApplicationUsersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetApplicationUsersResponse)));
        }

        /// <summary>
        /// Returns a list of users that have access to the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetApplicationUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetApplicationUsersResponse> ApplicationsV3GetApplicationUsersAsync (int? applicationId)
        {
             ApiResponse<GetApplicationUsersResponse> localVarResponse = await ApplicationsV3GetApplicationUsersAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of users that have access to the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetApplicationUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetApplicationUsersResponse>> ApplicationsV3GetApplicationUsersAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetApplicationUsers");

            var localVarPath = "/api/v3/applications/{applicationId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetApplicationUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetApplicationUsersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetApplicationUsersResponse)));
        }

        /// <summary>
        /// Retrieve a collection of applications 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApplicationListResponse</returns>
        public ApplicationListResponse ApplicationsV3GetApplications (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationListResponse> localVarResponse = ApplicationsV3GetApplicationsWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a collection of applications 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ApplicationListResponse</returns>
        public ApiResponse< ApplicationListResponse > ApplicationsV3GetApplicationsWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationListResponse)));
        }

        /// <summary>
        /// Retrieve a collection of applications 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApplicationListResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationListResponse> ApplicationsV3GetApplicationsAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ApplicationListResponse> localVarResponse = await ApplicationsV3GetApplicationsAsyncWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a collection of applications 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationListResponse>> ApplicationsV3GetApplicationsAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationListResponse)));
        }

        /// <summary>
        /// Returns the associated auto-run report type for the application. 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>GetAutoReportResponse</returns>
        public GetAutoReportResponse ApplicationsV3GetAutoReport (int? applicationId)
        {
             ApiResponse<GetAutoReportResponse> localVarResponse = ApplicationsV3GetAutoReportWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the associated auto-run report type for the application. 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>ApiResponse of GetAutoReportResponse</returns>
        public ApiResponse< GetAutoReportResponse > ApplicationsV3GetAutoReportWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetAutoReport");

            var localVarPath = "/api/v3/applications/{applicationId}/auto-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetAutoReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAutoReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAutoReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAutoReportResponse)));
        }

        /// <summary>
        /// Returns the associated auto-run report type for the application. 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of GetAutoReportResponse</returns>
        public async System.Threading.Tasks.Task<GetAutoReportResponse> ApplicationsV3GetAutoReportAsync (int? applicationId)
        {
             ApiResponse<GetAutoReportResponse> localVarResponse = await ApplicationsV3GetAutoReportAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the associated auto-run report type for the application. 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <returns>Task of ApiResponse (GetAutoReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAutoReportResponse>> ApplicationsV3GetAutoReportAsyncWithHttpInfo (int? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetAutoReport");

            var localVarPath = "/api/v3/applications/{applicationId}/auto-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetAutoReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAutoReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAutoReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAutoReportResponse)));
        }

        /// <summary>
        /// Returns a list of scans for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ScanListResponse</returns>
        public ScanListResponse ApplicationsV3GetScansByApplicationId (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ScanListResponse> localVarResponse = ApplicationsV3GetScansByApplicationIdWithHttpInfo(applicationId, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of scans for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of ScanListResponse</returns>
        public ApiResponse< ScanListResponse > ApplicationsV3GetScansByApplicationIdWithHttpInfo (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetScansByApplicationId");

            var localVarPath = "/api/v3/applications/{applicationId}/scans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetScansByApplicationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScanListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanListResponse)));
        }

        /// <summary>
        /// Returns a list of scans for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ScanListResponse</returns>
        public async System.Threading.Tasks.Task<ScanListResponse> ApplicationsV3GetScansByApplicationIdAsync (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<ScanListResponse> localVarResponse = await ApplicationsV3GetScansByApplicationIdAsyncWithHttpInfo(applicationId, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of scans for the given application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (ScanListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScanListResponse>> ApplicationsV3GetScansByApplicationIdAsyncWithHttpInfo (int? applicationId, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3GetScansByApplicationId");

            var localVarPath = "/api/v3/applications/{applicationId}/scans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3GetScansByApplicationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScanListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanListResponse)));
        }

        /// <summary>
        /// Create a new application and release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>PostApplicationResponse</returns>
        public PostApplicationResponse ApplicationsV3PostApplication (PostApplicationRequest requestModel)
        {
             ApiResponse<PostApplicationResponse> localVarResponse = ApplicationsV3PostApplicationWithHttpInfo(requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new application and release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>ApiResponse of PostApplicationResponse</returns>
        public ApiResponse< PostApplicationResponse > ApplicationsV3PostApplicationWithHttpInfo (PostApplicationRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PostApplication");

            var localVarPath = "/api/v3/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PostApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostApplicationResponse)));
        }

        /// <summary>
        /// Create a new application and release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of PostApplicationResponse</returns>
        public async System.Threading.Tasks.Task<PostApplicationResponse> ApplicationsV3PostApplicationAsync (PostApplicationRequest requestModel)
        {
             ApiResponse<PostApplicationResponse> localVarResponse = await ApplicationsV3PostApplicationAsyncWithHttpInfo(requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new application and release 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of ApiResponse (PostApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostApplicationResponse>> ApplicationsV3PostApplicationAsyncWithHttpInfo (PostApplicationRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PostApplication");

            var localVarPath = "/api/v3/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PostApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostApplicationResponse)));
        }

        /// <summary>
        /// Set-up the associated auto-run report for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>PostAutoReportResponse</returns>
        public PostAutoReportResponse ApplicationsV3PostAutoReport (int? applicationId, PostAutoReportRequest requestModel)
        {
             ApiResponse<PostAutoReportResponse> localVarResponse = ApplicationsV3PostAutoReportWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set-up the associated auto-run report for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>ApiResponse of PostAutoReportResponse</returns>
        public ApiResponse< PostAutoReportResponse > ApplicationsV3PostAutoReportWithHttpInfo (int? applicationId, PostAutoReportRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3PostAutoReport");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PostAutoReport");

            var localVarPath = "/api/v3/applications/{applicationId}/auto-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PostAutoReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAutoReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostAutoReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostAutoReportResponse)));
        }

        /// <summary>
        /// Set-up the associated auto-run report for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>Task of PostAutoReportResponse</returns>
        public async System.Threading.Tasks.Task<PostAutoReportResponse> ApplicationsV3PostAutoReportAsync (int? applicationId, PostAutoReportRequest requestModel)
        {
             ApiResponse<PostAutoReportResponse> localVarResponse = await ApplicationsV3PostAutoReportAsyncWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set-up the associated auto-run report for the application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The auto report data</param>
        /// <returns>Task of ApiResponse (PostAutoReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostAutoReportResponse>> ApplicationsV3PostAutoReportAsyncWithHttpInfo (int? applicationId, PostAutoReportRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3PostAutoReport");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PostAutoReport");

            var localVarPath = "/api/v3/applications/{applicationId}/auto-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PostAutoReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostAutoReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostAutoReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostAutoReportResponse)));
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>PutApplicationResponse</returns>
        public PutApplicationResponse ApplicationsV3PutApplication (int? applicationId, PutApplicationRequest requestModel)
        {
             ApiResponse<PutApplicationResponse> localVarResponse = ApplicationsV3PutApplicationWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>ApiResponse of PutApplicationResponse</returns>
        public ApiResponse< PutApplicationResponse > ApplicationsV3PutApplicationWithHttpInfo (int? applicationId, PutApplicationRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3PutApplication");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PutApplication");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PutApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutApplicationResponse)));
        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of PutApplicationResponse</returns>
        public async System.Threading.Tasks.Task<PutApplicationResponse> ApplicationsV3PutApplicationAsync (int? applicationId, PutApplicationRequest requestModel)
        {
             ApiResponse<PutApplicationResponse> localVarResponse = await ApplicationsV3PutApplicationAsyncWithHttpInfo(applicationId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an application 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The application id</param>
        /// <param name="requestModel">The application data</param>
        /// <returns>Task of ApiResponse (PutApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutApplicationResponse>> ApplicationsV3PutApplicationAsyncWithHttpInfo (int? applicationId, PutApplicationRequest requestModel)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ApplicationsApi->ApplicationsV3PutApplication");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling ApplicationsApi->ApplicationsV3PutApplication");

            var localVarPath = "/api/v3/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplicationsV3PutApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutApplicationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutApplicationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutApplicationResponse)));
        }

    }
}
