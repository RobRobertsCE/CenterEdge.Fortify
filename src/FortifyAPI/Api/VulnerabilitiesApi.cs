/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVulnerabilitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a screenshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream VulnerabilitiesV3GetScreenshot (int? releaseId, string vulnId, int? screenshotId);

        /// <summary>
        /// Returns a screenshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> VulnerabilitiesV3GetScreenshotWithHttpInfo (int? releaseId, string vulnId, int? screenshotId);
        /// <summary>
        /// Returns a list of vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        GetVulnerabilitiesResponseVulnerabilityListItem VulnerabilitiesV3GetVulnerabilities (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null);

        /// <summary>
        /// Returns a list of vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>ApiResponse of GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem> VulnerabilitiesV3GetVulnerabilitiesWithHttpInfo (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null);
        /// <summary>
        /// Returns all of the data for the vulnerability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityAllData</returns>
        VulnerabilityAllData VulnerabilitiesV3GetVulnerabilityAllData (int? releaseId, string vulnId);

        /// <summary>
        /// Returns all of the data for the vulnerability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityAllData</returns>
        ApiResponse<VulnerabilityAllData> VulnerabilitiesV3GetVulnerabilityAllDataWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability audit options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityAuditOptions</returns>
        VulnerabilityAuditOptions VulnerabilitiesV3GetVulnerabilityAuditOptions (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability audit options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityAuditOptions</returns>
        ApiResponse<VulnerabilityAuditOptions> VulnerabilitiesV3GetVulnerabilityAuditOptionsWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityDetails</returns>
        VulnerabilityDetails VulnerabilitiesV3GetVulnerabilityDetails (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityDetails</returns>
        ApiResponse<VulnerabilityDetails> VulnerabilitiesV3GetVulnerabilityDetailsWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Get available vulnerability filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>FieldFilterListResponse</returns>
        FieldFilterListResponse VulnerabilitiesV3GetVulnerabilityFilters (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null);

        /// <summary>
        /// Get available vulnerability filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>ApiResponse of FieldFilterListResponse</returns>
        ApiResponse<FieldFilterListResponse> VulnerabilitiesV3GetVulnerabilityFiltersWithHttpInfo (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null);
        /// <summary>
        /// Returns the vulnerability headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityHeaders</returns>
        VulnerabilityHeaders VulnerabilitiesV3GetVulnerabilityHeaders (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityHeaders</returns>
        ApiResponse<VulnerabilityHeaders> VulnerabilitiesV3GetVulnerabilityHeadersWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityHistory</returns>
        VulnerabilityHistory VulnerabilitiesV3GetVulnerabilityHistory (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityHistory</returns>
        ApiResponse<VulnerabilityHistory> VulnerabilitiesV3GetVulnerabilityHistoryWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityParameters</returns>
        VulnerabilityParameters VulnerabilitiesV3GetVulnerabilityParameters (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityParameters</returns>
        ApiResponse<VulnerabilityParameters> VulnerabilitiesV3GetVulnerabilityParametersWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability recommendations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityRecommendations</returns>
        VulnerabilityRecommendations VulnerabilitiesV3GetVulnerabilityRecommendations (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability recommendations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityRecommendations</returns>
        ApiResponse<VulnerabilityRecommendations> VulnerabilitiesV3GetVulnerabilityRecommendationsWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability request and response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityRequestResponse</returns>
        VulnerabilityRequestResponse VulnerabilitiesV3GetVulnerabilityRequestResponse (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability request and response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityRequestResponse</returns>
        ApiResponse<VulnerabilityRequestResponse> VulnerabilitiesV3GetVulnerabilityRequestResponseWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityScreenshot</returns>
        VulnerabilityScreenshot VulnerabilitiesV3GetVulnerabilityScreenshots (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityScreenshot</returns>
        ApiResponse<VulnerabilityScreenshot> VulnerabilitiesV3GetVulnerabilityScreenshotsWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilitySummary</returns>
        VulnerabilitySummary VulnerabilitiesV3GetVulnerabilitySummary (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilitySummary</returns>
        ApiResponse<VulnerabilitySummary> VulnerabilitiesV3GetVulnerabilitySummaryWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the trace code for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>VulnerabilityTraceCode</returns>
        VulnerabilityTraceCode VulnerabilitiesV3GetVulnerabilityTraceCode (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);

        /// <summary>
        /// Returns the trace code for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>ApiResponse of VulnerabilityTraceCode</returns>
        ApiResponse<VulnerabilityTraceCode> VulnerabilitiesV3GetVulnerabilityTraceCodeWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);
        /// <summary>
        /// Returns the trace snippet for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>VulnerabilityTraceCodeSnippet</returns>
        VulnerabilityTraceCodeSnippet VulnerabilitiesV3GetVulnerabilityTraceSnippet (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);

        /// <summary>
        /// Returns the trace snippet for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>ApiResponse of VulnerabilityTraceCodeSnippet</returns>
        ApiResponse<VulnerabilityTraceCodeSnippet> VulnerabilitiesV3GetVulnerabilityTraceSnippetWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);
        /// <summary>
        /// Returns the vulnerability traces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityTrace</returns>
        VulnerabilityTrace VulnerabilitiesV3GetVulnerabilityTraces (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability traces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityTrace</returns>
        ApiResponse<VulnerabilityTrace> VulnerabilitiesV3GetVulnerabilityTracesWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Saves bug tracker url for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns></returns>
        void VulnerabilitiesV3PostVulnerabilityBugLink (int? releaseId, PostVulnerabilityBugLinkRequest requestModel);

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VulnerabilitiesV3PostVulnerabilityBugLinkWithHttpInfo (int? releaseId, PostVulnerabilityBugLinkRequest requestModel);
        /// <summary>
        /// Saves audit data for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>PostVulnerabilityBulkEditResponse</returns>
        PostVulnerabilityBulkEditResponse VulnerabilitiesV3PostVulnerabilityEdit (int? releaseId, PostVulnerabilityBulkEditRequest requestModel);

        /// <summary>
        /// Saves audit data for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>ApiResponse of PostVulnerabilityBulkEditResponse</returns>
        ApiResponse<PostVulnerabilityBulkEditResponse> VulnerabilitiesV3PostVulnerabilityEditWithHttpInfo (int? releaseId, PostVulnerabilityBulkEditRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns a screenshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> VulnerabilitiesV3GetScreenshotAsync (int? releaseId, string vulnId, int? screenshotId);

        /// <summary>
        /// Returns a screenshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> VulnerabilitiesV3GetScreenshotAsyncWithHttpInfo (int? releaseId, string vulnId, int? screenshotId);
        /// <summary>
        /// Returns a list of vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>Task of GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        System.Threading.Tasks.Task<GetVulnerabilitiesResponseVulnerabilityListItem> VulnerabilitiesV3GetVulnerabilitiesAsync (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null);

        /// <summary>
        /// Returns a list of vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>Task of ApiResponse (GetVulnerabilitiesResponseVulnerabilityListItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem>> VulnerabilitiesV3GetVulnerabilitiesAsyncWithHttpInfo (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null);
        /// <summary>
        /// Returns all of the data for the vulnerability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityAllData</returns>
        System.Threading.Tasks.Task<VulnerabilityAllData> VulnerabilitiesV3GetVulnerabilityAllDataAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns all of the data for the vulnerability
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityAllData)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityAllData>> VulnerabilitiesV3GetVulnerabilityAllDataAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability audit options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityAuditOptions</returns>
        System.Threading.Tasks.Task<VulnerabilityAuditOptions> VulnerabilitiesV3GetVulnerabilityAuditOptionsAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability audit options
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityAuditOptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityAuditOptions>> VulnerabilitiesV3GetVulnerabilityAuditOptionsAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityDetails</returns>
        System.Threading.Tasks.Task<VulnerabilityDetails> VulnerabilitiesV3GetVulnerabilityDetailsAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityDetails>> VulnerabilitiesV3GetVulnerabilityDetailsAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Get available vulnerability filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>Task of FieldFilterListResponse</returns>
        System.Threading.Tasks.Task<FieldFilterListResponse> VulnerabilitiesV3GetVulnerabilityFiltersAsync (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null);

        /// <summary>
        /// Get available vulnerability filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldFilterListResponse>> VulnerabilitiesV3GetVulnerabilityFiltersAsyncWithHttpInfo (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null);
        /// <summary>
        /// Returns the vulnerability headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityHeaders</returns>
        System.Threading.Tasks.Task<VulnerabilityHeaders> VulnerabilitiesV3GetVulnerabilityHeadersAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability headers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityHeaders)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityHeaders>> VulnerabilitiesV3GetVulnerabilityHeadersAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityHistory</returns>
        System.Threading.Tasks.Task<VulnerabilityHistory> VulnerabilitiesV3GetVulnerabilityHistoryAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityHistory>> VulnerabilitiesV3GetVulnerabilityHistoryAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityParameters</returns>
        System.Threading.Tasks.Task<VulnerabilityParameters> VulnerabilitiesV3GetVulnerabilityParametersAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability parameters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityParameters)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityParameters>> VulnerabilitiesV3GetVulnerabilityParametersAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability recommendations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityRecommendations</returns>
        System.Threading.Tasks.Task<VulnerabilityRecommendations> VulnerabilitiesV3GetVulnerabilityRecommendationsAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability recommendations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityRecommendations)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityRecommendations>> VulnerabilitiesV3GetVulnerabilityRecommendationsAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability request and response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityRequestResponse</returns>
        System.Threading.Tasks.Task<VulnerabilityRequestResponse> VulnerabilitiesV3GetVulnerabilityRequestResponseAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability request and response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityRequestResponse>> VulnerabilitiesV3GetVulnerabilityRequestResponseAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityScreenshot</returns>
        System.Threading.Tasks.Task<VulnerabilityScreenshot> VulnerabilitiesV3GetVulnerabilityScreenshotsAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability screenshots
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityScreenshot)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityScreenshot>> VulnerabilitiesV3GetVulnerabilityScreenshotsAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the vulnerability summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilitySummary</returns>
        System.Threading.Tasks.Task<VulnerabilitySummary> VulnerabilitiesV3GetVulnerabilitySummaryAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilitySummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilitySummary>> VulnerabilitiesV3GetVulnerabilitySummaryAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Returns the trace code for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of VulnerabilityTraceCode</returns>
        System.Threading.Tasks.Task<VulnerabilityTraceCode> VulnerabilitiesV3GetVulnerabilityTraceCodeAsync (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);

        /// <summary>
        /// Returns the trace code for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of ApiResponse (VulnerabilityTraceCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityTraceCode>> VulnerabilitiesV3GetVulnerabilityTraceCodeAsyncWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);
        /// <summary>
        /// Returns the trace snippet for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of VulnerabilityTraceCodeSnippet</returns>
        System.Threading.Tasks.Task<VulnerabilityTraceCodeSnippet> VulnerabilitiesV3GetVulnerabilityTraceSnippetAsync (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);

        /// <summary>
        /// Returns the trace snippet for the specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of ApiResponse (VulnerabilityTraceCodeSnippet)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityTraceCodeSnippet>> VulnerabilitiesV3GetVulnerabilityTraceSnippetAsyncWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex);
        /// <summary>
        /// Returns the vulnerability traces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityTrace</returns>
        System.Threading.Tasks.Task<VulnerabilityTrace> VulnerabilitiesV3GetVulnerabilityTracesAsync (int? releaseId, string vulnId);

        /// <summary>
        /// Returns the vulnerability traces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityTrace)</returns>
        System.Threading.Tasks.Task<ApiResponse<VulnerabilityTrace>> VulnerabilitiesV3GetVulnerabilityTracesAsyncWithHttpInfo (int? releaseId, string vulnId);
        /// <summary>
        /// Saves bug tracker url for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VulnerabilitiesV3PostVulnerabilityBugLinkAsync (int? releaseId, PostVulnerabilityBugLinkRequest requestModel);

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VulnerabilitiesV3PostVulnerabilityBugLinkAsyncWithHttpInfo (int? releaseId, PostVulnerabilityBugLinkRequest requestModel);
        /// <summary>
        /// Saves audit data for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>Task of PostVulnerabilityBulkEditResponse</returns>
        System.Threading.Tasks.Task<PostVulnerabilityBulkEditResponse> VulnerabilitiesV3PostVulnerabilityEditAsync (int? releaseId, PostVulnerabilityBulkEditRequest requestModel);

        /// <summary>
        /// Saves audit data for the vulnerabilities
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>Task of ApiResponse (PostVulnerabilityBulkEditResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostVulnerabilityBulkEditResponse>> VulnerabilitiesV3PostVulnerabilityEditAsyncWithHttpInfo (int? releaseId, PostVulnerabilityBulkEditRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VulnerabilitiesApi : IVulnerabilitiesApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VulnerabilitiesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VulnerabilitiesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns a screenshot 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream VulnerabilitiesV3GetScreenshot (int? releaseId, string vulnId, int? screenshotId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = VulnerabilitiesV3GetScreenshotWithHttpInfo(releaseId, vulnId, screenshotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a screenshot 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > VulnerabilitiesV3GetScreenshotWithHttpInfo (int? releaseId, string vulnId, int? screenshotId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");
            // verify the required parameter 'screenshotId' is set
            if (screenshotId == null)
                throw new ApiException(400, "Missing required parameter 'screenshotId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/screenshot/{screenshotId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (screenshotId != null) localVarPathParams.Add("screenshotId", Configuration.ApiClient.ParameterToString(screenshotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetScreenshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns a screenshot 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> VulnerabilitiesV3GetScreenshotAsync (int? releaseId, string vulnId, int? screenshotId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await VulnerabilitiesV3GetScreenshotAsyncWithHttpInfo(releaseId, vulnId, screenshotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a screenshot 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="screenshotId">The screenshot id</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> VulnerabilitiesV3GetScreenshotAsyncWithHttpInfo (int? releaseId, string vulnId, int? screenshotId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");
            // verify the required parameter 'screenshotId' is set
            if (screenshotId == null)
                throw new ApiException(400, "Missing required parameter 'screenshotId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetScreenshot");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/screenshot/{screenshotId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (screenshotId != null) localVarPathParams.Add("screenshotId", Configuration.ApiClient.ParameterToString(screenshotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetScreenshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Returns a list of vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        public GetVulnerabilitiesResponseVulnerabilityListItem VulnerabilitiesV3GetVulnerabilities (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null)
        {
             ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem> localVarResponse = VulnerabilitiesV3GetVulnerabilitiesWithHttpInfo(releaseId, filters, orderBy, orderByDirection, fields, offset, limit, excludeFilters, includeFixed, includeSuppressed, keywordSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>ApiResponse of GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        public ApiResponse< GetVulnerabilitiesResponseVulnerabilityListItem > VulnerabilitiesV3GetVulnerabilitiesWithHttpInfo (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilities");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (excludeFilters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeFilters", excludeFilters)); // query parameter
            if (includeFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeFixed", includeFixed)); // query parameter
            if (includeSuppressed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSuppressed", includeSuppressed)); // query parameter
            if (keywordSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordSearch", keywordSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVulnerabilitiesResponseVulnerabilityListItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVulnerabilitiesResponseVulnerabilityListItem)));
        }

        /// <summary>
        /// Returns a list of vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>Task of GetVulnerabilitiesResponseVulnerabilityListItem</returns>
        public async System.Threading.Tasks.Task<GetVulnerabilitiesResponseVulnerabilityListItem> VulnerabilitiesV3GetVulnerabilitiesAsync (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null)
        {
             ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem> localVarResponse = await VulnerabilitiesV3GetVulnerabilitiesAsyncWithHttpInfo(releaseId, filters, orderBy, orderByDirection, fields, offset, limit, excludeFilters, includeFixed, includeSuppressed, keywordSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <param name="excludeFilters">Indicates if filter data should be excluded in the return value (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <returns>Task of ApiResponse (GetVulnerabilitiesResponseVulnerabilityListItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem>> VulnerabilitiesV3GetVulnerabilitiesAsyncWithHttpInfo (int? releaseId, string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null, bool? excludeFilters = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilities");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (excludeFilters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeFilters", excludeFilters)); // query parameter
            if (includeFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeFixed", includeFixed)); // query parameter
            if (includeSuppressed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSuppressed", includeSuppressed)); // query parameter
            if (keywordSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordSearch", keywordSearch)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVulnerabilitiesResponseVulnerabilityListItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVulnerabilitiesResponseVulnerabilityListItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVulnerabilitiesResponseVulnerabilityListItem)));
        }

        /// <summary>
        /// Returns all of the data for the vulnerability 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityAllData</returns>
        public VulnerabilityAllData VulnerabilitiesV3GetVulnerabilityAllData (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityAllData> localVarResponse = VulnerabilitiesV3GetVulnerabilityAllDataWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all of the data for the vulnerability 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityAllData</returns>
        public ApiResponse< VulnerabilityAllData > VulnerabilitiesV3GetVulnerabilityAllDataWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAllData");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAllData");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/all-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityAllData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityAllData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityAllData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityAllData)));
        }

        /// <summary>
        /// Returns all of the data for the vulnerability 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityAllData</returns>
        public async System.Threading.Tasks.Task<VulnerabilityAllData> VulnerabilitiesV3GetVulnerabilityAllDataAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityAllData> localVarResponse = await VulnerabilitiesV3GetVulnerabilityAllDataAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all of the data for the vulnerability 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityAllData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityAllData>> VulnerabilitiesV3GetVulnerabilityAllDataAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAllData");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAllData");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/all-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityAllData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityAllData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityAllData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityAllData)));
        }

        /// <summary>
        /// Returns the vulnerability audit options 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityAuditOptions</returns>
        public VulnerabilityAuditOptions VulnerabilitiesV3GetVulnerabilityAuditOptions (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityAuditOptions> localVarResponse = VulnerabilitiesV3GetVulnerabilityAuditOptionsWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability audit options 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityAuditOptions</returns>
        public ApiResponse< VulnerabilityAuditOptions > VulnerabilitiesV3GetVulnerabilityAuditOptionsWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAuditOptions");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAuditOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/audit-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityAuditOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityAuditOptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityAuditOptions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityAuditOptions)));
        }

        /// <summary>
        /// Returns the vulnerability audit options 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityAuditOptions</returns>
        public async System.Threading.Tasks.Task<VulnerabilityAuditOptions> VulnerabilitiesV3GetVulnerabilityAuditOptionsAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityAuditOptions> localVarResponse = await VulnerabilitiesV3GetVulnerabilityAuditOptionsAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability audit options 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityAuditOptions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityAuditOptions>> VulnerabilitiesV3GetVulnerabilityAuditOptionsAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAuditOptions");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityAuditOptions");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/audit-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityAuditOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityAuditOptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityAuditOptions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityAuditOptions)));
        }

        /// <summary>
        /// Returns the vulnerability details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityDetails</returns>
        public VulnerabilityDetails VulnerabilitiesV3GetVulnerabilityDetails (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityDetails> localVarResponse = VulnerabilitiesV3GetVulnerabilityDetailsWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityDetails</returns>
        public ApiResponse< VulnerabilityDetails > VulnerabilitiesV3GetVulnerabilityDetailsWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityDetails");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityDetails");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityDetails)));
        }

        /// <summary>
        /// Returns the vulnerability details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityDetails</returns>
        public async System.Threading.Tasks.Task<VulnerabilityDetails> VulnerabilitiesV3GetVulnerabilityDetailsAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityDetails> localVarResponse = await VulnerabilitiesV3GetVulnerabilityDetailsAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability details 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityDetails>> VulnerabilitiesV3GetVulnerabilityDetailsAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityDetails");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityDetails");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityDetails)));
        }

        /// <summary>
        /// Get available vulnerability filters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>FieldFilterListResponse</returns>
        public FieldFilterListResponse VulnerabilitiesV3GetVulnerabilityFilters (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null)
        {
             ApiResponse<FieldFilterListResponse> localVarResponse = VulnerabilitiesV3GetVulnerabilityFiltersWithHttpInfo(releaseId, filters, fieldName, includeFixed, includeSuppressed, keywordSearch, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available vulnerability filters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>ApiResponse of FieldFilterListResponse</returns>
        public ApiResponse< FieldFilterListResponse > VulnerabilitiesV3GetVulnerabilityFiltersWithHttpInfo (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityFilters");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerability-filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (fieldName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (includeFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeFixed", includeFixed)); // query parameter
            if (includeSuppressed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSuppressed", includeSuppressed)); // query parameter
            if (keywordSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordSearch", keywordSearch)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterListResponse)));
        }

        /// <summary>
        /// Get available vulnerability filters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>Task of FieldFilterListResponse</returns>
        public async System.Threading.Tasks.Task<FieldFilterListResponse> VulnerabilitiesV3GetVulnerabilityFiltersAsync (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null)
        {
             ApiResponse<FieldFilterListResponse> localVarResponse = await VulnerabilitiesV3GetVulnerabilityFiltersAsyncWithHttpInfo(releaseId, filters, fieldName, includeFixed, includeSuppressed, keywordSearch, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available vulnerability filters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt;  &lt;p&gt;OR filtering is not supported for the following fields: CWE, ID, LineNumber, Location, LocationFull, ScanId, Subtype, Package, VulnId&lt;/p&gt; (optional)</param>
        /// <param name="fieldName">The specific field to return (optional)</param>
        /// <param name="includeFixed">Indicates if items that have been fixed should be included in the return value (optional)</param>
        /// <param name="includeSuppressed">Indicates if items that have been suppressed should be included in the return value (optional)</param>
        /// <param name="keywordSearch">Used for keyword searches (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <returns>Task of ApiResponse (FieldFilterListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldFilterListResponse>> VulnerabilitiesV3GetVulnerabilityFiltersAsyncWithHttpInfo (int? releaseId, string filters = null, string fieldName = null, bool? includeFixed = null, bool? includeSuppressed = null, string keywordSearch = null, string fields = null)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityFilters");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerability-filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (fieldName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fieldName", fieldName)); // query parameter
            if (includeFixed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeFixed", includeFixed)); // query parameter
            if (includeSuppressed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includeSuppressed", includeSuppressed)); // query parameter
            if (keywordSearch != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordSearch", keywordSearch)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldFilterListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldFilterListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldFilterListResponse)));
        }

        /// <summary>
        /// Returns the vulnerability headers 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityHeaders</returns>
        public VulnerabilityHeaders VulnerabilitiesV3GetVulnerabilityHeaders (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityHeaders> localVarResponse = VulnerabilitiesV3GetVulnerabilityHeadersWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability headers 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityHeaders</returns>
        public ApiResponse< VulnerabilityHeaders > VulnerabilitiesV3GetVulnerabilityHeadersWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHeaders");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHeaders");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityHeaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityHeaders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityHeaders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityHeaders)));
        }

        /// <summary>
        /// Returns the vulnerability headers 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityHeaders</returns>
        public async System.Threading.Tasks.Task<VulnerabilityHeaders> VulnerabilitiesV3GetVulnerabilityHeadersAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityHeaders> localVarResponse = await VulnerabilitiesV3GetVulnerabilityHeadersAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability headers 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityHeaders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityHeaders>> VulnerabilitiesV3GetVulnerabilityHeadersAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHeaders");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHeaders");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/headers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityHeaders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityHeaders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityHeaders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityHeaders)));
        }

        /// <summary>
        /// Returns the vulnerability history 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityHistory</returns>
        public VulnerabilityHistory VulnerabilitiesV3GetVulnerabilityHistory (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityHistory> localVarResponse = VulnerabilitiesV3GetVulnerabilityHistoryWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability history 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityHistory</returns>
        public ApiResponse< VulnerabilityHistory > VulnerabilitiesV3GetVulnerabilityHistoryWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHistory");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHistory");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityHistory)));
        }

        /// <summary>
        /// Returns the vulnerability history 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityHistory</returns>
        public async System.Threading.Tasks.Task<VulnerabilityHistory> VulnerabilitiesV3GetVulnerabilityHistoryAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityHistory> localVarResponse = await VulnerabilitiesV3GetVulnerabilityHistoryAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability history 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityHistory>> VulnerabilitiesV3GetVulnerabilityHistoryAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHistory");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityHistory");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityHistory)));
        }

        /// <summary>
        /// Returns the vulnerability parameters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityParameters</returns>
        public VulnerabilityParameters VulnerabilitiesV3GetVulnerabilityParameters (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityParameters> localVarResponse = VulnerabilitiesV3GetVulnerabilityParametersWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability parameters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityParameters</returns>
        public ApiResponse< VulnerabilityParameters > VulnerabilitiesV3GetVulnerabilityParametersWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityParameters");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityParameters");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityParameters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityParameters) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityParameters)));
        }

        /// <summary>
        /// Returns the vulnerability parameters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityParameters</returns>
        public async System.Threading.Tasks.Task<VulnerabilityParameters> VulnerabilitiesV3GetVulnerabilityParametersAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityParameters> localVarResponse = await VulnerabilitiesV3GetVulnerabilityParametersAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability parameters 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityParameters)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityParameters>> VulnerabilitiesV3GetVulnerabilityParametersAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityParameters");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityParameters");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityParameters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityParameters) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityParameters)));
        }

        /// <summary>
        /// Returns the vulnerability recommendations 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityRecommendations</returns>
        public VulnerabilityRecommendations VulnerabilitiesV3GetVulnerabilityRecommendations (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityRecommendations> localVarResponse = VulnerabilitiesV3GetVulnerabilityRecommendationsWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability recommendations 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityRecommendations</returns>
        public ApiResponse< VulnerabilityRecommendations > VulnerabilitiesV3GetVulnerabilityRecommendationsWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRecommendations");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRecommendations");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/recommendations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityRecommendations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityRecommendations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityRecommendations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityRecommendations)));
        }

        /// <summary>
        /// Returns the vulnerability recommendations 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityRecommendations</returns>
        public async System.Threading.Tasks.Task<VulnerabilityRecommendations> VulnerabilitiesV3GetVulnerabilityRecommendationsAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityRecommendations> localVarResponse = await VulnerabilitiesV3GetVulnerabilityRecommendationsAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability recommendations 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityRecommendations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityRecommendations>> VulnerabilitiesV3GetVulnerabilityRecommendationsAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRecommendations");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRecommendations");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/recommendations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityRecommendations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityRecommendations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityRecommendations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityRecommendations)));
        }

        /// <summary>
        /// Returns the vulnerability request and response 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityRequestResponse</returns>
        public VulnerabilityRequestResponse VulnerabilitiesV3GetVulnerabilityRequestResponse (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityRequestResponse> localVarResponse = VulnerabilitiesV3GetVulnerabilityRequestResponseWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability request and response 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityRequestResponse</returns>
        public ApiResponse< VulnerabilityRequestResponse > VulnerabilitiesV3GetVulnerabilityRequestResponseWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRequestResponse");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRequestResponse");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/request-response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityRequestResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityRequestResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityRequestResponse)));
        }

        /// <summary>
        /// Returns the vulnerability request and response 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityRequestResponse</returns>
        public async System.Threading.Tasks.Task<VulnerabilityRequestResponse> VulnerabilitiesV3GetVulnerabilityRequestResponseAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityRequestResponse> localVarResponse = await VulnerabilitiesV3GetVulnerabilityRequestResponseAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability request and response 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityRequestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityRequestResponse>> VulnerabilitiesV3GetVulnerabilityRequestResponseAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRequestResponse");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityRequestResponse");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/request-response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityRequestResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityRequestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityRequestResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityRequestResponse)));
        }

        /// <summary>
        /// Returns the vulnerability screenshots 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityScreenshot</returns>
        public VulnerabilityScreenshot VulnerabilitiesV3GetVulnerabilityScreenshots (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityScreenshot> localVarResponse = VulnerabilitiesV3GetVulnerabilityScreenshotsWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability screenshots 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityScreenshot</returns>
        public ApiResponse< VulnerabilityScreenshot > VulnerabilitiesV3GetVulnerabilityScreenshotsWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityScreenshots");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityScreenshots");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityScreenshot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityScreenshot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityScreenshot)));
        }

        /// <summary>
        /// Returns the vulnerability screenshots 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityScreenshot</returns>
        public async System.Threading.Tasks.Task<VulnerabilityScreenshot> VulnerabilitiesV3GetVulnerabilityScreenshotsAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityScreenshot> localVarResponse = await VulnerabilitiesV3GetVulnerabilityScreenshotsAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability screenshots 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityScreenshot)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityScreenshot>> VulnerabilitiesV3GetVulnerabilityScreenshotsAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityScreenshots");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityScreenshots");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/screenshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityScreenshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityScreenshot>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityScreenshot) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityScreenshot)));
        }

        /// <summary>
        /// Returns the vulnerability summary 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilitySummary</returns>
        public VulnerabilitySummary VulnerabilitiesV3GetVulnerabilitySummary (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilitySummary> localVarResponse = VulnerabilitiesV3GetVulnerabilitySummaryWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability summary 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilitySummary</returns>
        public ApiResponse< VulnerabilitySummary > VulnerabilitiesV3GetVulnerabilitySummaryWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilitySummary");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilitySummary");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilitySummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilitySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilitySummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilitySummary)));
        }

        /// <summary>
        /// Returns the vulnerability summary 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilitySummary</returns>
        public async System.Threading.Tasks.Task<VulnerabilitySummary> VulnerabilitiesV3GetVulnerabilitySummaryAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilitySummary> localVarResponse = await VulnerabilitiesV3GetVulnerabilitySummaryAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability summary 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilitySummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilitySummary>> VulnerabilitiesV3GetVulnerabilitySummaryAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilitySummary");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilitySummary");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilitySummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilitySummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilitySummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilitySummary)));
        }

        /// <summary>
        /// Returns the trace code for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>VulnerabilityTraceCode</returns>
        public VulnerabilityTraceCode VulnerabilitiesV3GetVulnerabilityTraceCode (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
             ApiResponse<VulnerabilityTraceCode> localVarResponse = VulnerabilitiesV3GetVulnerabilityTraceCodeWithHttpInfo(releaseId, vulnId, traceIndex, traceEntryIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the trace code for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>ApiResponse of VulnerabilityTraceCode</returns>
        public ApiResponse< VulnerabilityTraceCode > VulnerabilitiesV3GetVulnerabilityTraceCodeWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'traceIndex' is set
            if (traceIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'traceEntryIndex' is set
            if (traceEntryIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceEntryIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces/{traceIndex}/{traceEntryIndex}/code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (traceIndex != null) localVarPathParams.Add("traceIndex", Configuration.ApiClient.ParameterToString(traceIndex)); // path parameter
            if (traceEntryIndex != null) localVarPathParams.Add("traceEntryIndex", Configuration.ApiClient.ParameterToString(traceEntryIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraceCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTraceCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTraceCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTraceCode)));
        }

        /// <summary>
        /// Returns the trace code for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of VulnerabilityTraceCode</returns>
        public async System.Threading.Tasks.Task<VulnerabilityTraceCode> VulnerabilitiesV3GetVulnerabilityTraceCodeAsync (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
             ApiResponse<VulnerabilityTraceCode> localVarResponse = await VulnerabilitiesV3GetVulnerabilityTraceCodeAsyncWithHttpInfo(releaseId, vulnId, traceIndex, traceEntryIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the trace code for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of ApiResponse (VulnerabilityTraceCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityTraceCode>> VulnerabilitiesV3GetVulnerabilityTraceCodeAsyncWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'traceIndex' is set
            if (traceIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");
            // verify the required parameter 'traceEntryIndex' is set
            if (traceEntryIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceEntryIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceCode");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces/{traceIndex}/{traceEntryIndex}/code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (traceIndex != null) localVarPathParams.Add("traceIndex", Configuration.ApiClient.ParameterToString(traceIndex)); // path parameter
            if (traceEntryIndex != null) localVarPathParams.Add("traceEntryIndex", Configuration.ApiClient.ParameterToString(traceEntryIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraceCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTraceCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTraceCode) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTraceCode)));
        }

        /// <summary>
        /// Returns the trace snippet for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>VulnerabilityTraceCodeSnippet</returns>
        public VulnerabilityTraceCodeSnippet VulnerabilitiesV3GetVulnerabilityTraceSnippet (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
             ApiResponse<VulnerabilityTraceCodeSnippet> localVarResponse = VulnerabilitiesV3GetVulnerabilityTraceSnippetWithHttpInfo(releaseId, vulnId, traceIndex, traceEntryIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the trace snippet for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>ApiResponse of VulnerabilityTraceCodeSnippet</returns>
        public ApiResponse< VulnerabilityTraceCodeSnippet > VulnerabilitiesV3GetVulnerabilityTraceSnippetWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'traceIndex' is set
            if (traceIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'traceEntryIndex' is set
            if (traceEntryIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceEntryIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces/{traceIndex}/{traceEntryIndex}/snippet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (traceIndex != null) localVarPathParams.Add("traceIndex", Configuration.ApiClient.ParameterToString(traceIndex)); // path parameter
            if (traceEntryIndex != null) localVarPathParams.Add("traceEntryIndex", Configuration.ApiClient.ParameterToString(traceEntryIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraceSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTraceCodeSnippet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTraceCodeSnippet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTraceCodeSnippet)));
        }

        /// <summary>
        /// Returns the trace snippet for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of VulnerabilityTraceCodeSnippet</returns>
        public async System.Threading.Tasks.Task<VulnerabilityTraceCodeSnippet> VulnerabilitiesV3GetVulnerabilityTraceSnippetAsync (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
             ApiResponse<VulnerabilityTraceCodeSnippet> localVarResponse = await VulnerabilitiesV3GetVulnerabilityTraceSnippetAsyncWithHttpInfo(releaseId, vulnId, traceIndex, traceEntryIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the trace snippet for the specific index 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <param name="traceIndex">The trace index</param>
        /// <param name="traceEntryIndex">The trace entry index</param>
        /// <returns>Task of ApiResponse (VulnerabilityTraceCodeSnippet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityTraceCodeSnippet>> VulnerabilitiesV3GetVulnerabilityTraceSnippetAsyncWithHttpInfo (int? releaseId, string vulnId, int? traceIndex, int? traceEntryIndex)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'traceIndex' is set
            if (traceIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");
            // verify the required parameter 'traceEntryIndex' is set
            if (traceEntryIndex == null)
                throw new ApiException(400, "Missing required parameter 'traceEntryIndex' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraceSnippet");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces/{traceIndex}/{traceEntryIndex}/snippet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter
            if (traceIndex != null) localVarPathParams.Add("traceIndex", Configuration.ApiClient.ParameterToString(traceIndex)); // path parameter
            if (traceEntryIndex != null) localVarPathParams.Add("traceEntryIndex", Configuration.ApiClient.ParameterToString(traceEntryIndex)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraceSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTraceCodeSnippet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTraceCodeSnippet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTraceCodeSnippet)));
        }

        /// <summary>
        /// Returns the vulnerability traces 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>VulnerabilityTrace</returns>
        public VulnerabilityTrace VulnerabilitiesV3GetVulnerabilityTraces (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityTrace> localVarResponse = VulnerabilitiesV3GetVulnerabilityTracesWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the vulnerability traces 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>ApiResponse of VulnerabilityTrace</returns>
        public ApiResponse< VulnerabilityTrace > VulnerabilitiesV3GetVulnerabilityTracesWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraces");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraces");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTrace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTrace)));
        }

        /// <summary>
        /// Returns the vulnerability traces 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of VulnerabilityTrace</returns>
        public async System.Threading.Tasks.Task<VulnerabilityTrace> VulnerabilitiesV3GetVulnerabilityTracesAsync (int? releaseId, string vulnId)
        {
             ApiResponse<VulnerabilityTrace> localVarResponse = await VulnerabilitiesV3GetVulnerabilityTracesAsyncWithHttpInfo(releaseId, vulnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the vulnerability traces 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="vulnId">The vulnerability id</param>
        /// <returns>Task of ApiResponse (VulnerabilityTrace)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VulnerabilityTrace>> VulnerabilitiesV3GetVulnerabilityTracesAsyncWithHttpInfo (int? releaseId, string vulnId)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraces");
            // verify the required parameter 'vulnId' is set
            if (vulnId == null)
                throw new ApiException(400, "Missing required parameter 'vulnId' when calling VulnerabilitiesApi->VulnerabilitiesV3GetVulnerabilityTraces");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/{vulnId}/traces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (vulnId != null) localVarPathParams.Add("vulnId", Configuration.ApiClient.ParameterToString(vulnId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3GetVulnerabilityTraces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VulnerabilityTrace>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VulnerabilityTrace) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VulnerabilityTrace)));
        }

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns></returns>
        public void VulnerabilitiesV3PostVulnerabilityBugLink (int? releaseId, PostVulnerabilityBugLinkRequest requestModel)
        {
             VulnerabilitiesV3PostVulnerabilityBugLinkWithHttpInfo(releaseId, requestModel);
        }

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VulnerabilitiesV3PostVulnerabilityBugLinkWithHttpInfo (int? releaseId, PostVulnerabilityBugLinkRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityBugLink");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityBugLink");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/bug-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3PostVulnerabilityBugLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VulnerabilitiesV3PostVulnerabilityBugLinkAsync (int? releaseId, PostVulnerabilityBugLinkRequest requestModel)
        {
             await VulnerabilitiesV3PostVulnerabilityBugLinkAsyncWithHttpInfo(releaseId, requestModel);

        }

        /// <summary>
        /// Saves bug tracker url for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBugLinkRequest model</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VulnerabilitiesV3PostVulnerabilityBugLinkAsyncWithHttpInfo (int? releaseId, PostVulnerabilityBugLinkRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityBugLink");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityBugLink");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/bug-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3PostVulnerabilityBugLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Saves audit data for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>PostVulnerabilityBulkEditResponse</returns>
        public PostVulnerabilityBulkEditResponse VulnerabilitiesV3PostVulnerabilityEdit (int? releaseId, PostVulnerabilityBulkEditRequest requestModel)
        {
             ApiResponse<PostVulnerabilityBulkEditResponse> localVarResponse = VulnerabilitiesV3PostVulnerabilityEditWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves audit data for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>ApiResponse of PostVulnerabilityBulkEditResponse</returns>
        public ApiResponse< PostVulnerabilityBulkEditResponse > VulnerabilitiesV3PostVulnerabilityEditWithHttpInfo (int? releaseId, PostVulnerabilityBulkEditRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityEdit");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityEdit");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/bulk-edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3PostVulnerabilityEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostVulnerabilityBulkEditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostVulnerabilityBulkEditResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostVulnerabilityBulkEditResponse)));
        }

        /// <summary>
        /// Saves audit data for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>Task of PostVulnerabilityBulkEditResponse</returns>
        public async System.Threading.Tasks.Task<PostVulnerabilityBulkEditResponse> VulnerabilitiesV3PostVulnerabilityEditAsync (int? releaseId, PostVulnerabilityBulkEditRequest requestModel)
        {
             ApiResponse<PostVulnerabilityBulkEditResponse> localVarResponse = await VulnerabilitiesV3PostVulnerabilityEditAsyncWithHttpInfo(releaseId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves audit data for the vulnerabilities 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="releaseId">The release id</param>
        /// <param name="requestModel">PostVulnerabilityBulkEditRequest model</param>
        /// <returns>Task of ApiResponse (PostVulnerabilityBulkEditResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostVulnerabilityBulkEditResponse>> VulnerabilitiesV3PostVulnerabilityEditAsyncWithHttpInfo (int? releaseId, PostVulnerabilityBulkEditRequest requestModel)
        {
            // verify the required parameter 'releaseId' is set
            if (releaseId == null)
                throw new ApiException(400, "Missing required parameter 'releaseId' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityEdit");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling VulnerabilitiesApi->VulnerabilitiesV3PostVulnerabilityEdit");

            var localVarPath = "/api/v3/releases/{releaseId}/vulnerabilities/bulk-edit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (releaseId != null) localVarPathParams.Add("releaseId", Configuration.ApiClient.ParameterToString(releaseId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VulnerabilitiesV3PostVulnerabilityEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostVulnerabilityBulkEditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostVulnerabilityBulkEditResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostVulnerabilityBulkEditResponse)));
        }

    }
}
