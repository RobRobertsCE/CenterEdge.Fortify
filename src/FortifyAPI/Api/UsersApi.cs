/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FortifyAPI.Client;
using FortifyAPI.Model;

namespace FortifyAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>DeleteUserResponse</returns>
        DeleteUserResponse UsersV3DeleteUser (int? userId);

        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>ApiResponse of DeleteUserResponse</returns>
        ApiResponse<DeleteUserResponse> UsersV3DeleteUserWithHttpInfo (int? userId);
        /// <summary>
        /// Get a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>User</returns>
        User UsersV3GetUser (int? userId);

        /// <summary>
        /// Get a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersV3GetUserWithHttpInfo (int? userId);
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>UserListResponse</returns>
        UserListResponse UsersV3GetUsers (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of UserListResponse</returns>
        ApiResponse<UserListResponse> UsersV3GetUsersWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>PostUserResponse</returns>
        PostUserResponse UsersV3PostUser (PostUserRequest requestModel);

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>ApiResponse of PostUserResponse</returns>
        ApiResponse<PostUserResponse> UsersV3PostUserWithHttpInfo (PostUserRequest requestModel);
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>PutUserResponse</returns>
        PutUserResponse UsersV3PutUser (int? userId, PutUserRequest requestModel);

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>ApiResponse of PutUserResponse</returns>
        ApiResponse<PutUserResponse> UsersV3PutUserWithHttpInfo (int? userId, PutUserRequest requestModel);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of DeleteUserResponse</returns>
        System.Threading.Tasks.Task<DeleteUserResponse> UsersV3DeleteUserAsync (int? userId);

        /// <summary>
        /// Delete a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of ApiResponse (DeleteUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteUserResponse>> UsersV3DeleteUserAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Get a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersV3GetUserAsync (int? userId);

        /// <summary>
        /// Get a specific user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersV3GetUserAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of UserListResponse</returns>
        System.Threading.Tasks.Task<UserListResponse> UsersV3GetUsersAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (UserListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserListResponse>> UsersV3GetUsersAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null);
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>Task of PostUserResponse</returns>
        System.Threading.Tasks.Task<PostUserResponse> UsersV3PostUserAsync (PostUserRequest requestModel);

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>Task of ApiResponse (PostUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostUserResponse>> UsersV3PostUserAsyncWithHttpInfo (PostUserRequest requestModel);
        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>Task of PutUserResponse</returns>
        System.Threading.Tasks.Task<PutUserResponse> UsersV3PutUserAsync (int? userId, PutUserRequest requestModel);

        /// <summary>
        /// Update an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>Task of ApiResponse (PutUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutUserResponse>> UsersV3PutUserAsyncWithHttpInfo (int? userId, PutUserRequest requestModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private FortifyAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = FortifyAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FortifyAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>DeleteUserResponse</returns>
        public DeleteUserResponse UsersV3DeleteUser (int? userId)
        {
             ApiResponse<DeleteUserResponse> localVarResponse = UsersV3DeleteUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>ApiResponse of DeleteUserResponse</returns>
        public ApiResponse< DeleteUserResponse > UsersV3DeleteUserWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3DeleteUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteUserResponse)));
        }

        /// <summary>
        /// Delete a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of DeleteUserResponse</returns>
        public async System.Threading.Tasks.Task<DeleteUserResponse> UsersV3DeleteUserAsync (int? userId)
        {
             ApiResponse<DeleteUserResponse> localVarResponse = await UsersV3DeleteUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of ApiResponse (DeleteUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteUserResponse>> UsersV3DeleteUserAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3DeleteUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteUserResponse)));
        }

        /// <summary>
        /// Get a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>User</returns>
        public User UsersV3GetUser (int? userId)
        {
             ApiResponse<User> localVarResponse = UsersV3GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersV3GetUserWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3GetUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersV3GetUserAsync (int? userId)
        {
             ApiResponse<User> localVarResponse = await UsersV3GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersV3GetUserAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3GetUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>UserListResponse</returns>
        public UserListResponse UsersV3GetUsers (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UserListResponse> localVarResponse = UsersV3GetUsersWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>ApiResponse of UserListResponse</returns>
        public ApiResponse< UserListResponse > UsersV3GetUsersWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserListResponse)));
        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of UserListResponse</returns>
        public async System.Threading.Tasks.Task<UserListResponse> UsersV3GetUsersAsync (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {
             ApiResponse<UserListResponse> localVarResponse = await UsersV3GetUsersAsyncWithHttpInfo(filters, orderBy, orderByDirection, fields, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of users 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filters">&lt;p&gt;A delimited list of field filters.&lt;/p&gt;  &lt;p&gt;Field name and value should be separated by a colon (:).&lt;/p&gt;  &lt;p&gt;Multiple fields should be separated by a plus (+). Multiple fields are treated as an AND condition. Example, fieldname1:value+fieldname2:value&lt;/p&gt;  &lt;p&gt;Multiple values for a field should be separated by a pipe (|). Mulitple values for a field are treated as an OR condition. Example, fieldname1:value1|value2&lt;/p&gt; (optional)</param>
        /// <param name="orderBy">The field name to order the results by. (optional)</param>
        /// <param name="orderByDirection">The direction to order the results by. ASC and DESC are valid values. (optional)</param>
        /// <param name="fields">Comma separated list of fields to return. (optional)</param>
        /// <param name="offset">Offset of the starting record. 0 indicates the first record. (optional)</param>
        /// <param name="limit">Maximum records to return. The maximum value allowed is 50. (optional)</param>
        /// <returns>Task of ApiResponse (UserListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserListResponse>> UsersV3GetUsersAsyncWithHttpInfo (string filters = null, string orderBy = null, string orderByDirection = null, string fields = null, int? offset = null, int? limit = null)
        {

            var localVarPath = "/api/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filters != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filters", filters)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (orderByDirection != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "orderByDirection", orderByDirection)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserListResponse)));
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>PostUserResponse</returns>
        public PostUserResponse UsersV3PostUser (PostUserRequest requestModel)
        {
             ApiResponse<PostUserResponse> localVarResponse = UsersV3PostUserWithHttpInfo(requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>ApiResponse of PostUserResponse</returns>
        public ApiResponse< PostUserResponse > UsersV3PostUserWithHttpInfo (PostUserRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->UsersV3PostUser");

            var localVarPath = "/api/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3PostUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostUserResponse)));
        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>Task of PostUserResponse</returns>
        public async System.Threading.Tasks.Task<PostUserResponse> UsersV3PostUserAsync (PostUserRequest requestModel)
        {
             ApiResponse<PostUserResponse> localVarResponse = await UsersV3PostUserAsyncWithHttpInfo(requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestModel">PostUserRequest model</param>
        /// <returns>Task of ApiResponse (PostUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostUserResponse>> UsersV3PostUserAsyncWithHttpInfo (PostUserRequest requestModel)
        {
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->UsersV3PostUser");

            var localVarPath = "/api/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3PostUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostUserResponse)));
        }

        /// <summary>
        /// Update an existing user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>PutUserResponse</returns>
        public PutUserResponse UsersV3PutUser (int? userId, PutUserRequest requestModel)
        {
             ApiResponse<PutUserResponse> localVarResponse = UsersV3PutUserWithHttpInfo(userId, requestModel);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>ApiResponse of PutUserResponse</returns>
        public ApiResponse< PutUserResponse > UsersV3PutUserWithHttpInfo (int? userId, PutUserRequest requestModel)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3PutUser");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->UsersV3PutUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3PutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutUserResponse)));
        }

        /// <summary>
        /// Update an existing user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>Task of PutUserResponse</returns>
        public async System.Threading.Tasks.Task<PutUserResponse> UsersV3PutUserAsync (int? userId, PutUserRequest requestModel)
        {
             ApiResponse<PutUserResponse> localVarResponse = await UsersV3PutUserAsyncWithHttpInfo(userId, requestModel);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing user 
        /// </summary>
        /// <exception cref="FortifyAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="requestModel">PutUserRequest model</param>
        /// <returns>Task of ApiResponse (PutUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PutUserResponse>> UsersV3PutUserAsyncWithHttpInfo (int? userId, PutUserRequest requestModel)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersV3PutUser");
            // verify the required parameter 'requestModel' is set
            if (requestModel == null)
                throw new ApiException(400, "Missing required parameter 'requestModel' when calling UsersApi->UsersV3PutUser");

            var localVarPath = "/api/v3/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (requestModel != null && requestModel.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(requestModel); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestModel; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersV3PutUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PutUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PutUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PutUserResponse)));
        }

    }
}
