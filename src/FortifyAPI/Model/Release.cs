/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Release
    /// </summary>
    [DataContract]
    public partial class Release :  IEquatable<Release>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Release" /> class.
        /// </summary>
        /// <param name="ReleaseId">Release identifier.</param>
        /// <param name="ReleaseName">Name of the release.</param>
        /// <param name="ReleaseDescription">Description of the release.</param>
        /// <param name="ReleaseCreatedDate">The date the release was created.</param>
        /// <param name="MicroserviceName">Name of the microservice.</param>
        /// <param name="ApplicationId">Application id.</param>
        /// <param name="ApplicationName">Name of the application.</param>
        /// <param name="CurrentAnalysisStatusTypeId">Current ananlysis status type id.</param>
        /// <param name="CurrentAnalysisStatusType">Current ananlysis status type.</param>
        /// <param name="Rating">The current star rating (1-5).</param>
        /// <param name="Critical">Number of critical vulnerabilities.</param>
        /// <param name="High">Number of high vulnerabilities.</param>
        /// <param name="Medium">Number of medium vulnerabilities.</param>
        /// <param name="Low">Number of low vulnerabilities.</param>
        /// <param name="CurrentStaticScanId">Current static scan identifier.</param>
        /// <param name="CurrentDynamicScanId">Current dynamic scan identifier.</param>
        /// <param name="CurrentMobileScanId">Current Mobile Scan Id.</param>
        /// <param name="StaticAnalysisStatusType">Current status of the static scan on this release (null if no static scan).</param>
        /// <param name="DynamicAnalysisStatusType">Current status of the dynamic scan on this release (null if no dynamic scan).</param>
        /// <param name="MobileAnalysisStatusType">Current status of the mobile scan on this release (null if no mobile scan).</param>
        /// <param name="StaticAnalysisStatusTypeId">Current status of the static scan as a numberic identifier.</param>
        /// <param name="DynamicAnalysisStatusTypeId">Current status of the dynamic scan as a numberic identifier.</param>
        /// <param name="MobileAnalysisStatusTypeId">Current status of the mobile scan as a numberic identifier.</param>
        /// <param name="StaticScanDate">Static scan completed date.</param>
        /// <param name="DynamicScanDate">Dynamic scan completed date.</param>
        /// <param name="MobileScanDate">Mobile scan completed date.</param>
        /// <param name="IssueCount">Total number of issues.</param>
        /// <param name="IsPassed">Pass/Failed status.</param>
        /// <param name="PassFailReasonTypeId">Reason for the scan pass/fail id.</param>
        /// <param name="PassFailReasonType">Reason for the scan pass/fail.</param>
        /// <param name="SdlcStatusTypeId">SDLC Status Type Id.</param>
        /// <param name="SdlcStatusType">SDLC Status Type.</param>
        public Release(int? ReleaseId = default(int?), string ReleaseName = default(string), string ReleaseDescription = default(string), DateTime? ReleaseCreatedDate = default(DateTime?), string MicroserviceName = default(string), int? ApplicationId = default(int?), string ApplicationName = default(string), int? CurrentAnalysisStatusTypeId = default(int?), string CurrentAnalysisStatusType = default(string), int? Rating = default(int?), int? Critical = default(int?), int? High = default(int?), int? Medium = default(int?), int? Low = default(int?), int? CurrentStaticScanId = default(int?), int? CurrentDynamicScanId = default(int?), int? CurrentMobileScanId = default(int?), string StaticAnalysisStatusType = default(string), string DynamicAnalysisStatusType = default(string), string MobileAnalysisStatusType = default(string), int? StaticAnalysisStatusTypeId = default(int?), int? DynamicAnalysisStatusTypeId = default(int?), int? MobileAnalysisStatusTypeId = default(int?), DateTime? StaticScanDate = default(DateTime?), DateTime? DynamicScanDate = default(DateTime?), DateTime? MobileScanDate = default(DateTime?), int? IssueCount = default(int?), bool? IsPassed = default(bool?), int? PassFailReasonTypeId = default(int?), string PassFailReasonType = default(string), int? SdlcStatusTypeId = default(int?), string SdlcStatusType = default(string))
        {
            this.ReleaseId = ReleaseId;
            this.ReleaseName = ReleaseName;
            this.ReleaseDescription = ReleaseDescription;
            this.ReleaseCreatedDate = ReleaseCreatedDate;
            this.MicroserviceName = MicroserviceName;
            this.ApplicationId = ApplicationId;
            this.ApplicationName = ApplicationName;
            this.CurrentAnalysisStatusTypeId = CurrentAnalysisStatusTypeId;
            this.CurrentAnalysisStatusType = CurrentAnalysisStatusType;
            this.Rating = Rating;
            this.Critical = Critical;
            this.High = High;
            this.Medium = Medium;
            this.Low = Low;
            this.CurrentStaticScanId = CurrentStaticScanId;
            this.CurrentDynamicScanId = CurrentDynamicScanId;
            this.CurrentMobileScanId = CurrentMobileScanId;
            this.StaticAnalysisStatusType = StaticAnalysisStatusType;
            this.DynamicAnalysisStatusType = DynamicAnalysisStatusType;
            this.MobileAnalysisStatusType = MobileAnalysisStatusType;
            this.StaticAnalysisStatusTypeId = StaticAnalysisStatusTypeId;
            this.DynamicAnalysisStatusTypeId = DynamicAnalysisStatusTypeId;
            this.MobileAnalysisStatusTypeId = MobileAnalysisStatusTypeId;
            this.StaticScanDate = StaticScanDate;
            this.DynamicScanDate = DynamicScanDate;
            this.MobileScanDate = MobileScanDate;
            this.IssueCount = IssueCount;
            this.IsPassed = IsPassed;
            this.PassFailReasonTypeId = PassFailReasonTypeId;
            this.PassFailReasonType = PassFailReasonType;
            this.SdlcStatusTypeId = SdlcStatusTypeId;
            this.SdlcStatusType = SdlcStatusType;
        }
        
        /// <summary>
        /// Release identifier
        /// </summary>
        /// <value>Release identifier</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Name of the release
        /// </summary>
        /// <value>Name of the release</value>
        [DataMember(Name="releaseName", EmitDefaultValue=false)]
        public string ReleaseName { get; set; }

        /// <summary>
        /// Description of the release
        /// </summary>
        /// <value>Description of the release</value>
        [DataMember(Name="releaseDescription", EmitDefaultValue=false)]
        public string ReleaseDescription { get; set; }

        /// <summary>
        /// The date the release was created
        /// </summary>
        /// <value>The date the release was created</value>
        [DataMember(Name="releaseCreatedDate", EmitDefaultValue=false)]
        public DateTime? ReleaseCreatedDate { get; set; }

        /// <summary>
        /// Name of the microservice
        /// </summary>
        /// <value>Name of the microservice</value>
        [DataMember(Name="microserviceName", EmitDefaultValue=false)]
        public string MicroserviceName { get; set; }

        /// <summary>
        /// Application id
        /// </summary>
        /// <value>Application id</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int? ApplicationId { get; set; }

        /// <summary>
        /// Name of the application
        /// </summary>
        /// <value>Name of the application</value>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Current ananlysis status type id
        /// </summary>
        /// <value>Current ananlysis status type id</value>
        [DataMember(Name="currentAnalysisStatusTypeId", EmitDefaultValue=false)]
        public int? CurrentAnalysisStatusTypeId { get; set; }

        /// <summary>
        /// Current ananlysis status type
        /// </summary>
        /// <value>Current ananlysis status type</value>
        [DataMember(Name="currentAnalysisStatusType", EmitDefaultValue=false)]
        public string CurrentAnalysisStatusType { get; set; }

        /// <summary>
        /// The current star rating (1-5)
        /// </summary>
        /// <value>The current star rating (1-5)</value>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }

        /// <summary>
        /// Number of critical vulnerabilities
        /// </summary>
        /// <value>Number of critical vulnerabilities</value>
        [DataMember(Name="critical", EmitDefaultValue=false)]
        public int? Critical { get; set; }

        /// <summary>
        /// Number of high vulnerabilities
        /// </summary>
        /// <value>Number of high vulnerabilities</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public int? High { get; set; }

        /// <summary>
        /// Number of medium vulnerabilities
        /// </summary>
        /// <value>Number of medium vulnerabilities</value>
        [DataMember(Name="medium", EmitDefaultValue=false)]
        public int? Medium { get; set; }

        /// <summary>
        /// Number of low vulnerabilities
        /// </summary>
        /// <value>Number of low vulnerabilities</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public int? Low { get; set; }

        /// <summary>
        /// Current static scan identifier
        /// </summary>
        /// <value>Current static scan identifier</value>
        [DataMember(Name="currentStaticScanId", EmitDefaultValue=false)]
        public int? CurrentStaticScanId { get; set; }

        /// <summary>
        /// Current dynamic scan identifier
        /// </summary>
        /// <value>Current dynamic scan identifier</value>
        [DataMember(Name="currentDynamicScanId", EmitDefaultValue=false)]
        public int? CurrentDynamicScanId { get; set; }

        /// <summary>
        /// Current Mobile Scan Id
        /// </summary>
        /// <value>Current Mobile Scan Id</value>
        [DataMember(Name="currentMobileScanId", EmitDefaultValue=false)]
        public int? CurrentMobileScanId { get; set; }

        /// <summary>
        /// Current status of the static scan on this release (null if no static scan)
        /// </summary>
        /// <value>Current status of the static scan on this release (null if no static scan)</value>
        [DataMember(Name="staticAnalysisStatusType", EmitDefaultValue=false)]
        public string StaticAnalysisStatusType { get; set; }

        /// <summary>
        /// Current status of the dynamic scan on this release (null if no dynamic scan)
        /// </summary>
        /// <value>Current status of the dynamic scan on this release (null if no dynamic scan)</value>
        [DataMember(Name="dynamicAnalysisStatusType", EmitDefaultValue=false)]
        public string DynamicAnalysisStatusType { get; set; }

        /// <summary>
        /// Current status of the mobile scan on this release (null if no mobile scan)
        /// </summary>
        /// <value>Current status of the mobile scan on this release (null if no mobile scan)</value>
        [DataMember(Name="mobileAnalysisStatusType", EmitDefaultValue=false)]
        public string MobileAnalysisStatusType { get; set; }

        /// <summary>
        /// Current status of the static scan as a numberic identifier
        /// </summary>
        /// <value>Current status of the static scan as a numberic identifier</value>
        [DataMember(Name="staticAnalysisStatusTypeId", EmitDefaultValue=false)]
        public int? StaticAnalysisStatusTypeId { get; set; }

        /// <summary>
        /// Current status of the dynamic scan as a numberic identifier
        /// </summary>
        /// <value>Current status of the dynamic scan as a numberic identifier</value>
        [DataMember(Name="dynamicAnalysisStatusTypeId", EmitDefaultValue=false)]
        public int? DynamicAnalysisStatusTypeId { get; set; }

        /// <summary>
        /// Current status of the mobile scan as a numberic identifier
        /// </summary>
        /// <value>Current status of the mobile scan as a numberic identifier</value>
        [DataMember(Name="mobileAnalysisStatusTypeId", EmitDefaultValue=false)]
        public int? MobileAnalysisStatusTypeId { get; set; }

        /// <summary>
        /// Static scan completed date
        /// </summary>
        /// <value>Static scan completed date</value>
        [DataMember(Name="staticScanDate", EmitDefaultValue=false)]
        public DateTime? StaticScanDate { get; set; }

        /// <summary>
        /// Dynamic scan completed date
        /// </summary>
        /// <value>Dynamic scan completed date</value>
        [DataMember(Name="dynamicScanDate", EmitDefaultValue=false)]
        public DateTime? DynamicScanDate { get; set; }

        /// <summary>
        /// Mobile scan completed date
        /// </summary>
        /// <value>Mobile scan completed date</value>
        [DataMember(Name="mobileScanDate", EmitDefaultValue=false)]
        public DateTime? MobileScanDate { get; set; }

        /// <summary>
        /// Total number of issues
        /// </summary>
        /// <value>Total number of issues</value>
        [DataMember(Name="issueCount", EmitDefaultValue=false)]
        public int? IssueCount { get; set; }

        /// <summary>
        /// Pass/Failed status
        /// </summary>
        /// <value>Pass/Failed status</value>
        [DataMember(Name="isPassed", EmitDefaultValue=false)]
        public bool? IsPassed { get; set; }

        /// <summary>
        /// Reason for the scan pass/fail id
        /// </summary>
        /// <value>Reason for the scan pass/fail id</value>
        [DataMember(Name="passFailReasonTypeId", EmitDefaultValue=false)]
        public int? PassFailReasonTypeId { get; set; }

        /// <summary>
        /// Reason for the scan pass/fail
        /// </summary>
        /// <value>Reason for the scan pass/fail</value>
        [DataMember(Name="passFailReasonType", EmitDefaultValue=false)]
        public string PassFailReasonType { get; set; }

        /// <summary>
        /// SDLC Status Type Id
        /// </summary>
        /// <value>SDLC Status Type Id</value>
        [DataMember(Name="sdlcStatusTypeId", EmitDefaultValue=false)]
        public int? SdlcStatusTypeId { get; set; }

        /// <summary>
        /// SDLC Status Type
        /// </summary>
        /// <value>SDLC Status Type</value>
        [DataMember(Name="sdlcStatusType", EmitDefaultValue=false)]
        public string SdlcStatusType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Release {\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  ReleaseName: ").Append(ReleaseName).Append("\n");
            sb.Append("  ReleaseDescription: ").Append(ReleaseDescription).Append("\n");
            sb.Append("  ReleaseCreatedDate: ").Append(ReleaseCreatedDate).Append("\n");
            sb.Append("  MicroserviceName: ").Append(MicroserviceName).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CurrentAnalysisStatusTypeId: ").Append(CurrentAnalysisStatusTypeId).Append("\n");
            sb.Append("  CurrentAnalysisStatusType: ").Append(CurrentAnalysisStatusType).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Critical: ").Append(Critical).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  CurrentStaticScanId: ").Append(CurrentStaticScanId).Append("\n");
            sb.Append("  CurrentDynamicScanId: ").Append(CurrentDynamicScanId).Append("\n");
            sb.Append("  CurrentMobileScanId: ").Append(CurrentMobileScanId).Append("\n");
            sb.Append("  StaticAnalysisStatusType: ").Append(StaticAnalysisStatusType).Append("\n");
            sb.Append("  DynamicAnalysisStatusType: ").Append(DynamicAnalysisStatusType).Append("\n");
            sb.Append("  MobileAnalysisStatusType: ").Append(MobileAnalysisStatusType).Append("\n");
            sb.Append("  StaticAnalysisStatusTypeId: ").Append(StaticAnalysisStatusTypeId).Append("\n");
            sb.Append("  DynamicAnalysisStatusTypeId: ").Append(DynamicAnalysisStatusTypeId).Append("\n");
            sb.Append("  MobileAnalysisStatusTypeId: ").Append(MobileAnalysisStatusTypeId).Append("\n");
            sb.Append("  StaticScanDate: ").Append(StaticScanDate).Append("\n");
            sb.Append("  DynamicScanDate: ").Append(DynamicScanDate).Append("\n");
            sb.Append("  MobileScanDate: ").Append(MobileScanDate).Append("\n");
            sb.Append("  IssueCount: ").Append(IssueCount).Append("\n");
            sb.Append("  IsPassed: ").Append(IsPassed).Append("\n");
            sb.Append("  PassFailReasonTypeId: ").Append(PassFailReasonTypeId).Append("\n");
            sb.Append("  PassFailReasonType: ").Append(PassFailReasonType).Append("\n");
            sb.Append("  SdlcStatusTypeId: ").Append(SdlcStatusTypeId).Append("\n");
            sb.Append("  SdlcStatusType: ").Append(SdlcStatusType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Release);
        }

        /// <summary>
        /// Returns true if Release instances are equal
        /// </summary>
        /// <param name="input">Instance of Release to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Release input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.ReleaseName == input.ReleaseName ||
                    (this.ReleaseName != null &&
                    this.ReleaseName.Equals(input.ReleaseName))
                ) && 
                (
                    this.ReleaseDescription == input.ReleaseDescription ||
                    (this.ReleaseDescription != null &&
                    this.ReleaseDescription.Equals(input.ReleaseDescription))
                ) && 
                (
                    this.ReleaseCreatedDate == input.ReleaseCreatedDate ||
                    (this.ReleaseCreatedDate != null &&
                    this.ReleaseCreatedDate.Equals(input.ReleaseCreatedDate))
                ) && 
                (
                    this.MicroserviceName == input.MicroserviceName ||
                    (this.MicroserviceName != null &&
                    this.MicroserviceName.Equals(input.MicroserviceName))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CurrentAnalysisStatusTypeId == input.CurrentAnalysisStatusTypeId ||
                    (this.CurrentAnalysisStatusTypeId != null &&
                    this.CurrentAnalysisStatusTypeId.Equals(input.CurrentAnalysisStatusTypeId))
                ) && 
                (
                    this.CurrentAnalysisStatusType == input.CurrentAnalysisStatusType ||
                    (this.CurrentAnalysisStatusType != null &&
                    this.CurrentAnalysisStatusType.Equals(input.CurrentAnalysisStatusType))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.Critical == input.Critical ||
                    (this.Critical != null &&
                    this.Critical.Equals(input.Critical))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Medium == input.Medium ||
                    (this.Medium != null &&
                    this.Medium.Equals(input.Medium))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.CurrentStaticScanId == input.CurrentStaticScanId ||
                    (this.CurrentStaticScanId != null &&
                    this.CurrentStaticScanId.Equals(input.CurrentStaticScanId))
                ) && 
                (
                    this.CurrentDynamicScanId == input.CurrentDynamicScanId ||
                    (this.CurrentDynamicScanId != null &&
                    this.CurrentDynamicScanId.Equals(input.CurrentDynamicScanId))
                ) && 
                (
                    this.CurrentMobileScanId == input.CurrentMobileScanId ||
                    (this.CurrentMobileScanId != null &&
                    this.CurrentMobileScanId.Equals(input.CurrentMobileScanId))
                ) && 
                (
                    this.StaticAnalysisStatusType == input.StaticAnalysisStatusType ||
                    (this.StaticAnalysisStatusType != null &&
                    this.StaticAnalysisStatusType.Equals(input.StaticAnalysisStatusType))
                ) && 
                (
                    this.DynamicAnalysisStatusType == input.DynamicAnalysisStatusType ||
                    (this.DynamicAnalysisStatusType != null &&
                    this.DynamicAnalysisStatusType.Equals(input.DynamicAnalysisStatusType))
                ) && 
                (
                    this.MobileAnalysisStatusType == input.MobileAnalysisStatusType ||
                    (this.MobileAnalysisStatusType != null &&
                    this.MobileAnalysisStatusType.Equals(input.MobileAnalysisStatusType))
                ) && 
                (
                    this.StaticAnalysisStatusTypeId == input.StaticAnalysisStatusTypeId ||
                    (this.StaticAnalysisStatusTypeId != null &&
                    this.StaticAnalysisStatusTypeId.Equals(input.StaticAnalysisStatusTypeId))
                ) && 
                (
                    this.DynamicAnalysisStatusTypeId == input.DynamicAnalysisStatusTypeId ||
                    (this.DynamicAnalysisStatusTypeId != null &&
                    this.DynamicAnalysisStatusTypeId.Equals(input.DynamicAnalysisStatusTypeId))
                ) && 
                (
                    this.MobileAnalysisStatusTypeId == input.MobileAnalysisStatusTypeId ||
                    (this.MobileAnalysisStatusTypeId != null &&
                    this.MobileAnalysisStatusTypeId.Equals(input.MobileAnalysisStatusTypeId))
                ) && 
                (
                    this.StaticScanDate == input.StaticScanDate ||
                    (this.StaticScanDate != null &&
                    this.StaticScanDate.Equals(input.StaticScanDate))
                ) && 
                (
                    this.DynamicScanDate == input.DynamicScanDate ||
                    (this.DynamicScanDate != null &&
                    this.DynamicScanDate.Equals(input.DynamicScanDate))
                ) && 
                (
                    this.MobileScanDate == input.MobileScanDate ||
                    (this.MobileScanDate != null &&
                    this.MobileScanDate.Equals(input.MobileScanDate))
                ) && 
                (
                    this.IssueCount == input.IssueCount ||
                    (this.IssueCount != null &&
                    this.IssueCount.Equals(input.IssueCount))
                ) && 
                (
                    this.IsPassed == input.IsPassed ||
                    (this.IsPassed != null &&
                    this.IsPassed.Equals(input.IsPassed))
                ) && 
                (
                    this.PassFailReasonTypeId == input.PassFailReasonTypeId ||
                    (this.PassFailReasonTypeId != null &&
                    this.PassFailReasonTypeId.Equals(input.PassFailReasonTypeId))
                ) && 
                (
                    this.PassFailReasonType == input.PassFailReasonType ||
                    (this.PassFailReasonType != null &&
                    this.PassFailReasonType.Equals(input.PassFailReasonType))
                ) && 
                (
                    this.SdlcStatusTypeId == input.SdlcStatusTypeId ||
                    (this.SdlcStatusTypeId != null &&
                    this.SdlcStatusTypeId.Equals(input.SdlcStatusTypeId))
                ) && 
                (
                    this.SdlcStatusType == input.SdlcStatusType ||
                    (this.SdlcStatusType != null &&
                    this.SdlcStatusType.Equals(input.SdlcStatusType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.ReleaseName != null)
                    hashCode = hashCode * 59 + this.ReleaseName.GetHashCode();
                if (this.ReleaseDescription != null)
                    hashCode = hashCode * 59 + this.ReleaseDescription.GetHashCode();
                if (this.ReleaseCreatedDate != null)
                    hashCode = hashCode * 59 + this.ReleaseCreatedDate.GetHashCode();
                if (this.MicroserviceName != null)
                    hashCode = hashCode * 59 + this.MicroserviceName.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CurrentAnalysisStatusTypeId != null)
                    hashCode = hashCode * 59 + this.CurrentAnalysisStatusTypeId.GetHashCode();
                if (this.CurrentAnalysisStatusType != null)
                    hashCode = hashCode * 59 + this.CurrentAnalysisStatusType.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.Critical != null)
                    hashCode = hashCode * 59 + this.Critical.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Medium != null)
                    hashCode = hashCode * 59 + this.Medium.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.CurrentStaticScanId != null)
                    hashCode = hashCode * 59 + this.CurrentStaticScanId.GetHashCode();
                if (this.CurrentDynamicScanId != null)
                    hashCode = hashCode * 59 + this.CurrentDynamicScanId.GetHashCode();
                if (this.CurrentMobileScanId != null)
                    hashCode = hashCode * 59 + this.CurrentMobileScanId.GetHashCode();
                if (this.StaticAnalysisStatusType != null)
                    hashCode = hashCode * 59 + this.StaticAnalysisStatusType.GetHashCode();
                if (this.DynamicAnalysisStatusType != null)
                    hashCode = hashCode * 59 + this.DynamicAnalysisStatusType.GetHashCode();
                if (this.MobileAnalysisStatusType != null)
                    hashCode = hashCode * 59 + this.MobileAnalysisStatusType.GetHashCode();
                if (this.StaticAnalysisStatusTypeId != null)
                    hashCode = hashCode * 59 + this.StaticAnalysisStatusTypeId.GetHashCode();
                if (this.DynamicAnalysisStatusTypeId != null)
                    hashCode = hashCode * 59 + this.DynamicAnalysisStatusTypeId.GetHashCode();
                if (this.MobileAnalysisStatusTypeId != null)
                    hashCode = hashCode * 59 + this.MobileAnalysisStatusTypeId.GetHashCode();
                if (this.StaticScanDate != null)
                    hashCode = hashCode * 59 + this.StaticScanDate.GetHashCode();
                if (this.DynamicScanDate != null)
                    hashCode = hashCode * 59 + this.DynamicScanDate.GetHashCode();
                if (this.MobileScanDate != null)
                    hashCode = hashCode * 59 + this.MobileScanDate.GetHashCode();
                if (this.IssueCount != null)
                    hashCode = hashCode * 59 + this.IssueCount.GetHashCode();
                if (this.IsPassed != null)
                    hashCode = hashCode * 59 + this.IsPassed.GetHashCode();
                if (this.PassFailReasonTypeId != null)
                    hashCode = hashCode * 59 + this.PassFailReasonTypeId.GetHashCode();
                if (this.PassFailReasonType != null)
                    hashCode = hashCode * 59 + this.PassFailReasonType.GetHashCode();
                if (this.SdlcStatusTypeId != null)
                    hashCode = hashCode * 59 + this.SdlcStatusTypeId.GetHashCode();
                if (this.SdlcStatusType != null)
                    hashCode = hashCode * 59 + this.SdlcStatusType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
