/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// All data for the vulnerability
    /// </summary>
    [DataContract]
    public partial class VulnerabilityAllData :  IEquatable<VulnerabilityAllData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityAllData" /> class.
        /// </summary>
        /// <param name="Summary">The vulnerability summary.</param>
        /// <param name="Details">The vulnerability details.</param>
        /// <param name="Recommendations">The vulnerability recommendations.</param>
        /// <param name="Screenshots">List of vulnerability screenshots.</param>
        /// <param name="History">List of vulnerability history.</param>
        /// <param name="RequestResponse">The vulnerability request and response.</param>
        /// <param name="Headers">The vulnerability headers.</param>
        /// <param name="Parameters">The vulnerability parameters.</param>
        /// <param name="Traces">The vulnerability traces.</param>
        /// <param name="AuditOptions">The vulnerability audit options.</param>
        /// <param name="VulnId">The vulnerability id.</param>
        /// <param name="ReleaseId">The release id.</param>
        public VulnerabilityAllData(VulnerabilitySummary Summary = default(VulnerabilitySummary), VulnerabilityDetails Details = default(VulnerabilityDetails), VulnerabilityRecommendations Recommendations = default(VulnerabilityRecommendations), List<VulnerabilityScreenshotItem> Screenshots = default(List<VulnerabilityScreenshotItem>), List<VulnerabilityHistoryItem> History = default(List<VulnerabilityHistoryItem>), VulnerabilityRequestResponse RequestResponse = default(VulnerabilityRequestResponse), VulnerabilityHeaders Headers = default(VulnerabilityHeaders), VulnerabilityParameters Parameters = default(VulnerabilityParameters), List<VulnerabilityTraceItem> Traces = default(List<VulnerabilityTraceItem>), VulnerabilityAuditOptions AuditOptions = default(VulnerabilityAuditOptions), string VulnId = default(string), int? ReleaseId = default(int?))
        {
            this.Summary = Summary;
            this.Details = Details;
            this.Recommendations = Recommendations;
            this.Screenshots = Screenshots;
            this.History = History;
            this.RequestResponse = RequestResponse;
            this.Headers = Headers;
            this.Parameters = Parameters;
            this.Traces = Traces;
            this.AuditOptions = AuditOptions;
            this.VulnId = VulnId;
            this.ReleaseId = ReleaseId;
        }
        
        /// <summary>
        /// The vulnerability summary
        /// </summary>
        /// <value>The vulnerability summary</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public VulnerabilitySummary Summary { get; set; }

        /// <summary>
        /// The vulnerability details
        /// </summary>
        /// <value>The vulnerability details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public VulnerabilityDetails Details { get; set; }

        /// <summary>
        /// The vulnerability recommendations
        /// </summary>
        /// <value>The vulnerability recommendations</value>
        [DataMember(Name="recommendations", EmitDefaultValue=false)]
        public VulnerabilityRecommendations Recommendations { get; set; }

        /// <summary>
        /// List of vulnerability screenshots
        /// </summary>
        /// <value>List of vulnerability screenshots</value>
        [DataMember(Name="screenshots", EmitDefaultValue=false)]
        public List<VulnerabilityScreenshotItem> Screenshots { get; set; }

        /// <summary>
        /// List of vulnerability history
        /// </summary>
        /// <value>List of vulnerability history</value>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public List<VulnerabilityHistoryItem> History { get; set; }

        /// <summary>
        /// The vulnerability request and response
        /// </summary>
        /// <value>The vulnerability request and response</value>
        [DataMember(Name="requestResponse", EmitDefaultValue=false)]
        public VulnerabilityRequestResponse RequestResponse { get; set; }

        /// <summary>
        /// The vulnerability headers
        /// </summary>
        /// <value>The vulnerability headers</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public VulnerabilityHeaders Headers { get; set; }

        /// <summary>
        /// The vulnerability parameters
        /// </summary>
        /// <value>The vulnerability parameters</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public VulnerabilityParameters Parameters { get; set; }

        /// <summary>
        /// The vulnerability traces
        /// </summary>
        /// <value>The vulnerability traces</value>
        [DataMember(Name="traces", EmitDefaultValue=false)]
        public List<VulnerabilityTraceItem> Traces { get; set; }

        /// <summary>
        /// The vulnerability audit options
        /// </summary>
        /// <value>The vulnerability audit options</value>
        [DataMember(Name="auditOptions", EmitDefaultValue=false)]
        public VulnerabilityAuditOptions AuditOptions { get; set; }

        /// <summary>
        /// The vulnerability id
        /// </summary>
        /// <value>The vulnerability id</value>
        [DataMember(Name="vulnId", EmitDefaultValue=false)]
        public string VulnId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityAllData {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  Screenshots: ").Append(Screenshots).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  RequestResponse: ").Append(RequestResponse).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Traces: ").Append(Traces).Append("\n");
            sb.Append("  AuditOptions: ").Append(AuditOptions).Append("\n");
            sb.Append("  VulnId: ").Append(VulnId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityAllData);
        }

        /// <summary>
        /// Returns true if VulnerabilityAllData instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityAllData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityAllData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Recommendations == input.Recommendations ||
                    (this.Recommendations != null &&
                    this.Recommendations.Equals(input.Recommendations))
                ) && 
                (
                    this.Screenshots == input.Screenshots ||
                    this.Screenshots != null &&
                    this.Screenshots.SequenceEqual(input.Screenshots)
                ) && 
                (
                    this.History == input.History ||
                    this.History != null &&
                    this.History.SequenceEqual(input.History)
                ) && 
                (
                    this.RequestResponse == input.RequestResponse ||
                    (this.RequestResponse != null &&
                    this.RequestResponse.Equals(input.RequestResponse))
                ) && 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Traces == input.Traces ||
                    this.Traces != null &&
                    this.Traces.SequenceEqual(input.Traces)
                ) && 
                (
                    this.AuditOptions == input.AuditOptions ||
                    (this.AuditOptions != null &&
                    this.AuditOptions.Equals(input.AuditOptions))
                ) && 
                (
                    this.VulnId == input.VulnId ||
                    (this.VulnId != null &&
                    this.VulnId.Equals(input.VulnId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Recommendations != null)
                    hashCode = hashCode * 59 + this.Recommendations.GetHashCode();
                if (this.Screenshots != null)
                    hashCode = hashCode * 59 + this.Screenshots.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                if (this.RequestResponse != null)
                    hashCode = hashCode * 59 + this.RequestResponse.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Traces != null)
                    hashCode = hashCode * 59 + this.Traces.GetHashCode();
                if (this.AuditOptions != null)
                    hashCode = hashCode * 59 + this.AuditOptions.GetHashCode();
                if (this.VulnId != null)
                    hashCode = hashCode * 59 + this.VulnId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
