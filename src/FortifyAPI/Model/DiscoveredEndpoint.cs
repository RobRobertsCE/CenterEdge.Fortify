/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Discovered Endpoint
    /// </summary>
    [DataContract]
    public partial class DiscoveredEndpoint :  IEquatable<DiscoveredEndpoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscoveredEndpoint" /> class.
        /// </summary>
        /// <param name="FindingId">FindingId.</param>
        /// <param name="HostName">Hostname.</param>
        /// <param name="Domain">Domain.</param>
        /// <param name="Url">URL.</param>
        /// <param name="IpAddress">IP Address.</param>
        /// <param name="Port">Port.</param>
        /// <param name="Scheme">URL Scheme.</param>
        /// <param name="StatusCode">Response status code.</param>
        /// <param name="PageTitle">Value of the &amp;lt;title&amp;gt; element of the discovered application.</param>
        /// <param name="HasPII">Indicates whether the discovered application captures PII data.</param>
        /// <param name="HasECommerce">Indicates whether the discovered application has eCommerce functionality.</param>
        /// <param name="HasAuthentication">Indicates whether the discovered application captures authentication data (login form).</param>
        /// <param name="Organization">Registrant organization.</param>
        /// <param name="ConfidenceId">Confidence Id.</param>
        /// <param name="Confidence">Confidence.</param>
        /// <param name="SuggestedBusinessCriticalityId">Suggested Business Criticality Id.</param>
        /// <param name="SuggestedBusinessCriticality">Suggested Business Criticality.</param>
        /// <param name="DiscoveredOn">Date the endpoint was discovered.</param>
        /// <param name="ContentTypeHeader">Content-Type header of the discovered application.</param>
        /// <param name="ServerHeader">Server header of the discovered application.</param>
        /// <param name="HasRedirects">Indicates whether the discovered application contains redirect chains.</param>
        public DiscoveredEndpoint(int? FindingId = default(int?), string HostName = default(string), string Domain = default(string), string Url = default(string), string IpAddress = default(string), int? Port = default(int?), string Scheme = default(string), int? StatusCode = default(int?), string PageTitle = default(string), bool? HasPII = default(bool?), bool? HasECommerce = default(bool?), bool? HasAuthentication = default(bool?), string Organization = default(string), int? ConfidenceId = default(int?), string Confidence = default(string), int? SuggestedBusinessCriticalityId = default(int?), string SuggestedBusinessCriticality = default(string), DateTime? DiscoveredOn = default(DateTime?), string ContentTypeHeader = default(string), string ServerHeader = default(string), bool? HasRedirects = default(bool?))
        {
            this.FindingId = FindingId;
            this.HostName = HostName;
            this.Domain = Domain;
            this.Url = Url;
            this.IpAddress = IpAddress;
            this.Port = Port;
            this.Scheme = Scheme;
            this.StatusCode = StatusCode;
            this.PageTitle = PageTitle;
            this.HasPII = HasPII;
            this.HasECommerce = HasECommerce;
            this.HasAuthentication = HasAuthentication;
            this.Organization = Organization;
            this.ConfidenceId = ConfidenceId;
            this.Confidence = Confidence;
            this.SuggestedBusinessCriticalityId = SuggestedBusinessCriticalityId;
            this.SuggestedBusinessCriticality = SuggestedBusinessCriticality;
            this.DiscoveredOn = DiscoveredOn;
            this.ContentTypeHeader = ContentTypeHeader;
            this.ServerHeader = ServerHeader;
            this.HasRedirects = HasRedirects;
        }
        
        /// <summary>
        /// Gets or Sets FindingId
        /// </summary>
        [DataMember(Name="findingId", EmitDefaultValue=false)]
        public int? FindingId { get; set; }

        /// <summary>
        /// Hostname
        /// </summary>
        /// <value>Hostname</value>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Domain
        /// </summary>
        /// <value>Domain</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// URL
        /// </summary>
        /// <value>URL</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// IP Address
        /// </summary>
        /// <value>IP Address</value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Port
        /// </summary>
        /// <value>Port</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// URL Scheme
        /// </summary>
        /// <value>URL Scheme</value>
        [DataMember(Name="scheme", EmitDefaultValue=false)]
        public string Scheme { get; set; }

        /// <summary>
        /// Response status code
        /// </summary>
        /// <value>Response status code</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Value of the &amp;lt;title&amp;gt; element of the discovered application
        /// </summary>
        /// <value>Value of the &amp;lt;title&amp;gt; element of the discovered application</value>
        [DataMember(Name="pageTitle", EmitDefaultValue=false)]
        public string PageTitle { get; set; }

        /// <summary>
        /// Indicates whether the discovered application captures PII data
        /// </summary>
        /// <value>Indicates whether the discovered application captures PII data</value>
        [DataMember(Name="hasPII", EmitDefaultValue=false)]
        public bool? HasPII { get; set; }

        /// <summary>
        /// Indicates whether the discovered application has eCommerce functionality
        /// </summary>
        /// <value>Indicates whether the discovered application has eCommerce functionality</value>
        [DataMember(Name="hasECommerce", EmitDefaultValue=false)]
        public bool? HasECommerce { get; set; }

        /// <summary>
        /// Indicates whether the discovered application captures authentication data (login form)
        /// </summary>
        /// <value>Indicates whether the discovered application captures authentication data (login form)</value>
        [DataMember(Name="hasAuthentication", EmitDefaultValue=false)]
        public bool? HasAuthentication { get; set; }

        /// <summary>
        /// Registrant organization
        /// </summary>
        /// <value>Registrant organization</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }

        /// <summary>
        /// Confidence Id
        /// </summary>
        /// <value>Confidence Id</value>
        [DataMember(Name="confidenceId", EmitDefaultValue=false)]
        public int? ConfidenceId { get; set; }

        /// <summary>
        /// Confidence
        /// </summary>
        /// <value>Confidence</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }

        /// <summary>
        /// Suggested Business Criticality Id
        /// </summary>
        /// <value>Suggested Business Criticality Id</value>
        [DataMember(Name="suggestedBusinessCriticalityId", EmitDefaultValue=false)]
        public int? SuggestedBusinessCriticalityId { get; set; }

        /// <summary>
        /// Suggested Business Criticality
        /// </summary>
        /// <value>Suggested Business Criticality</value>
        [DataMember(Name="suggestedBusinessCriticality", EmitDefaultValue=false)]
        public string SuggestedBusinessCriticality { get; set; }

        /// <summary>
        /// Date the endpoint was discovered
        /// </summary>
        /// <value>Date the endpoint was discovered</value>
        [DataMember(Name="discoveredOn", EmitDefaultValue=false)]
        public DateTime? DiscoveredOn { get; set; }

        /// <summary>
        /// Content-Type header of the discovered application
        /// </summary>
        /// <value>Content-Type header of the discovered application</value>
        [DataMember(Name="contentTypeHeader", EmitDefaultValue=false)]
        public string ContentTypeHeader { get; set; }

        /// <summary>
        /// Server header of the discovered application
        /// </summary>
        /// <value>Server header of the discovered application</value>
        [DataMember(Name="serverHeader", EmitDefaultValue=false)]
        public string ServerHeader { get; set; }

        /// <summary>
        /// Indicates whether the discovered application contains redirect chains
        /// </summary>
        /// <value>Indicates whether the discovered application contains redirect chains</value>
        [DataMember(Name="hasRedirects", EmitDefaultValue=false)]
        public bool? HasRedirects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredEndpoint {\n");
            sb.Append("  FindingId: ").Append(FindingId).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  PageTitle: ").Append(PageTitle).Append("\n");
            sb.Append("  HasPII: ").Append(HasPII).Append("\n");
            sb.Append("  HasECommerce: ").Append(HasECommerce).Append("\n");
            sb.Append("  HasAuthentication: ").Append(HasAuthentication).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  ConfidenceId: ").Append(ConfidenceId).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  SuggestedBusinessCriticalityId: ").Append(SuggestedBusinessCriticalityId).Append("\n");
            sb.Append("  SuggestedBusinessCriticality: ").Append(SuggestedBusinessCriticality).Append("\n");
            sb.Append("  DiscoveredOn: ").Append(DiscoveredOn).Append("\n");
            sb.Append("  ContentTypeHeader: ").Append(ContentTypeHeader).Append("\n");
            sb.Append("  ServerHeader: ").Append(ServerHeader).Append("\n");
            sb.Append("  HasRedirects: ").Append(HasRedirects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscoveredEndpoint);
        }

        /// <summary>
        /// Returns true if DiscoveredEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscoveredEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredEndpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FindingId == input.FindingId ||
                    (this.FindingId != null &&
                    this.FindingId.Equals(input.FindingId))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Scheme == input.Scheme ||
                    (this.Scheme != null &&
                    this.Scheme.Equals(input.Scheme))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.PageTitle == input.PageTitle ||
                    (this.PageTitle != null &&
                    this.PageTitle.Equals(input.PageTitle))
                ) && 
                (
                    this.HasPII == input.HasPII ||
                    (this.HasPII != null &&
                    this.HasPII.Equals(input.HasPII))
                ) && 
                (
                    this.HasECommerce == input.HasECommerce ||
                    (this.HasECommerce != null &&
                    this.HasECommerce.Equals(input.HasECommerce))
                ) && 
                (
                    this.HasAuthentication == input.HasAuthentication ||
                    (this.HasAuthentication != null &&
                    this.HasAuthentication.Equals(input.HasAuthentication))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.ConfidenceId == input.ConfidenceId ||
                    (this.ConfidenceId != null &&
                    this.ConfidenceId.Equals(input.ConfidenceId))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.SuggestedBusinessCriticalityId == input.SuggestedBusinessCriticalityId ||
                    (this.SuggestedBusinessCriticalityId != null &&
                    this.SuggestedBusinessCriticalityId.Equals(input.SuggestedBusinessCriticalityId))
                ) && 
                (
                    this.SuggestedBusinessCriticality == input.SuggestedBusinessCriticality ||
                    (this.SuggestedBusinessCriticality != null &&
                    this.SuggestedBusinessCriticality.Equals(input.SuggestedBusinessCriticality))
                ) && 
                (
                    this.DiscoveredOn == input.DiscoveredOn ||
                    (this.DiscoveredOn != null &&
                    this.DiscoveredOn.Equals(input.DiscoveredOn))
                ) && 
                (
                    this.ContentTypeHeader == input.ContentTypeHeader ||
                    (this.ContentTypeHeader != null &&
                    this.ContentTypeHeader.Equals(input.ContentTypeHeader))
                ) && 
                (
                    this.ServerHeader == input.ServerHeader ||
                    (this.ServerHeader != null &&
                    this.ServerHeader.Equals(input.ServerHeader))
                ) && 
                (
                    this.HasRedirects == input.HasRedirects ||
                    (this.HasRedirects != null &&
                    this.HasRedirects.Equals(input.HasRedirects))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FindingId != null)
                    hashCode = hashCode * 59 + this.FindingId.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Scheme != null)
                    hashCode = hashCode * 59 + this.Scheme.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.PageTitle != null)
                    hashCode = hashCode * 59 + this.PageTitle.GetHashCode();
                if (this.HasPII != null)
                    hashCode = hashCode * 59 + this.HasPII.GetHashCode();
                if (this.HasECommerce != null)
                    hashCode = hashCode * 59 + this.HasECommerce.GetHashCode();
                if (this.HasAuthentication != null)
                    hashCode = hashCode * 59 + this.HasAuthentication.GetHashCode();
                if (this.Organization != null)
                    hashCode = hashCode * 59 + this.Organization.GetHashCode();
                if (this.ConfidenceId != null)
                    hashCode = hashCode * 59 + this.ConfidenceId.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.SuggestedBusinessCriticalityId != null)
                    hashCode = hashCode * 59 + this.SuggestedBusinessCriticalityId.GetHashCode();
                if (this.SuggestedBusinessCriticality != null)
                    hashCode = hashCode * 59 + this.SuggestedBusinessCriticality.GetHashCode();
                if (this.DiscoveredOn != null)
                    hashCode = hashCode * 59 + this.DiscoveredOn.GetHashCode();
                if (this.ContentTypeHeader != null)
                    hashCode = hashCode * 59 + this.ContentTypeHeader.GetHashCode();
                if (this.ServerHeader != null)
                    hashCode = hashCode * 59 + this.ServerHeader.GetHashCode();
                if (this.HasRedirects != null)
                    hashCode = hashCode * 59 + this.HasRedirects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
