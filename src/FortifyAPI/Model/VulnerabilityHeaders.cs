/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability Headers
    /// </summary>
    [DataContract]
    public partial class VulnerabilityHeaders :  IEquatable<VulnerabilityHeaders>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityHeaders" /> class.
        /// </summary>
        /// <param name="RequestHeaders">The request headers.</param>
        /// <param name="ResponseHeaders">The response headers.</param>
        /// <param name="VulnId">The vulnerability id.</param>
        /// <param name="ReleaseId">The release id.</param>
        public VulnerabilityHeaders(List<VulnerabilityHeader> RequestHeaders = default(List<VulnerabilityHeader>), List<VulnerabilityHeader> ResponseHeaders = default(List<VulnerabilityHeader>), string VulnId = default(string), int? ReleaseId = default(int?))
        {
            this.RequestHeaders = RequestHeaders;
            this.ResponseHeaders = ResponseHeaders;
            this.VulnId = VulnId;
            this.ReleaseId = ReleaseId;
        }
        
        /// <summary>
        /// The request headers
        /// </summary>
        /// <value>The request headers</value>
        [DataMember(Name="requestHeaders", EmitDefaultValue=false)]
        public List<VulnerabilityHeader> RequestHeaders { get; set; }

        /// <summary>
        /// The response headers
        /// </summary>
        /// <value>The response headers</value>
        [DataMember(Name="responseHeaders", EmitDefaultValue=false)]
        public List<VulnerabilityHeader> ResponseHeaders { get; set; }

        /// <summary>
        /// The vulnerability id
        /// </summary>
        /// <value>The vulnerability id</value>
        [DataMember(Name="vulnId", EmitDefaultValue=false)]
        public string VulnId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityHeaders {\n");
            sb.Append("  RequestHeaders: ").Append(RequestHeaders).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  VulnId: ").Append(VulnId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityHeaders);
        }

        /// <summary>
        /// Returns true if VulnerabilityHeaders instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityHeaders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityHeaders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestHeaders == input.RequestHeaders ||
                    this.RequestHeaders != null &&
                    this.RequestHeaders.SequenceEqual(input.RequestHeaders)
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    this.ResponseHeaders != null &&
                    this.ResponseHeaders.SequenceEqual(input.ResponseHeaders)
                ) && 
                (
                    this.VulnId == input.VulnId ||
                    (this.VulnId != null &&
                    this.VulnId.Equals(input.VulnId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestHeaders != null)
                    hashCode = hashCode * 59 + this.RequestHeaders.GetHashCode();
                if (this.ResponseHeaders != null)
                    hashCode = hashCode * 59 + this.ResponseHeaders.GetHashCode();
                if (this.VulnId != null)
                    hashCode = hashCode * 59 + this.VulnId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
