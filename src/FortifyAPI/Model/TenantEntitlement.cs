/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Tenant entitlement
    /// </summary>
    [DataContract]
    public partial class TenantEntitlement :  IEquatable<TenantEntitlement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantEntitlement" /> class.
        /// </summary>
        /// <param name="EntitlementId">The entitlement id.</param>
        /// <param name="UnitsPurchased">The units purchased.</param>
        /// <param name="UnitsConsumed">The units consumed.</param>
        /// <param name="StartDate">The start date of the entitlement.</param>
        /// <param name="EndDate">The end date of the entitlement.</param>
        /// <param name="ExtendedProperties">Extended properties for the entitlement.</param>
        public TenantEntitlement(int? EntitlementId = default(int?), int? UnitsPurchased = default(int?), int? UnitsConsumed = default(int?), DateTime? StartDate = default(DateTime?), DateTime? EndDate = default(DateTime?), TenantEntitlementExtendedProperties ExtendedProperties = default(TenantEntitlementExtendedProperties))
        {
            this.EntitlementId = EntitlementId;
            this.UnitsPurchased = UnitsPurchased;
            this.UnitsConsumed = UnitsConsumed;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.ExtendedProperties = ExtendedProperties;
        }
        
        /// <summary>
        /// The entitlement id
        /// </summary>
        /// <value>The entitlement id</value>
        [DataMember(Name="entitlementId", EmitDefaultValue=false)]
        public int? EntitlementId { get; set; }

        /// <summary>
        /// The units purchased
        /// </summary>
        /// <value>The units purchased</value>
        [DataMember(Name="unitsPurchased", EmitDefaultValue=false)]
        public int? UnitsPurchased { get; set; }

        /// <summary>
        /// The units consumed
        /// </summary>
        /// <value>The units consumed</value>
        [DataMember(Name="unitsConsumed", EmitDefaultValue=false)]
        public int? UnitsConsumed { get; set; }

        /// <summary>
        /// The start date of the entitlement
        /// </summary>
        /// <value>The start date of the entitlement</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The end date of the entitlement
        /// </summary>
        /// <value>The end date of the entitlement</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Extended properties for the entitlement
        /// </summary>
        /// <value>Extended properties for the entitlement</value>
        [DataMember(Name="extendedProperties", EmitDefaultValue=false)]
        public TenantEntitlementExtendedProperties ExtendedProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantEntitlement {\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("  UnitsPurchased: ").Append(UnitsPurchased).Append("\n");
            sb.Append("  UnitsConsumed: ").Append(UnitsConsumed).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExtendedProperties: ").Append(ExtendedProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantEntitlement);
        }

        /// <summary>
        /// Returns true if TenantEntitlement instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantEntitlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantEntitlement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntitlementId == input.EntitlementId ||
                    (this.EntitlementId != null &&
                    this.EntitlementId.Equals(input.EntitlementId))
                ) && 
                (
                    this.UnitsPurchased == input.UnitsPurchased ||
                    (this.UnitsPurchased != null &&
                    this.UnitsPurchased.Equals(input.UnitsPurchased))
                ) && 
                (
                    this.UnitsConsumed == input.UnitsConsumed ||
                    (this.UnitsConsumed != null &&
                    this.UnitsConsumed.Equals(input.UnitsConsumed))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExtendedProperties == input.ExtendedProperties ||
                    (this.ExtendedProperties != null &&
                    this.ExtendedProperties.Equals(input.ExtendedProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitlementId != null)
                    hashCode = hashCode * 59 + this.EntitlementId.GetHashCode();
                if (this.UnitsPurchased != null)
                    hashCode = hashCode * 59 + this.UnitsPurchased.GetHashCode();
                if (this.UnitsConsumed != null)
                    hashCode = hashCode * 59 + this.UnitsConsumed.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExtendedProperties != null)
                    hashCode = hashCode * 59 + this.ExtendedProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
