/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Application User Permissions
    /// </summary>
    [DataContract]
    public partial class ApplicationUserPermissions :  IEquatable<ApplicationUserPermissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUserPermissions" /> class.
        /// </summary>
        /// <param name="StartDynamicScan">Indicates if the user can start a dynamic scan.</param>
        /// <param name="StartMobileScan">Indicates if the user can start a mobile scan.</param>
        /// <param name="StartStaticScan">Indicates if the user can start a static scan.</param>
        /// <param name="CreateRelease">Indicates if the user can create a release.</param>
        /// <param name="AuditIssues">Indicates if the user can audit issues.</param>
        /// <param name="ChallengeIssues">Indicates if the user can challenge issues.</param>
        /// <param name="EditIssues">Indicates if the user can edit issues.</param>
        /// <param name="DownloadFPR">Indicates if the user can download the FPR.</param>
        public ApplicationUserPermissions(bool? StartDynamicScan = default(bool?), bool? StartMobileScan = default(bool?), bool? StartStaticScan = default(bool?), bool? CreateRelease = default(bool?), bool? AuditIssues = default(bool?), bool? ChallengeIssues = default(bool?), bool? EditIssues = default(bool?), bool? DownloadFPR = default(bool?))
        {
            this.StartDynamicScan = StartDynamicScan;
            this.StartMobileScan = StartMobileScan;
            this.StartStaticScan = StartStaticScan;
            this.CreateRelease = CreateRelease;
            this.AuditIssues = AuditIssues;
            this.ChallengeIssues = ChallengeIssues;
            this.EditIssues = EditIssues;
            this.DownloadFPR = DownloadFPR;
        }
        
        /// <summary>
        /// Indicates if the user can start a dynamic scan
        /// </summary>
        /// <value>Indicates if the user can start a dynamic scan</value>
        [DataMember(Name="startDynamicScan", EmitDefaultValue=false)]
        public bool? StartDynamicScan { get; set; }

        /// <summary>
        /// Indicates if the user can start a mobile scan
        /// </summary>
        /// <value>Indicates if the user can start a mobile scan</value>
        [DataMember(Name="startMobileScan", EmitDefaultValue=false)]
        public bool? StartMobileScan { get; set; }

        /// <summary>
        /// Indicates if the user can start a static scan
        /// </summary>
        /// <value>Indicates if the user can start a static scan</value>
        [DataMember(Name="startStaticScan", EmitDefaultValue=false)]
        public bool? StartStaticScan { get; set; }

        /// <summary>
        /// Indicates if the user can create a release
        /// </summary>
        /// <value>Indicates if the user can create a release</value>
        [DataMember(Name="createRelease", EmitDefaultValue=false)]
        public bool? CreateRelease { get; set; }

        /// <summary>
        /// Indicates if the user can audit issues
        /// </summary>
        /// <value>Indicates if the user can audit issues</value>
        [DataMember(Name="auditIssues", EmitDefaultValue=false)]
        public bool? AuditIssues { get; set; }

        /// <summary>
        /// Indicates if the user can challenge issues
        /// </summary>
        /// <value>Indicates if the user can challenge issues</value>
        [DataMember(Name="challengeIssues", EmitDefaultValue=false)]
        public bool? ChallengeIssues { get; set; }

        /// <summary>
        /// Indicates if the user can edit issues
        /// </summary>
        /// <value>Indicates if the user can edit issues</value>
        [DataMember(Name="editIssues", EmitDefaultValue=false)]
        public bool? EditIssues { get; set; }

        /// <summary>
        /// Indicates if the user can download the FPR
        /// </summary>
        /// <value>Indicates if the user can download the FPR</value>
        [DataMember(Name="downloadFPR", EmitDefaultValue=false)]
        public bool? DownloadFPR { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationUserPermissions {\n");
            sb.Append("  StartDynamicScan: ").Append(StartDynamicScan).Append("\n");
            sb.Append("  StartMobileScan: ").Append(StartMobileScan).Append("\n");
            sb.Append("  StartStaticScan: ").Append(StartStaticScan).Append("\n");
            sb.Append("  CreateRelease: ").Append(CreateRelease).Append("\n");
            sb.Append("  AuditIssues: ").Append(AuditIssues).Append("\n");
            sb.Append("  ChallengeIssues: ").Append(ChallengeIssues).Append("\n");
            sb.Append("  EditIssues: ").Append(EditIssues).Append("\n");
            sb.Append("  DownloadFPR: ").Append(DownloadFPR).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUserPermissions);
        }

        /// <summary>
        /// Returns true if ApplicationUserPermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUserPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUserPermissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDynamicScan == input.StartDynamicScan ||
                    (this.StartDynamicScan != null &&
                    this.StartDynamicScan.Equals(input.StartDynamicScan))
                ) && 
                (
                    this.StartMobileScan == input.StartMobileScan ||
                    (this.StartMobileScan != null &&
                    this.StartMobileScan.Equals(input.StartMobileScan))
                ) && 
                (
                    this.StartStaticScan == input.StartStaticScan ||
                    (this.StartStaticScan != null &&
                    this.StartStaticScan.Equals(input.StartStaticScan))
                ) && 
                (
                    this.CreateRelease == input.CreateRelease ||
                    (this.CreateRelease != null &&
                    this.CreateRelease.Equals(input.CreateRelease))
                ) && 
                (
                    this.AuditIssues == input.AuditIssues ||
                    (this.AuditIssues != null &&
                    this.AuditIssues.Equals(input.AuditIssues))
                ) && 
                (
                    this.ChallengeIssues == input.ChallengeIssues ||
                    (this.ChallengeIssues != null &&
                    this.ChallengeIssues.Equals(input.ChallengeIssues))
                ) && 
                (
                    this.EditIssues == input.EditIssues ||
                    (this.EditIssues != null &&
                    this.EditIssues.Equals(input.EditIssues))
                ) && 
                (
                    this.DownloadFPR == input.DownloadFPR ||
                    (this.DownloadFPR != null &&
                    this.DownloadFPR.Equals(input.DownloadFPR))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDynamicScan != null)
                    hashCode = hashCode * 59 + this.StartDynamicScan.GetHashCode();
                if (this.StartMobileScan != null)
                    hashCode = hashCode * 59 + this.StartMobileScan.GetHashCode();
                if (this.StartStaticScan != null)
                    hashCode = hashCode * 59 + this.StartStaticScan.GetHashCode();
                if (this.CreateRelease != null)
                    hashCode = hashCode * 59 + this.CreateRelease.GetHashCode();
                if (this.AuditIssues != null)
                    hashCode = hashCode * 59 + this.AuditIssues.GetHashCode();
                if (this.ChallengeIssues != null)
                    hashCode = hashCode * 59 + this.ChallengeIssues.GetHashCode();
                if (this.EditIssues != null)
                    hashCode = hashCode * 59 + this.EditIssues.GetHashCode();
                if (this.DownloadFPR != null)
                    hashCode = hashCode * 59 + this.DownloadFPR.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
