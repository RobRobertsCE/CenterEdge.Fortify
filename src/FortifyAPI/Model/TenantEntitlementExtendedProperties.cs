/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Extended properties
    /// </summary>
    [DataContract]
    public partial class TenantEntitlementExtendedProperties :  IEquatable<TenantEntitlementExtendedProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantEntitlementExtendedProperties" /> class.
        /// </summary>
        /// <param name="AssessmentTypeId">The assessment type id.</param>
        /// <param name="FrequencyTypeId">The frequency type id.</param>
        /// <param name="FrequencyType">The frequency type.</param>
        /// <param name="SubscriptionLength">The subscription lenght.</param>
        public TenantEntitlementExtendedProperties(int? AssessmentTypeId = default(int?), int? FrequencyTypeId = default(int?), string FrequencyType = default(string), string SubscriptionLength = default(string))
        {
            this.AssessmentTypeId = AssessmentTypeId;
            this.FrequencyTypeId = FrequencyTypeId;
            this.FrequencyType = FrequencyType;
            this.SubscriptionLength = SubscriptionLength;
        }
        
        /// <summary>
        /// The assessment type id
        /// </summary>
        /// <value>The assessment type id</value>
        [DataMember(Name="assessmentTypeId", EmitDefaultValue=false)]
        public int? AssessmentTypeId { get; set; }

        /// <summary>
        /// The frequency type id
        /// </summary>
        /// <value>The frequency type id</value>
        [DataMember(Name="frequencyTypeId", EmitDefaultValue=false)]
        public int? FrequencyTypeId { get; set; }

        /// <summary>
        /// The frequency type
        /// </summary>
        /// <value>The frequency type</value>
        [DataMember(Name="frequencyType", EmitDefaultValue=false)]
        public string FrequencyType { get; set; }

        /// <summary>
        /// The subscription lenght
        /// </summary>
        /// <value>The subscription lenght</value>
        [DataMember(Name="subscriptionLength", EmitDefaultValue=false)]
        public string SubscriptionLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantEntitlementExtendedProperties {\n");
            sb.Append("  AssessmentTypeId: ").Append(AssessmentTypeId).Append("\n");
            sb.Append("  FrequencyTypeId: ").Append(FrequencyTypeId).Append("\n");
            sb.Append("  FrequencyType: ").Append(FrequencyType).Append("\n");
            sb.Append("  SubscriptionLength: ").Append(SubscriptionLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantEntitlementExtendedProperties);
        }

        /// <summary>
        /// Returns true if TenantEntitlementExtendedProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantEntitlementExtendedProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantEntitlementExtendedProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssessmentTypeId == input.AssessmentTypeId ||
                    (this.AssessmentTypeId != null &&
                    this.AssessmentTypeId.Equals(input.AssessmentTypeId))
                ) && 
                (
                    this.FrequencyTypeId == input.FrequencyTypeId ||
                    (this.FrequencyTypeId != null &&
                    this.FrequencyTypeId.Equals(input.FrequencyTypeId))
                ) && 
                (
                    this.FrequencyType == input.FrequencyType ||
                    (this.FrequencyType != null &&
                    this.FrequencyType.Equals(input.FrequencyType))
                ) && 
                (
                    this.SubscriptionLength == input.SubscriptionLength ||
                    (this.SubscriptionLength != null &&
                    this.SubscriptionLength.Equals(input.SubscriptionLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.AssessmentTypeId.GetHashCode();
                if (this.FrequencyTypeId != null)
                    hashCode = hashCode * 59 + this.FrequencyTypeId.GetHashCode();
                if (this.FrequencyType != null)
                    hashCode = hashCode * 59 + this.FrequencyType.GetHashCode();
                if (this.SubscriptionLength != null)
                    hashCode = hashCode * 59 + this.SubscriptionLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
