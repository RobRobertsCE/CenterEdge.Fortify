/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Get Tenant Response
    /// </summary>
    [DataContract]
    public partial class GetTenantResponse :  IEquatable<GetTenantResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTenantResponse" /> class.
        /// </summary>
        /// <param name="TenantName">The tenant name.</param>
        /// <param name="TenantCode">The tenant code.</param>
        /// <param name="TimeZone">The tenant timezone.</param>
        public GetTenantResponse(string TenantName = default(string), string TenantCode = default(string), string TimeZone = default(string))
        {
            this.TenantName = TenantName;
            this.TenantCode = TenantCode;
            this.TimeZone = TimeZone;
        }
        
        /// <summary>
        /// The tenant name
        /// </summary>
        /// <value>The tenant name</value>
        [DataMember(Name="tenantName", EmitDefaultValue=false)]
        public string TenantName { get; set; }

        /// <summary>
        /// The tenant code
        /// </summary>
        /// <value>The tenant code</value>
        [DataMember(Name="tenantCode", EmitDefaultValue=false)]
        public string TenantCode { get; set; }

        /// <summary>
        /// The tenant timezone
        /// </summary>
        /// <value>The tenant timezone</value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTenantResponse {\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("  TenantCode: ").Append(TenantCode).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTenantResponse);
        }

        /// <summary>
        /// Returns true if GetTenantResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTenantResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTenantResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                ) && 
                (
                    this.TenantCode == input.TenantCode ||
                    (this.TenantCode != null &&
                    this.TenantCode.Equals(input.TenantCode))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                if (this.TenantCode != null)
                    hashCode = hashCode * 59 + this.TenantCode.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
