/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Get Audit Options Response
    /// </summary>
    [DataContract]
    public partial class GetAuditOptionsResponse :  IEquatable<GetAuditOptionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAuditOptionsResponse" /> class.
        /// </summary>
        /// <param name="ReleaseId">The release id.</param>
        /// <param name="AuditProcessing">Indicates if an audit is current processing.</param>
        /// <param name="CanAudit">Indicates if the user can audit.</param>
        /// <param name="CanChallenge">Indicates if the user can challenge.</param>
        /// <param name="CanEdit">Indicates if the user can edit.</param>
        /// <param name="InAuditMode">Indicates if the release is in audit mode.</param>
        public GetAuditOptionsResponse(int? ReleaseId = default(int?), bool? AuditProcessing = default(bool?), bool? CanAudit = default(bool?), bool? CanChallenge = default(bool?), bool? CanEdit = default(bool?), bool? InAuditMode = default(bool?))
        {
            this.ReleaseId = ReleaseId;
            this.AuditProcessing = AuditProcessing;
            this.CanAudit = CanAudit;
            this.CanChallenge = CanChallenge;
            this.CanEdit = CanEdit;
            this.InAuditMode = InAuditMode;
        }
        
        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Indicates if an audit is current processing
        /// </summary>
        /// <value>Indicates if an audit is current processing</value>
        [DataMember(Name="auditProcessing", EmitDefaultValue=false)]
        public bool? AuditProcessing { get; set; }

        /// <summary>
        /// Indicates if the user can audit
        /// </summary>
        /// <value>Indicates if the user can audit</value>
        [DataMember(Name="canAudit", EmitDefaultValue=false)]
        public bool? CanAudit { get; set; }

        /// <summary>
        /// Indicates if the user can challenge
        /// </summary>
        /// <value>Indicates if the user can challenge</value>
        [DataMember(Name="canChallenge", EmitDefaultValue=false)]
        public bool? CanChallenge { get; set; }

        /// <summary>
        /// Indicates if the user can edit
        /// </summary>
        /// <value>Indicates if the user can edit</value>
        [DataMember(Name="canEdit", EmitDefaultValue=false)]
        public bool? CanEdit { get; set; }

        /// <summary>
        /// Indicates if the release is in audit mode
        /// </summary>
        /// <value>Indicates if the release is in audit mode</value>
        [DataMember(Name="inAuditMode", EmitDefaultValue=false)]
        public bool? InAuditMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAuditOptionsResponse {\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  AuditProcessing: ").Append(AuditProcessing).Append("\n");
            sb.Append("  CanAudit: ").Append(CanAudit).Append("\n");
            sb.Append("  CanChallenge: ").Append(CanChallenge).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  InAuditMode: ").Append(InAuditMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAuditOptionsResponse);
        }

        /// <summary>
        /// Returns true if GetAuditOptionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAuditOptionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAuditOptionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.AuditProcessing == input.AuditProcessing ||
                    (this.AuditProcessing != null &&
                    this.AuditProcessing.Equals(input.AuditProcessing))
                ) && 
                (
                    this.CanAudit == input.CanAudit ||
                    (this.CanAudit != null &&
                    this.CanAudit.Equals(input.CanAudit))
                ) && 
                (
                    this.CanChallenge == input.CanChallenge ||
                    (this.CanChallenge != null &&
                    this.CanChallenge.Equals(input.CanChallenge))
                ) && 
                (
                    this.CanEdit == input.CanEdit ||
                    (this.CanEdit != null &&
                    this.CanEdit.Equals(input.CanEdit))
                ) && 
                (
                    this.InAuditMode == input.InAuditMode ||
                    (this.InAuditMode != null &&
                    this.InAuditMode.Equals(input.InAuditMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.AuditProcessing != null)
                    hashCode = hashCode * 59 + this.AuditProcessing.GetHashCode();
                if (this.CanAudit != null)
                    hashCode = hashCode * 59 + this.CanAudit.GetHashCode();
                if (this.CanChallenge != null)
                    hashCode = hashCode * 59 + this.CanChallenge.GetHashCode();
                if (this.CanEdit != null)
                    hashCode = hashCode * 59 + this.CanEdit.GetHashCode();
                if (this.InAuditMode != null)
                    hashCode = hashCode * 59 + this.InAuditMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
