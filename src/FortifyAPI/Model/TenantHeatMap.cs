/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Tenant Heat Map
    /// </summary>
    [DataContract]
    public partial class TenantHeatMap :  IEquatable<TenantHeatMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantHeatMap" /> class.
        /// </summary>
        /// <param name="StarRating">Star rating of application.</param>
        /// <param name="BusinessCriticalityId">Business Criticality Id of application.</param>
        /// <param name="BusinessCriticality">Business Criticality of application.</param>
        /// <param name="ProjectCountText">The project count text.</param>
        /// <param name="Url">Url to the heat map.</param>
        public TenantHeatMap(int? StarRating = default(int?), int? BusinessCriticalityId = default(int?), string BusinessCriticality = default(string), string ProjectCountText = default(string), string Url = default(string))
        {
            this.StarRating = StarRating;
            this.BusinessCriticalityId = BusinessCriticalityId;
            this.BusinessCriticality = BusinessCriticality;
            this.ProjectCountText = ProjectCountText;
            this.Url = Url;
        }
        
        /// <summary>
        /// Star rating of application
        /// </summary>
        /// <value>Star rating of application</value>
        [DataMember(Name="starRating", EmitDefaultValue=false)]
        public int? StarRating { get; set; }

        /// <summary>
        /// Business Criticality Id of application
        /// </summary>
        /// <value>Business Criticality Id of application</value>
        [DataMember(Name="businessCriticalityId", EmitDefaultValue=false)]
        public int? BusinessCriticalityId { get; set; }

        /// <summary>
        /// Business Criticality of application
        /// </summary>
        /// <value>Business Criticality of application</value>
        [DataMember(Name="businessCriticality", EmitDefaultValue=false)]
        public string BusinessCriticality { get; set; }

        /// <summary>
        /// The project count text
        /// </summary>
        /// <value>The project count text</value>
        [DataMember(Name="projectCountText", EmitDefaultValue=false)]
        public string ProjectCountText { get; set; }

        /// <summary>
        /// Url to the heat map
        /// </summary>
        /// <value>Url to the heat map</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantHeatMap {\n");
            sb.Append("  StarRating: ").Append(StarRating).Append("\n");
            sb.Append("  BusinessCriticalityId: ").Append(BusinessCriticalityId).Append("\n");
            sb.Append("  BusinessCriticality: ").Append(BusinessCriticality).Append("\n");
            sb.Append("  ProjectCountText: ").Append(ProjectCountText).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantHeatMap);
        }

        /// <summary>
        /// Returns true if TenantHeatMap instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantHeatMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantHeatMap input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StarRating == input.StarRating ||
                    (this.StarRating != null &&
                    this.StarRating.Equals(input.StarRating))
                ) && 
                (
                    this.BusinessCriticalityId == input.BusinessCriticalityId ||
                    (this.BusinessCriticalityId != null &&
                    this.BusinessCriticalityId.Equals(input.BusinessCriticalityId))
                ) && 
                (
                    this.BusinessCriticality == input.BusinessCriticality ||
                    (this.BusinessCriticality != null &&
                    this.BusinessCriticality.Equals(input.BusinessCriticality))
                ) && 
                (
                    this.ProjectCountText == input.ProjectCountText ||
                    (this.ProjectCountText != null &&
                    this.ProjectCountText.Equals(input.ProjectCountText))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StarRating != null)
                    hashCode = hashCode * 59 + this.StarRating.GetHashCode();
                if (this.BusinessCriticalityId != null)
                    hashCode = hashCode * 59 + this.BusinessCriticalityId.GetHashCode();
                if (this.BusinessCriticality != null)
                    hashCode = hashCode * 59 + this.BusinessCriticality.GetHashCode();
                if (this.ProjectCountText != null)
                    hashCode = hashCode * 59 + this.ProjectCountText.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
