/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Tenant entitlements response
    /// </summary>
    [DataContract]
    public partial class GetTenantEntitlementResponse :  IEquatable<GetTenantEntitlementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTenantEntitlementResponse" /> class.
        /// </summary>
        /// <param name="EntitlementTypeId">The entitlement type id.</param>
        /// <param name="EntitlementType">The entitlement type.</param>
        /// <param name="SubscriptionTypeId">The subscription type id.</param>
        /// <param name="SubscriptionType">The subscription type.</param>
        /// <param name="TenantEntitlements">The list of tenant entitlements.</param>
        public GetTenantEntitlementResponse(int? EntitlementTypeId = default(int?), string EntitlementType = default(string), int? SubscriptionTypeId = default(int?), string SubscriptionType = default(string), List<TenantEntitlement> TenantEntitlements = default(List<TenantEntitlement>))
        {
            this.EntitlementTypeId = EntitlementTypeId;
            this.EntitlementType = EntitlementType;
            this.SubscriptionTypeId = SubscriptionTypeId;
            this.SubscriptionType = SubscriptionType;
            this.TenantEntitlements = TenantEntitlements;
        }
        
        /// <summary>
        /// The entitlement type id
        /// </summary>
        /// <value>The entitlement type id</value>
        [DataMember(Name="entitlementTypeId", EmitDefaultValue=false)]
        public int? EntitlementTypeId { get; set; }

        /// <summary>
        /// The entitlement type
        /// </summary>
        /// <value>The entitlement type</value>
        [DataMember(Name="entitlementType", EmitDefaultValue=false)]
        public string EntitlementType { get; set; }

        /// <summary>
        /// The subscription type id
        /// </summary>
        /// <value>The subscription type id</value>
        [DataMember(Name="subscriptionTypeId", EmitDefaultValue=false)]
        public int? SubscriptionTypeId { get; set; }

        /// <summary>
        /// The subscription type
        /// </summary>
        /// <value>The subscription type</value>
        [DataMember(Name="subscriptionType", EmitDefaultValue=false)]
        public string SubscriptionType { get; set; }

        /// <summary>
        /// The list of tenant entitlements
        /// </summary>
        /// <value>The list of tenant entitlements</value>
        [DataMember(Name="tenantEntitlements", EmitDefaultValue=false)]
        public List<TenantEntitlement> TenantEntitlements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTenantEntitlementResponse {\n");
            sb.Append("  EntitlementTypeId: ").Append(EntitlementTypeId).Append("\n");
            sb.Append("  EntitlementType: ").Append(EntitlementType).Append("\n");
            sb.Append("  SubscriptionTypeId: ").Append(SubscriptionTypeId).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("  TenantEntitlements: ").Append(TenantEntitlements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTenantEntitlementResponse);
        }

        /// <summary>
        /// Returns true if GetTenantEntitlementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTenantEntitlementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTenantEntitlementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntitlementTypeId == input.EntitlementTypeId ||
                    (this.EntitlementTypeId != null &&
                    this.EntitlementTypeId.Equals(input.EntitlementTypeId))
                ) && 
                (
                    this.EntitlementType == input.EntitlementType ||
                    (this.EntitlementType != null &&
                    this.EntitlementType.Equals(input.EntitlementType))
                ) && 
                (
                    this.SubscriptionTypeId == input.SubscriptionTypeId ||
                    (this.SubscriptionTypeId != null &&
                    this.SubscriptionTypeId.Equals(input.SubscriptionTypeId))
                ) && 
                (
                    this.SubscriptionType == input.SubscriptionType ||
                    (this.SubscriptionType != null &&
                    this.SubscriptionType.Equals(input.SubscriptionType))
                ) && 
                (
                    this.TenantEntitlements == input.TenantEntitlements ||
                    this.TenantEntitlements != null &&
                    this.TenantEntitlements.SequenceEqual(input.TenantEntitlements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntitlementTypeId != null)
                    hashCode = hashCode * 59 + this.EntitlementTypeId.GetHashCode();
                if (this.EntitlementType != null)
                    hashCode = hashCode * 59 + this.EntitlementType.GetHashCode();
                if (this.SubscriptionTypeId != null)
                    hashCode = hashCode * 59 + this.SubscriptionTypeId.GetHashCode();
                if (this.SubscriptionType != null)
                    hashCode = hashCode * 59 + this.SubscriptionType.GetHashCode();
                if (this.TenantEntitlements != null)
                    hashCode = hashCode * 59 + this.TenantEntitlements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
