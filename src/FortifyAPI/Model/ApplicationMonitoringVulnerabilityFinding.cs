/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Application Monitoring Vulnerability
    /// </summary>
    [DataContract]
    public partial class ApplicationMonitoringVulnerabilityFinding :  IEquatable<ApplicationMonitoringVulnerabilityFinding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationMonitoringVulnerabilityFinding" /> class.
        /// </summary>
        /// <param name="FindingId">Finding Id.</param>
        /// <param name="SeverityId">Severity Id.</param>
        /// <param name="Severity">Severity of the vulnerability.</param>
        /// <param name="CategoryName">Category Name.</param>
        /// <param name="Location">Location of the vulnerability.</param>
        /// <param name="Suppressed">Indicates whether the vulnerability is suppressed.</param>
        /// <param name="StatusId">Status Id.</param>
        /// <param name="Status">Status of the vulnerability.</param>
        public ApplicationMonitoringVulnerabilityFinding(int? FindingId = default(int?), int? SeverityId = default(int?), string Severity = default(string), string CategoryName = default(string), string Location = default(string), bool? Suppressed = default(bool?), int? StatusId = default(int?), string Status = default(string))
        {
            this.FindingId = FindingId;
            this.SeverityId = SeverityId;
            this.Severity = Severity;
            this.CategoryName = CategoryName;
            this.Location = Location;
            this.Suppressed = Suppressed;
            this.StatusId = StatusId;
            this.Status = Status;
        }
        
        /// <summary>
        /// Finding Id
        /// </summary>
        /// <value>Finding Id</value>
        [DataMember(Name="findingId", EmitDefaultValue=false)]
        public int? FindingId { get; set; }

        /// <summary>
        /// Severity Id
        /// </summary>
        /// <value>Severity Id</value>
        [DataMember(Name="severityId", EmitDefaultValue=false)]
        public int? SeverityId { get; set; }

        /// <summary>
        /// Severity of the vulnerability
        /// </summary>
        /// <value>Severity of the vulnerability</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// Category Name
        /// </summary>
        /// <value>Category Name</value>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Location of the vulnerability
        /// </summary>
        /// <value>Location of the vulnerability</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Indicates whether the vulnerability is suppressed
        /// </summary>
        /// <value>Indicates whether the vulnerability is suppressed</value>
        [DataMember(Name="suppressed", EmitDefaultValue=false)]
        public bool? Suppressed { get; set; }

        /// <summary>
        /// Status Id
        /// </summary>
        /// <value>Status Id</value>
        [DataMember(Name="statusId", EmitDefaultValue=false)]
        public int? StatusId { get; set; }

        /// <summary>
        /// Status of the vulnerability
        /// </summary>
        /// <value>Status of the vulnerability</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationMonitoringVulnerabilityFinding {\n");
            sb.Append("  FindingId: ").Append(FindingId).Append("\n");
            sb.Append("  SeverityId: ").Append(SeverityId).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationMonitoringVulnerabilityFinding);
        }

        /// <summary>
        /// Returns true if ApplicationMonitoringVulnerabilityFinding instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationMonitoringVulnerabilityFinding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationMonitoringVulnerabilityFinding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FindingId == input.FindingId ||
                    (this.FindingId != null &&
                    this.FindingId.Equals(input.FindingId))
                ) && 
                (
                    this.SeverityId == input.SeverityId ||
                    (this.SeverityId != null &&
                    this.SeverityId.Equals(input.SeverityId))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Suppressed == input.Suppressed ||
                    (this.Suppressed != null &&
                    this.Suppressed.Equals(input.Suppressed))
                ) && 
                (
                    this.StatusId == input.StatusId ||
                    (this.StatusId != null &&
                    this.StatusId.Equals(input.StatusId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FindingId != null)
                    hashCode = hashCode * 59 + this.FindingId.GetHashCode();
                if (this.SeverityId != null)
                    hashCode = hashCode * 59 + this.SeverityId.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Suppressed != null)
                    hashCode = hashCode * 59 + this.Suppressed.GetHashCode();
                if (this.StatusId != null)
                    hashCode = hashCode * 59 + this.StatusId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
