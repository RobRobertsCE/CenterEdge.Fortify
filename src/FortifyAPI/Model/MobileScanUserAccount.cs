/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Mobile Scan User Account
    /// </summary>
    [DataContract]
    public partial class MobileScanUserAccount :  IEquatable<MobileScanUserAccount>, IValidatableObject
    {
        /// <summary>
        /// The role type
        /// </summary>
        /// <value>The role type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleTypeEnum
        {
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,
            
            /// <summary>
            /// Enum Guest for value: Guest
            /// </summary>
            [EnumMember(Value = "Guest")]
            Guest = 2,
            
            /// <summary>
            /// Enum Admin for value: Admin
            /// </summary>
            [EnumMember(Value = "Admin")]
            Admin = 3,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 4
        }

        /// <summary>
        /// The role type
        /// </summary>
        /// <value>The role type</value>
        [DataMember(Name="roleType", EmitDefaultValue=false)]
        public RoleTypeEnum? RoleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MobileScanUserAccount" /> class.
        /// </summary>
        /// <param name="Username">The username.</param>
        /// <param name="Password">The password.</param>
        /// <param name="RoleType">The role type.</param>
        /// <param name="OneTimePassword">The one time password.</param>
        public MobileScanUserAccount(string Username = default(string), string Password = default(string), RoleTypeEnum? RoleType = default(RoleTypeEnum?), string OneTimePassword = default(string))
        {
            this.Username = Username;
            this.Password = Password;
            this.RoleType = RoleType;
            this.OneTimePassword = OneTimePassword;
        }
        
        /// <summary>
        /// The username
        /// </summary>
        /// <value>The username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The password
        /// </summary>
        /// <value>The password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// The one time password
        /// </summary>
        /// <value>The one time password</value>
        [DataMember(Name="oneTimePassword", EmitDefaultValue=false)]
        public string OneTimePassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MobileScanUserAccount {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RoleType: ").Append(RoleType).Append("\n");
            sb.Append("  OneTimePassword: ").Append(OneTimePassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MobileScanUserAccount);
        }

        /// <summary>
        /// Returns true if MobileScanUserAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of MobileScanUserAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MobileScanUserAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RoleType == input.RoleType ||
                    (this.RoleType != null &&
                    this.RoleType.Equals(input.RoleType))
                ) && 
                (
                    this.OneTimePassword == input.OneTimePassword ||
                    (this.OneTimePassword != null &&
                    this.OneTimePassword.Equals(input.OneTimePassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RoleType != null)
                    hashCode = hashCode * 59 + this.RoleType.GetHashCode();
                if (this.OneTimePassword != null)
                    hashCode = hashCode * 59 + this.OneTimePassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
