/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Post Vulnerability Bulk Edit Request
    /// </summary>
    [DataContract]
    public partial class PostVulnerabilityBulkEditRequest :  IEquatable<PostVulnerabilityBulkEditRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostVulnerabilityBulkEditRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostVulnerabilityBulkEditRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostVulnerabilityBulkEditRequest" /> class.
        /// </summary>
        /// <param name="UserId">The id of the user.</param>
        /// <param name="DeveloperStatus">The developer status.</param>
        /// <param name="AuditorStatus">The auditor status.</param>
        /// <param name="Severity">The severity.</param>
        /// <param name="Comment">The comment.</param>
        /// <param name="VulnerabilityIds">The list of vulnerability ids to edit (required).</param>
        public PostVulnerabilityBulkEditRequest(string UserId = default(string), string DeveloperStatus = default(string), string AuditorStatus = default(string), string Severity = default(string), string Comment = default(string), List<string> VulnerabilityIds = default(List<string>))
        {
            // to ensure "VulnerabilityIds" is required (not null)
            if (VulnerabilityIds == null)
            {
                throw new InvalidDataException("VulnerabilityIds is a required property for PostVulnerabilityBulkEditRequest and cannot be null");
            }
            else
            {
                this.VulnerabilityIds = VulnerabilityIds;
            }
            this.UserId = UserId;
            this.DeveloperStatus = DeveloperStatus;
            this.AuditorStatus = AuditorStatus;
            this.Severity = Severity;
            this.Comment = Comment;
        }
        
        /// <summary>
        /// The id of the user
        /// </summary>
        /// <value>The id of the user</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The developer status
        /// </summary>
        /// <value>The developer status</value>
        [DataMember(Name="developerStatus", EmitDefaultValue=false)]
        public string DeveloperStatus { get; set; }

        /// <summary>
        /// The auditor status
        /// </summary>
        /// <value>The auditor status</value>
        [DataMember(Name="auditorStatus", EmitDefaultValue=false)]
        public string AuditorStatus { get; set; }

        /// <summary>
        /// The severity
        /// </summary>
        /// <value>The severity</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// The comment
        /// </summary>
        /// <value>The comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The list of vulnerability ids to edit
        /// </summary>
        /// <value>The list of vulnerability ids to edit</value>
        [DataMember(Name="vulnerabilityIds", EmitDefaultValue=false)]
        public List<string> VulnerabilityIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostVulnerabilityBulkEditRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DeveloperStatus: ").Append(DeveloperStatus).Append("\n");
            sb.Append("  AuditorStatus: ").Append(AuditorStatus).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  VulnerabilityIds: ").Append(VulnerabilityIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostVulnerabilityBulkEditRequest);
        }

        /// <summary>
        /// Returns true if PostVulnerabilityBulkEditRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostVulnerabilityBulkEditRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostVulnerabilityBulkEditRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.DeveloperStatus == input.DeveloperStatus ||
                    (this.DeveloperStatus != null &&
                    this.DeveloperStatus.Equals(input.DeveloperStatus))
                ) && 
                (
                    this.AuditorStatus == input.AuditorStatus ||
                    (this.AuditorStatus != null &&
                    this.AuditorStatus.Equals(input.AuditorStatus))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.VulnerabilityIds == input.VulnerabilityIds ||
                    this.VulnerabilityIds != null &&
                    this.VulnerabilityIds.SequenceEqual(input.VulnerabilityIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.DeveloperStatus != null)
                    hashCode = hashCode * 59 + this.DeveloperStatus.GetHashCode();
                if (this.AuditorStatus != null)
                    hashCode = hashCode * 59 + this.AuditorStatus.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.VulnerabilityIds != null)
                    hashCode = hashCode * 59 + this.VulnerabilityIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
