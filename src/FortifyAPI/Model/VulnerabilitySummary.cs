/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability Summary
    /// </summary>
    [DataContract]
    public partial class VulnerabilitySummary :  IEquatable<VulnerabilitySummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilitySummary" /> class.
        /// </summary>
        /// <param name="LineNumber">Line number.</param>
        /// <param name="PrimaryLocation">Primary location.</param>
        /// <param name="PrimaryLocationFull">The full Primary location.</param>
        /// <param name="Severity">Severity.</param>
        /// <param name="IsSuppressed">Is suppressed.</param>
        /// <param name="AssignedUser">Assigned user.</param>
        /// <param name="DeveloperStatus">Developer status.</param>
        /// <param name="AuditorStatus">Auditor status.</param>
        /// <param name="AuditPending">Audit pending.</param>
        /// <param name="AuditPendingAuditorStatus">Audit pending auditor status.</param>
        /// <param name="AuditPendingSeverity">Audit pending severity.</param>
        /// <param name="AuditPendingSuppression">Audit pending suppression.</param>
        /// <param name="Comments">Comments.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="BugSubmitted">Bug Submitted.</param>
        /// <param name="BugLink">Bug Link.</param>
        /// <param name="VulnId">The vulnerability id.</param>
        /// <param name="ReleaseId">The release id.</param>
        public VulnerabilitySummary(int? LineNumber = default(int?), string PrimaryLocation = default(string), string PrimaryLocationFull = default(string), string Severity = default(string), bool? IsSuppressed = default(bool?), string AssignedUser = default(string), string DeveloperStatus = default(string), string AuditorStatus = default(string), bool? AuditPending = default(bool?), string AuditPendingAuditorStatus = default(string), string AuditPendingSeverity = default(string), string AuditPendingSuppression = default(string), List<AuditComment> Comments = default(List<AuditComment>), string Notes = default(string), bool? BugSubmitted = default(bool?), string BugLink = default(string), string VulnId = default(string), int? ReleaseId = default(int?))
        {
            this.LineNumber = LineNumber;
            this.PrimaryLocation = PrimaryLocation;
            this.PrimaryLocationFull = PrimaryLocationFull;
            this.Severity = Severity;
            this.IsSuppressed = IsSuppressed;
            this.AssignedUser = AssignedUser;
            this.DeveloperStatus = DeveloperStatus;
            this.AuditorStatus = AuditorStatus;
            this.AuditPending = AuditPending;
            this.AuditPendingAuditorStatus = AuditPendingAuditorStatus;
            this.AuditPendingSeverity = AuditPendingSeverity;
            this.AuditPendingSuppression = AuditPendingSuppression;
            this.Comments = Comments;
            this.Notes = Notes;
            this.BugSubmitted = BugSubmitted;
            this.BugLink = BugLink;
            this.VulnId = VulnId;
            this.ReleaseId = ReleaseId;
        }
        
        /// <summary>
        /// Line number
        /// </summary>
        /// <value>Line number</value>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Primary location
        /// </summary>
        /// <value>Primary location</value>
        [DataMember(Name="primaryLocation", EmitDefaultValue=false)]
        public string PrimaryLocation { get; set; }

        /// <summary>
        /// The full Primary location
        /// </summary>
        /// <value>The full Primary location</value>
        [DataMember(Name="primaryLocationFull", EmitDefaultValue=false)]
        public string PrimaryLocationFull { get; set; }

        /// <summary>
        /// Severity
        /// </summary>
        /// <value>Severity</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// Is suppressed
        /// </summary>
        /// <value>Is suppressed</value>
        [DataMember(Name="isSuppressed", EmitDefaultValue=false)]
        public bool? IsSuppressed { get; set; }

        /// <summary>
        /// Assigned user
        /// </summary>
        /// <value>Assigned user</value>
        [DataMember(Name="assignedUser", EmitDefaultValue=false)]
        public string AssignedUser { get; set; }

        /// <summary>
        /// Developer status
        /// </summary>
        /// <value>Developer status</value>
        [DataMember(Name="developerStatus", EmitDefaultValue=false)]
        public string DeveloperStatus { get; set; }

        /// <summary>
        /// Auditor status
        /// </summary>
        /// <value>Auditor status</value>
        [DataMember(Name="auditorStatus", EmitDefaultValue=false)]
        public string AuditorStatus { get; set; }

        /// <summary>
        /// Audit pending
        /// </summary>
        /// <value>Audit pending</value>
        [DataMember(Name="auditPending", EmitDefaultValue=false)]
        public bool? AuditPending { get; set; }

        /// <summary>
        /// Audit pending auditor status
        /// </summary>
        /// <value>Audit pending auditor status</value>
        [DataMember(Name="auditPendingAuditorStatus", EmitDefaultValue=false)]
        public string AuditPendingAuditorStatus { get; set; }

        /// <summary>
        /// Audit pending severity
        /// </summary>
        /// <value>Audit pending severity</value>
        [DataMember(Name="auditPendingSeverity", EmitDefaultValue=false)]
        public string AuditPendingSeverity { get; set; }

        /// <summary>
        /// Audit pending suppression
        /// </summary>
        /// <value>Audit pending suppression</value>
        [DataMember(Name="auditPendingSuppression", EmitDefaultValue=false)]
        public string AuditPendingSuppression { get; set; }

        /// <summary>
        /// Comments
        /// </summary>
        /// <value>Comments</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public List<AuditComment> Comments { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Bug Submitted
        /// </summary>
        /// <value>Bug Submitted</value>
        [DataMember(Name="bugSubmitted", EmitDefaultValue=false)]
        public bool? BugSubmitted { get; set; }

        /// <summary>
        /// Bug Link
        /// </summary>
        /// <value>Bug Link</value>
        [DataMember(Name="bugLink", EmitDefaultValue=false)]
        public string BugLink { get; set; }

        /// <summary>
        /// The vulnerability id
        /// </summary>
        /// <value>The vulnerability id</value>
        [DataMember(Name="vulnId", EmitDefaultValue=false)]
        public string VulnId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilitySummary {\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  PrimaryLocation: ").Append(PrimaryLocation).Append("\n");
            sb.Append("  PrimaryLocationFull: ").Append(PrimaryLocationFull).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  IsSuppressed: ").Append(IsSuppressed).Append("\n");
            sb.Append("  AssignedUser: ").Append(AssignedUser).Append("\n");
            sb.Append("  DeveloperStatus: ").Append(DeveloperStatus).Append("\n");
            sb.Append("  AuditorStatus: ").Append(AuditorStatus).Append("\n");
            sb.Append("  AuditPending: ").Append(AuditPending).Append("\n");
            sb.Append("  AuditPendingAuditorStatus: ").Append(AuditPendingAuditorStatus).Append("\n");
            sb.Append("  AuditPendingSeverity: ").Append(AuditPendingSeverity).Append("\n");
            sb.Append("  AuditPendingSuppression: ").Append(AuditPendingSuppression).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  BugSubmitted: ").Append(BugSubmitted).Append("\n");
            sb.Append("  BugLink: ").Append(BugLink).Append("\n");
            sb.Append("  VulnId: ").Append(VulnId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilitySummary);
        }

        /// <summary>
        /// Returns true if VulnerabilitySummary instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilitySummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilitySummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.PrimaryLocation == input.PrimaryLocation ||
                    (this.PrimaryLocation != null &&
                    this.PrimaryLocation.Equals(input.PrimaryLocation))
                ) && 
                (
                    this.PrimaryLocationFull == input.PrimaryLocationFull ||
                    (this.PrimaryLocationFull != null &&
                    this.PrimaryLocationFull.Equals(input.PrimaryLocationFull))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.IsSuppressed == input.IsSuppressed ||
                    (this.IsSuppressed != null &&
                    this.IsSuppressed.Equals(input.IsSuppressed))
                ) && 
                (
                    this.AssignedUser == input.AssignedUser ||
                    (this.AssignedUser != null &&
                    this.AssignedUser.Equals(input.AssignedUser))
                ) && 
                (
                    this.DeveloperStatus == input.DeveloperStatus ||
                    (this.DeveloperStatus != null &&
                    this.DeveloperStatus.Equals(input.DeveloperStatus))
                ) && 
                (
                    this.AuditorStatus == input.AuditorStatus ||
                    (this.AuditorStatus != null &&
                    this.AuditorStatus.Equals(input.AuditorStatus))
                ) && 
                (
                    this.AuditPending == input.AuditPending ||
                    (this.AuditPending != null &&
                    this.AuditPending.Equals(input.AuditPending))
                ) && 
                (
                    this.AuditPendingAuditorStatus == input.AuditPendingAuditorStatus ||
                    (this.AuditPendingAuditorStatus != null &&
                    this.AuditPendingAuditorStatus.Equals(input.AuditPendingAuditorStatus))
                ) && 
                (
                    this.AuditPendingSeverity == input.AuditPendingSeverity ||
                    (this.AuditPendingSeverity != null &&
                    this.AuditPendingSeverity.Equals(input.AuditPendingSeverity))
                ) && 
                (
                    this.AuditPendingSuppression == input.AuditPendingSuppression ||
                    (this.AuditPendingSuppression != null &&
                    this.AuditPendingSuppression.Equals(input.AuditPendingSuppression))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.BugSubmitted == input.BugSubmitted ||
                    (this.BugSubmitted != null &&
                    this.BugSubmitted.Equals(input.BugSubmitted))
                ) && 
                (
                    this.BugLink == input.BugLink ||
                    (this.BugLink != null &&
                    this.BugLink.Equals(input.BugLink))
                ) && 
                (
                    this.VulnId == input.VulnId ||
                    (this.VulnId != null &&
                    this.VulnId.Equals(input.VulnId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.PrimaryLocation != null)
                    hashCode = hashCode * 59 + this.PrimaryLocation.GetHashCode();
                if (this.PrimaryLocationFull != null)
                    hashCode = hashCode * 59 + this.PrimaryLocationFull.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.IsSuppressed != null)
                    hashCode = hashCode * 59 + this.IsSuppressed.GetHashCode();
                if (this.AssignedUser != null)
                    hashCode = hashCode * 59 + this.AssignedUser.GetHashCode();
                if (this.DeveloperStatus != null)
                    hashCode = hashCode * 59 + this.DeveloperStatus.GetHashCode();
                if (this.AuditorStatus != null)
                    hashCode = hashCode * 59 + this.AuditorStatus.GetHashCode();
                if (this.AuditPending != null)
                    hashCode = hashCode * 59 + this.AuditPending.GetHashCode();
                if (this.AuditPendingAuditorStatus != null)
                    hashCode = hashCode * 59 + this.AuditPendingAuditorStatus.GetHashCode();
                if (this.AuditPendingSeverity != null)
                    hashCode = hashCode * 59 + this.AuditPendingSeverity.GetHashCode();
                if (this.AuditPendingSuppression != null)
                    hashCode = hashCode * 59 + this.AuditPendingSuppression.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.BugSubmitted != null)
                    hashCode = hashCode * 59 + this.BugSubmitted.GetHashCode();
                if (this.BugLink != null)
                    hashCode = hashCode * 59 + this.BugLink.GetHashCode();
                if (this.VulnId != null)
                    hashCode = hashCode * 59 + this.VulnId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
