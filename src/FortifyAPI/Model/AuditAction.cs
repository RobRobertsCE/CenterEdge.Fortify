/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Audit Action
    /// </summary>
    [DataContract]
    public partial class AuditAction :  IEquatable<AuditAction>, IValidatableObject
    {
        /// <summary>
        /// The audit action type
        /// </summary>
        /// <value>The audit action type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuditActionTypeEnum
        {
            
            /// <summary>
            /// Enum AuditorStatus for value: AuditorStatus
            /// </summary>
            [EnumMember(Value = "AuditorStatus")]
            AuditorStatus = 1,
            
            /// <summary>
            /// Enum DeveloperStatus for value: DeveloperStatus
            /// </summary>
            [EnumMember(Value = "DeveloperStatus")]
            DeveloperStatus = 2,
            
            /// <summary>
            /// Enum Severity for value: Severity
            /// </summary>
            [EnumMember(Value = "Severity")]
            Severity = 3,
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 4
        }

        /// <summary>
        /// The audit action type
        /// </summary>
        /// <value>The audit action type</value>
        [DataMember(Name="auditActionType", EmitDefaultValue=false)]
        public AuditActionTypeEnum? AuditActionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditAction" /> class.
        /// </summary>
        /// <param name="AuditActionType">The audit action type.</param>
        /// <param name="AuditActionTypeName">The audit action type name.</param>
        /// <param name="Items">List of audit action items.</param>
        public AuditAction(AuditActionTypeEnum? AuditActionType = default(AuditActionTypeEnum?), string AuditActionTypeName = default(string), List<LookupItem> Items = default(List<LookupItem>))
        {
            this.AuditActionType = AuditActionType;
            this.AuditActionTypeName = AuditActionTypeName;
            this.Items = Items;
        }
        

        /// <summary>
        /// The audit action type name
        /// </summary>
        /// <value>The audit action type name</value>
        [DataMember(Name="auditActionTypeName", EmitDefaultValue=false)]
        public string AuditActionTypeName { get; set; }

        /// <summary>
        /// List of audit action items
        /// </summary>
        /// <value>List of audit action items</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<LookupItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditAction {\n");
            sb.Append("  AuditActionType: ").Append(AuditActionType).Append("\n");
            sb.Append("  AuditActionTypeName: ").Append(AuditActionTypeName).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditAction);
        }

        /// <summary>
        /// Returns true if AuditAction instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuditActionType == input.AuditActionType ||
                    (this.AuditActionType != null &&
                    this.AuditActionType.Equals(input.AuditActionType))
                ) && 
                (
                    this.AuditActionTypeName == input.AuditActionTypeName ||
                    (this.AuditActionTypeName != null &&
                    this.AuditActionTypeName.Equals(input.AuditActionTypeName))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuditActionType != null)
                    hashCode = hashCode * 59 + this.AuditActionType.GetHashCode();
                if (this.AuditActionTypeName != null)
                    hashCode = hashCode * 59 + this.AuditActionTypeName.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
