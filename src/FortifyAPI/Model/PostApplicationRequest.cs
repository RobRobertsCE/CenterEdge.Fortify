/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Post Application Request
    /// </summary>
    [DataContract]
    public partial class PostApplicationRequest :  IEquatable<PostApplicationRequest>, IValidatableObject
    {
        /// <summary>
        /// Indicates if the application is a mobile application
        /// </summary>
        /// <value>Indicates if the application is a mobile application</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationTypeEnum
        {
            
            /// <summary>
            /// Enum WebThickClient for value: Web_Thick_Client
            /// </summary>
            [EnumMember(Value = "Web_Thick_Client")]
            WebThickClient = 1,
            
            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 2
        }

        /// <summary>
        /// Indicates if the application is a mobile application
        /// </summary>
        /// <value>Indicates if the application is a mobile application</value>
        [DataMember(Name="applicationType", EmitDefaultValue=false)]
        public ApplicationTypeEnum ApplicationType { get; set; }
        /// <summary>
        /// The business criticality id
        /// </summary>
        /// <value>The business criticality id</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessCriticalityTypeEnum
        {
            
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 1,
            
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 2,
            
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 3
        }

        /// <summary>
        /// The business criticality id
        /// </summary>
        /// <value>The business criticality id</value>
        [DataMember(Name="businessCriticalityType", EmitDefaultValue=false)]
        public BusinessCriticalityTypeEnum BusinessCriticalityType { get; set; }
        /// <summary>
        /// The SDLC status id
        /// </summary>
        /// <value>The SDLC status id</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SdlcStatusTypeEnum
        {
            
            /// <summary>
            /// Enum Production for value: Production
            /// </summary>
            [EnumMember(Value = "Production")]
            Production = 1,
            
            /// <summary>
            /// Enum QA for value: QA
            /// </summary>
            [EnumMember(Value = "QA")]
            QA = 2,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 3,
            
            /// <summary>
            /// Enum Retired for value: Retired
            /// </summary>
            [EnumMember(Value = "Retired")]
            Retired = 4
        }

        /// <summary>
        /// The SDLC status id
        /// </summary>
        /// <value>The SDLC status id</value>
        [DataMember(Name="sdlcStatusType", EmitDefaultValue=false)]
        public SdlcStatusTypeEnum SdlcStatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostApplicationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostApplicationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostApplicationRequest" /> class.
        /// </summary>
        /// <param name="ApplicationName">The application title (required).</param>
        /// <param name="ApplicationDescription">Description of the application that will help you manage multiple applications.</param>
        /// <param name="ApplicationType">Indicates if the application is a mobile application (required).</param>
        /// <param name="ReleaseName">The release name (required).</param>
        /// <param name="ReleaseDescription">Description to add additional details that help describe the release.</param>
        /// <param name="EmailList">List the email addresses of additional people who should be informed of activity related to this release. Separate multiple email addresses with a semicolon or comma.</param>
        /// <param name="OwnerId">Select an Owner from the list of registered users in your tenant. The \&quot;Owner\&quot; receives all email notifications related to this application (required).</param>
        /// <param name="Attributes">Application attributes. This is an array of key/value objects. Example, [{\&quot;Attribute 1\&quot;: \&quot;value 1\&quot;}, {\&quot;Attribute 2\&quot;: \&quot;value 2\&quot;}, {\&quot;Attribute 3\&quot;: \&quot;value 3\&quot;} ].</param>
        /// <param name="BusinessCriticalityType">The business criticality id (required).</param>
        /// <param name="SdlcStatusType">The SDLC status id (required).</param>
        public PostApplicationRequest(string ApplicationName = default(string), string ApplicationDescription = default(string), ApplicationTypeEnum ApplicationType = default(ApplicationTypeEnum), string ReleaseName = default(string), string ReleaseDescription = default(string), string EmailList = default(string), int? OwnerId = default(int?), List<ApplicationAttribute> Attributes = default(List<ApplicationAttribute>), BusinessCriticalityTypeEnum BusinessCriticalityType = default(BusinessCriticalityTypeEnum), SdlcStatusTypeEnum SdlcStatusType = default(SdlcStatusTypeEnum))
        {
            // to ensure "ApplicationName" is required (not null)
            if (ApplicationName == null)
            {
                throw new InvalidDataException("ApplicationName is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.ApplicationName = ApplicationName;
            }
            // to ensure "ApplicationType" is required (not null)
            if (ApplicationType == null)
            {
                throw new InvalidDataException("ApplicationType is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.ApplicationType = ApplicationType;
            }
            // to ensure "ReleaseName" is required (not null)
            if (ReleaseName == null)
            {
                throw new InvalidDataException("ReleaseName is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.ReleaseName = ReleaseName;
            }
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException("OwnerId is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.OwnerId = OwnerId;
            }
            // to ensure "BusinessCriticalityType" is required (not null)
            if (BusinessCriticalityType == null)
            {
                throw new InvalidDataException("BusinessCriticalityType is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.BusinessCriticalityType = BusinessCriticalityType;
            }
            // to ensure "SdlcStatusType" is required (not null)
            if (SdlcStatusType == null)
            {
                throw new InvalidDataException("SdlcStatusType is a required property for PostApplicationRequest and cannot be null");
            }
            else
            {
                this.SdlcStatusType = SdlcStatusType;
            }
            this.ApplicationDescription = ApplicationDescription;
            this.ReleaseDescription = ReleaseDescription;
            this.EmailList = EmailList;
            this.Attributes = Attributes;
        }
        
        /// <summary>
        /// The application title
        /// </summary>
        /// <value>The application title</value>
        [DataMember(Name="applicationName", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Description of the application that will help you manage multiple applications
        /// </summary>
        /// <value>Description of the application that will help you manage multiple applications</value>
        [DataMember(Name="applicationDescription", EmitDefaultValue=false)]
        public string ApplicationDescription { get; set; }


        /// <summary>
        /// The release name
        /// </summary>
        /// <value>The release name</value>
        [DataMember(Name="releaseName", EmitDefaultValue=false)]
        public string ReleaseName { get; set; }

        /// <summary>
        /// Description to add additional details that help describe the release
        /// </summary>
        /// <value>Description to add additional details that help describe the release</value>
        [DataMember(Name="releaseDescription", EmitDefaultValue=false)]
        public string ReleaseDescription { get; set; }

        /// <summary>
        /// List the email addresses of additional people who should be informed of activity related to this release. Separate multiple email addresses with a semicolon or comma
        /// </summary>
        /// <value>List the email addresses of additional people who should be informed of activity related to this release. Separate multiple email addresses with a semicolon or comma</value>
        [DataMember(Name="emailList", EmitDefaultValue=false)]
        public string EmailList { get; set; }

        /// <summary>
        /// Select an Owner from the list of registered users in your tenant. The \&quot;Owner\&quot; receives all email notifications related to this application
        /// </summary>
        /// <value>Select an Owner from the list of registered users in your tenant. The \&quot;Owner\&quot; receives all email notifications related to this application</value>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// Application attributes. This is an array of key/value objects. Example, [{\&quot;Attribute 1\&quot;: \&quot;value 1\&quot;}, {\&quot;Attribute 2\&quot;: \&quot;value 2\&quot;}, {\&quot;Attribute 3\&quot;: \&quot;value 3\&quot;} ]
        /// </summary>
        /// <value>Application attributes. This is an array of key/value objects. Example, [{\&quot;Attribute 1\&quot;: \&quot;value 1\&quot;}, {\&quot;Attribute 2\&quot;: \&quot;value 2\&quot;}, {\&quot;Attribute 3\&quot;: \&quot;value 3\&quot;} ]</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<ApplicationAttribute> Attributes { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostApplicationRequest {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationDescription: ").Append(ApplicationDescription).Append("\n");
            sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
            sb.Append("  ReleaseName: ").Append(ReleaseName).Append("\n");
            sb.Append("  ReleaseDescription: ").Append(ReleaseDescription).Append("\n");
            sb.Append("  EmailList: ").Append(EmailList).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BusinessCriticalityType: ").Append(BusinessCriticalityType).Append("\n");
            sb.Append("  SdlcStatusType: ").Append(SdlcStatusType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostApplicationRequest);
        }

        /// <summary>
        /// Returns true if PostApplicationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostApplicationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostApplicationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ApplicationDescription == input.ApplicationDescription ||
                    (this.ApplicationDescription != null &&
                    this.ApplicationDescription.Equals(input.ApplicationDescription))
                ) && 
                (
                    this.ApplicationType == input.ApplicationType ||
                    (this.ApplicationType != null &&
                    this.ApplicationType.Equals(input.ApplicationType))
                ) && 
                (
                    this.ReleaseName == input.ReleaseName ||
                    (this.ReleaseName != null &&
                    this.ReleaseName.Equals(input.ReleaseName))
                ) && 
                (
                    this.ReleaseDescription == input.ReleaseDescription ||
                    (this.ReleaseDescription != null &&
                    this.ReleaseDescription.Equals(input.ReleaseDescription))
                ) && 
                (
                    this.EmailList == input.EmailList ||
                    (this.EmailList != null &&
                    this.EmailList.Equals(input.EmailList))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.BusinessCriticalityType == input.BusinessCriticalityType ||
                    (this.BusinessCriticalityType != null &&
                    this.BusinessCriticalityType.Equals(input.BusinessCriticalityType))
                ) && 
                (
                    this.SdlcStatusType == input.SdlcStatusType ||
                    (this.SdlcStatusType != null &&
                    this.SdlcStatusType.Equals(input.SdlcStatusType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.ApplicationDescription != null)
                    hashCode = hashCode * 59 + this.ApplicationDescription.GetHashCode();
                if (this.ApplicationType != null)
                    hashCode = hashCode * 59 + this.ApplicationType.GetHashCode();
                if (this.ReleaseName != null)
                    hashCode = hashCode * 59 + this.ReleaseName.GetHashCode();
                if (this.ReleaseDescription != null)
                    hashCode = hashCode * 59 + this.ReleaseDescription.GetHashCode();
                if (this.EmailList != null)
                    hashCode = hashCode * 59 + this.EmailList.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.BusinessCriticalityType != null)
                    hashCode = hashCode * 59 + this.BusinessCriticalityType.GetHashCode();
                if (this.SdlcStatusType != null)
                    hashCode = hashCode * 59 + this.SdlcStatusType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
