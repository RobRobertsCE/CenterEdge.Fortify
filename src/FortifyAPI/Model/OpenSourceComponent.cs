/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// OpenSourceComponent
    /// </summary>
    [DataContract]
    public partial class OpenSourceComponent :  IEquatable<OpenSourceComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSourceComponent" /> class.
        /// </summary>
        /// <param name="ComponentHash">ComponentHash.</param>
        /// <param name="ComponentName">ComponentName.</param>
        /// <param name="ComponentVersionName">ComponentVersionName.</param>
        /// <param name="Licenses">Licenses.</param>
        /// <param name="VulnerabilityCounts">VulnerabilityCounts.</param>
        /// <param name="Releases">Releases.</param>
        public OpenSourceComponent(string ComponentHash = default(string), string ComponentName = default(string), string ComponentVersionName = default(string), List<OpenSourceComponentLicense> Licenses = default(List<OpenSourceComponentLicense>), List<VulnerabilityCount> VulnerabilityCounts = default(List<VulnerabilityCount>), List<OpenSourceComponentRelease> Releases = default(List<OpenSourceComponentRelease>))
        {
            this.ComponentHash = ComponentHash;
            this.ComponentName = ComponentName;
            this.ComponentVersionName = ComponentVersionName;
            this.Licenses = Licenses;
            this.VulnerabilityCounts = VulnerabilityCounts;
            this.Releases = Releases;
        }
        
        /// <summary>
        /// Gets or Sets ComponentHash
        /// </summary>
        [DataMember(Name="componentHash", EmitDefaultValue=false)]
        public string ComponentHash { get; set; }

        /// <summary>
        /// Gets or Sets ComponentName
        /// </summary>
        [DataMember(Name="componentName", EmitDefaultValue=false)]
        public string ComponentName { get; set; }

        /// <summary>
        /// Gets or Sets ComponentVersionName
        /// </summary>
        [DataMember(Name="componentVersionName", EmitDefaultValue=false)]
        public string ComponentVersionName { get; set; }

        /// <summary>
        /// Gets or Sets Licenses
        /// </summary>
        [DataMember(Name="licenses", EmitDefaultValue=false)]
        public List<OpenSourceComponentLicense> Licenses { get; set; }

        /// <summary>
        /// Gets or Sets VulnerabilityCounts
        /// </summary>
        [DataMember(Name="vulnerabilityCounts", EmitDefaultValue=false)]
        public List<VulnerabilityCount> VulnerabilityCounts { get; set; }

        /// <summary>
        /// Gets or Sets Releases
        /// </summary>
        [DataMember(Name="releases", EmitDefaultValue=false)]
        public List<OpenSourceComponentRelease> Releases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenSourceComponent {\n");
            sb.Append("  ComponentHash: ").Append(ComponentHash).Append("\n");
            sb.Append("  ComponentName: ").Append(ComponentName).Append("\n");
            sb.Append("  ComponentVersionName: ").Append(ComponentVersionName).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("  VulnerabilityCounts: ").Append(VulnerabilityCounts).Append("\n");
            sb.Append("  Releases: ").Append(Releases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenSourceComponent);
        }

        /// <summary>
        /// Returns true if OpenSourceComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenSourceComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenSourceComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComponentHash == input.ComponentHash ||
                    (this.ComponentHash != null &&
                    this.ComponentHash.Equals(input.ComponentHash))
                ) && 
                (
                    this.ComponentName == input.ComponentName ||
                    (this.ComponentName != null &&
                    this.ComponentName.Equals(input.ComponentName))
                ) && 
                (
                    this.ComponentVersionName == input.ComponentVersionName ||
                    (this.ComponentVersionName != null &&
                    this.ComponentVersionName.Equals(input.ComponentVersionName))
                ) && 
                (
                    this.Licenses == input.Licenses ||
                    this.Licenses != null &&
                    this.Licenses.SequenceEqual(input.Licenses)
                ) && 
                (
                    this.VulnerabilityCounts == input.VulnerabilityCounts ||
                    this.VulnerabilityCounts != null &&
                    this.VulnerabilityCounts.SequenceEqual(input.VulnerabilityCounts)
                ) && 
                (
                    this.Releases == input.Releases ||
                    this.Releases != null &&
                    this.Releases.SequenceEqual(input.Releases)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComponentHash != null)
                    hashCode = hashCode * 59 + this.ComponentHash.GetHashCode();
                if (this.ComponentName != null)
                    hashCode = hashCode * 59 + this.ComponentName.GetHashCode();
                if (this.ComponentVersionName != null)
                    hashCode = hashCode * 59 + this.ComponentVersionName.GetHashCode();
                if (this.Licenses != null)
                    hashCode = hashCode * 59 + this.Licenses.GetHashCode();
                if (this.VulnerabilityCounts != null)
                    hashCode = hashCode * 59 + this.VulnerabilityCounts.GetHashCode();
                if (this.Releases != null)
                    hashCode = hashCode * 59 + this.Releases.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
