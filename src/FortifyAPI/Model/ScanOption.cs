/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Scan Option
    /// </summary>
    [DataContract]
    public partial class ScanOption :  IEquatable<ScanOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScanOption" /> class.
        /// </summary>
        /// <param name="Id">The scan option id.</param>
        /// <param name="Name">The scan option name.</param>
        /// <param name="LastSelectedOption">The last selected option.</param>
        /// <param name="Options">List of options.</param>
        public ScanOption(int? Id = default(int?), string Name = default(string), string LastSelectedOption = default(string), List<LookupItem> Options = default(List<LookupItem>))
        {
            this.Id = Id;
            this.Name = Name;
            this.LastSelectedOption = LastSelectedOption;
            this.Options = Options;
        }
        
        /// <summary>
        /// The scan option id
        /// </summary>
        /// <value>The scan option id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The scan option name
        /// </summary>
        /// <value>The scan option name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The last selected option
        /// </summary>
        /// <value>The last selected option</value>
        [DataMember(Name="lastSelectedOption", EmitDefaultValue=false)]
        public string LastSelectedOption { get; set; }

        /// <summary>
        /// List of options
        /// </summary>
        /// <value>List of options</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<LookupItem> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScanOption {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LastSelectedOption: ").Append(LastSelectedOption).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScanOption);
        }

        /// <summary>
        /// Returns true if ScanOption instances are equal
        /// </summary>
        /// <param name="input">Instance of ScanOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScanOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LastSelectedOption == input.LastSelectedOption ||
                    (this.LastSelectedOption != null &&
                    this.LastSelectedOption.Equals(input.LastSelectedOption))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.LastSelectedOption != null)
                    hashCode = hashCode * 59 + this.LastSelectedOption.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
