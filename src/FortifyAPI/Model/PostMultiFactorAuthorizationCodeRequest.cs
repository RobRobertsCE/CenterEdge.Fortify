/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Post Multi Factor Authorization Code Request
    /// </summary>
    [DataContract]
    public partial class PostMultiFactorAuthorizationCodeRequest :  IEquatable<PostMultiFactorAuthorizationCodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of Authorization (sms or email)
        /// </summary>
        /// <value>Type of Authorization (sms or email)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MultiFactorAuthorizationTypeEnum
        {
            
            /// <summary>
            /// Enum SMSDelivery for value: SMSDelivery
            /// </summary>
            [EnumMember(Value = "SMSDelivery")]
            SMSDelivery = 1,
            
            /// <summary>
            /// Enum EmailDelivery for value: EmailDelivery
            /// </summary>
            [EnumMember(Value = "EmailDelivery")]
            EmailDelivery = 2
        }

        /// <summary>
        /// Type of Authorization (sms or email)
        /// </summary>
        /// <value>Type of Authorization (sms or email)</value>
        [DataMember(Name="multiFactorAuthorizationType", EmitDefaultValue=false)]
        public MultiFactorAuthorizationTypeEnum MultiFactorAuthorizationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMultiFactorAuthorizationCodeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostMultiFactorAuthorizationCodeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMultiFactorAuthorizationCodeRequest" /> class.
        /// </summary>
        /// <param name="MultiFactorAuthorizationType">Type of Authorization (sms or email) (required).</param>
        /// <param name="Username">Tenant Code / Username (required).</param>
        /// <param name="Password">Password (required).</param>
        public PostMultiFactorAuthorizationCodeRequest(MultiFactorAuthorizationTypeEnum MultiFactorAuthorizationType = default(MultiFactorAuthorizationTypeEnum), string Username = default(string), string Password = default(string))
        {
            // to ensure "MultiFactorAuthorizationType" is required (not null)
            if (MultiFactorAuthorizationType == null)
            {
                throw new InvalidDataException("MultiFactorAuthorizationType is a required property for PostMultiFactorAuthorizationCodeRequest and cannot be null");
            }
            else
            {
                this.MultiFactorAuthorizationType = MultiFactorAuthorizationType;
            }
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for PostMultiFactorAuthorizationCodeRequest and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for PostMultiFactorAuthorizationCodeRequest and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
        }
        

        /// <summary>
        /// Tenant Code / Username
        /// </summary>
        /// <value>Tenant Code / Username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostMultiFactorAuthorizationCodeRequest {\n");
            sb.Append("  MultiFactorAuthorizationType: ").Append(MultiFactorAuthorizationType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostMultiFactorAuthorizationCodeRequest);
        }

        /// <summary>
        /// Returns true if PostMultiFactorAuthorizationCodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostMultiFactorAuthorizationCodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostMultiFactorAuthorizationCodeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MultiFactorAuthorizationType == input.MultiFactorAuthorizationType ||
                    (this.MultiFactorAuthorizationType != null &&
                    this.MultiFactorAuthorizationType.Equals(input.MultiFactorAuthorizationType))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MultiFactorAuthorizationType != null)
                    hashCode = hashCode * 59 + this.MultiFactorAuthorizationType.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
