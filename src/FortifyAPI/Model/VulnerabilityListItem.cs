/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability List Item
    /// </summary>
    [DataContract]
    public partial class VulnerabilityListItem :  IEquatable<VulnerabilityListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityListItem" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ReleaseId">Release id.</param>
        /// <param name="Fisma">FISMA.</param>
        /// <param name="SeverityString">Severity string.</param>
        /// <param name="Severity">Severity numeric value.</param>
        /// <param name="Category">Category.</param>
        /// <param name="Kingdom">Kingdom.</param>
        /// <param name="Owasp2004">OWASP 2004.</param>
        /// <param name="Owasp2007">OWASP 2007.</param>
        /// <param name="Owasp2010">OWASP 2010.</param>
        /// <param name="Owasp2013">OWASP 2013.</param>
        /// <param name="Owasp2017">OWASP 2017.</param>
        /// <param name="Cwe">CWE.</param>
        /// <param name="Package">Package.</param>
        /// <param name="PrimaryLocation">Primary location.</param>
        /// <param name="VulnId">Vulnerability id.</param>
        /// <param name="AnalysisType">Analysis type.</param>
        /// <param name="LineNumber">Line number.</param>
        /// <param name="HasComments">Has Comments.</param>
        /// <param name="AssignedUser">Assigned user.</param>
        /// <param name="Scantype">Scan type.</param>
        /// <param name="Subtype">Sub type.</param>
        /// <param name="PrimaryLocationFull">Primary location full.</param>
        /// <param name="HasAttachments">Has attachments.</param>
        /// <param name="Pci11">PCI 1.1.</param>
        /// <param name="Pci12">PCI 1.2.</param>
        /// <param name="Pci2">PCI 2.0.</param>
        /// <param name="Sans2009">SANS 2009.</param>
        /// <param name="Sans2010">SANS 2010.</param>
        /// <param name="Sans2011">SANS 2011.</param>
        /// <param name="Wasc242">WASC242.</param>
        /// <param name="IsSuppressed">Is suppressed.</param>
        /// <param name="ScanId">Scan id.</param>
        /// <param name="Pci3">PCI 3.0.</param>
        /// <param name="InstanceId">Instance id.</param>
        /// <param name="AuditPendingAuditorStatus">Audit Pending - Auditor Status.</param>
        /// <param name="AuditorStatus">Auditor Status.</param>
        /// <param name="CheckId">Check Id.</param>
        /// <param name="ClosedDate">Closed Date.</param>
        /// <param name="ClosedStatus">Closed Status.</param>
        /// <param name="DeveloperStatus">Developer Status.</param>
        /// <param name="FalsePositiveChallenge">False Positive Challenge.</param>
        /// <param name="IntroducedDate">Introduced Date.</param>
        /// <param name="ScanStartedDate">Scan Started Date.</param>
        /// <param name="ScanCompletedDate">Scan Completed Date.</param>
        /// <param name="Status">Status.</param>
        /// <param name="BugSubmitted">Bug Submitted.</param>
        /// <param name="BugLink">Bug Link.</param>
        /// <param name="AuditPendingSuppression">Audit Pending Suppression.</param>
        public VulnerabilityListItem(int? Id = default(int?), int? ReleaseId = default(int?), string Fisma = default(string), string SeverityString = default(string), int? Severity = default(int?), string Category = default(string), string Kingdom = default(string), string Owasp2004 = default(string), string Owasp2007 = default(string), string Owasp2010 = default(string), string Owasp2013 = default(string), string Owasp2017 = default(string), string Cwe = default(string), string Package = default(string), string PrimaryLocation = default(string), string VulnId = default(string), string AnalysisType = default(string), int? LineNumber = default(int?), bool? HasComments = default(bool?), string AssignedUser = default(string), string Scantype = default(string), string Subtype = default(string), string PrimaryLocationFull = default(string), bool? HasAttachments = default(bool?), string Pci11 = default(string), string Pci12 = default(string), string Pci2 = default(string), string Sans2009 = default(string), string Sans2010 = default(string), string Sans2011 = default(string), string Wasc242 = default(string), bool? IsSuppressed = default(bool?), int? ScanId = default(int?), string Pci3 = default(string), string InstanceId = default(string), string AuditPendingAuditorStatus = default(string), string AuditorStatus = default(string), string CheckId = default(string), DateTime? ClosedDate = default(DateTime?), bool? ClosedStatus = default(bool?), string DeveloperStatus = default(string), string FalsePositiveChallenge = default(string), string IntroducedDate = default(string), DateTime? ScanStartedDate = default(DateTime?), DateTime? ScanCompletedDate = default(DateTime?), string Status = default(string), bool? BugSubmitted = default(bool?), string BugLink = default(string), string AuditPendingSuppression = default(string))
        {
            this.Id = Id;
            this.ReleaseId = ReleaseId;
            this.Fisma = Fisma;
            this.SeverityString = SeverityString;
            this.Severity = Severity;
            this.Category = Category;
            this.Kingdom = Kingdom;
            this.Owasp2004 = Owasp2004;
            this.Owasp2007 = Owasp2007;
            this.Owasp2010 = Owasp2010;
            this.Owasp2013 = Owasp2013;
            this.Owasp2017 = Owasp2017;
            this.Cwe = Cwe;
            this.Package = Package;
            this.PrimaryLocation = PrimaryLocation;
            this.VulnId = VulnId;
            this.AnalysisType = AnalysisType;
            this.LineNumber = LineNumber;
            this.HasComments = HasComments;
            this.AssignedUser = AssignedUser;
            this.Scantype = Scantype;
            this.Subtype = Subtype;
            this.PrimaryLocationFull = PrimaryLocationFull;
            this.HasAttachments = HasAttachments;
            this.Pci11 = Pci11;
            this.Pci12 = Pci12;
            this.Pci2 = Pci2;
            this.Sans2009 = Sans2009;
            this.Sans2010 = Sans2010;
            this.Sans2011 = Sans2011;
            this.Wasc242 = Wasc242;
            this.IsSuppressed = IsSuppressed;
            this.ScanId = ScanId;
            this.Pci3 = Pci3;
            this.InstanceId = InstanceId;
            this.AuditPendingAuditorStatus = AuditPendingAuditorStatus;
            this.AuditorStatus = AuditorStatus;
            this.CheckId = CheckId;
            this.ClosedDate = ClosedDate;
            this.ClosedStatus = ClosedStatus;
            this.DeveloperStatus = DeveloperStatus;
            this.FalsePositiveChallenge = FalsePositiveChallenge;
            this.IntroducedDate = IntroducedDate;
            this.ScanStartedDate = ScanStartedDate;
            this.ScanCompletedDate = ScanCompletedDate;
            this.Status = Status;
            this.BugSubmitted = BugSubmitted;
            this.BugLink = BugLink;
            this.AuditPendingSuppression = AuditPendingSuppression;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Release id
        /// </summary>
        /// <value>Release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// FISMA
        /// </summary>
        /// <value>FISMA</value>
        [DataMember(Name="fisma", EmitDefaultValue=false)]
        public string Fisma { get; set; }

        /// <summary>
        /// Severity string
        /// </summary>
        /// <value>Severity string</value>
        [DataMember(Name="severityString", EmitDefaultValue=false)]
        public string SeverityString { get; set; }

        /// <summary>
        /// Severity numeric value
        /// </summary>
        /// <value>Severity numeric value</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public int? Severity { get; set; }

        /// <summary>
        /// Category
        /// </summary>
        /// <value>Category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Kingdom
        /// </summary>
        /// <value>Kingdom</value>
        [DataMember(Name="kingdom", EmitDefaultValue=false)]
        public string Kingdom { get; set; }

        /// <summary>
        /// OWASP 2004
        /// </summary>
        /// <value>OWASP 2004</value>
        [DataMember(Name="owasp2004", EmitDefaultValue=false)]
        public string Owasp2004 { get; set; }

        /// <summary>
        /// OWASP 2007
        /// </summary>
        /// <value>OWASP 2007</value>
        [DataMember(Name="owasp2007", EmitDefaultValue=false)]
        public string Owasp2007 { get; set; }

        /// <summary>
        /// OWASP 2010
        /// </summary>
        /// <value>OWASP 2010</value>
        [DataMember(Name="owasp2010", EmitDefaultValue=false)]
        public string Owasp2010 { get; set; }

        /// <summary>
        /// OWASP 2013
        /// </summary>
        /// <value>OWASP 2013</value>
        [DataMember(Name="owasp2013", EmitDefaultValue=false)]
        public string Owasp2013 { get; set; }

        /// <summary>
        /// OWASP 2017
        /// </summary>
        /// <value>OWASP 2017</value>
        [DataMember(Name="owasp2017", EmitDefaultValue=false)]
        public string Owasp2017 { get; set; }

        /// <summary>
        /// CWE
        /// </summary>
        /// <value>CWE</value>
        [DataMember(Name="cwe", EmitDefaultValue=false)]
        public string Cwe { get; set; }

        /// <summary>
        /// Package
        /// </summary>
        /// <value>Package</value>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public string Package { get; set; }

        /// <summary>
        /// Primary location
        /// </summary>
        /// <value>Primary location</value>
        [DataMember(Name="primaryLocation", EmitDefaultValue=false)]
        public string PrimaryLocation { get; set; }

        /// <summary>
        /// Vulnerability id
        /// </summary>
        /// <value>Vulnerability id</value>
        [DataMember(Name="vulnId", EmitDefaultValue=false)]
        public string VulnId { get; set; }

        /// <summary>
        /// Analysis type
        /// </summary>
        /// <value>Analysis type</value>
        [DataMember(Name="analysisType", EmitDefaultValue=false)]
        public string AnalysisType { get; set; }

        /// <summary>
        /// Line number
        /// </summary>
        /// <value>Line number</value>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Has Comments
        /// </summary>
        /// <value>Has Comments</value>
        [DataMember(Name="hasComments", EmitDefaultValue=false)]
        public bool? HasComments { get; set; }

        /// <summary>
        /// Assigned user
        /// </summary>
        /// <value>Assigned user</value>
        [DataMember(Name="assignedUser", EmitDefaultValue=false)]
        public string AssignedUser { get; set; }

        /// <summary>
        /// Scan type
        /// </summary>
        /// <value>Scan type</value>
        [DataMember(Name="scantype", EmitDefaultValue=false)]
        public string Scantype { get; set; }

        /// <summary>
        /// Sub type
        /// </summary>
        /// <value>Sub type</value>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Primary location full
        /// </summary>
        /// <value>Primary location full</value>
        [DataMember(Name="primaryLocationFull", EmitDefaultValue=false)]
        public string PrimaryLocationFull { get; set; }

        /// <summary>
        /// Has attachments
        /// </summary>
        /// <value>Has attachments</value>
        [DataMember(Name="hasAttachments", EmitDefaultValue=false)]
        public bool? HasAttachments { get; set; }

        /// <summary>
        /// PCI 1.1
        /// </summary>
        /// <value>PCI 1.1</value>
        [DataMember(Name="pci1_1", EmitDefaultValue=false)]
        public string Pci11 { get; set; }

        /// <summary>
        /// PCI 1.2
        /// </summary>
        /// <value>PCI 1.2</value>
        [DataMember(Name="pci1_2", EmitDefaultValue=false)]
        public string Pci12 { get; set; }

        /// <summary>
        /// PCI 2.0
        /// </summary>
        /// <value>PCI 2.0</value>
        [DataMember(Name="pci2", EmitDefaultValue=false)]
        public string Pci2 { get; set; }

        /// <summary>
        /// SANS 2009
        /// </summary>
        /// <value>SANS 2009</value>
        [DataMember(Name="sans2009", EmitDefaultValue=false)]
        public string Sans2009 { get; set; }

        /// <summary>
        /// SANS 2010
        /// </summary>
        /// <value>SANS 2010</value>
        [DataMember(Name="sans2010", EmitDefaultValue=false)]
        public string Sans2010 { get; set; }

        /// <summary>
        /// SANS 2011
        /// </summary>
        /// <value>SANS 2011</value>
        [DataMember(Name="sans2011", EmitDefaultValue=false)]
        public string Sans2011 { get; set; }

        /// <summary>
        /// WASC242
        /// </summary>
        /// <value>WASC242</value>
        [DataMember(Name="wasc24_2", EmitDefaultValue=false)]
        public string Wasc242 { get; set; }

        /// <summary>
        /// Is suppressed
        /// </summary>
        /// <value>Is suppressed</value>
        [DataMember(Name="isSuppressed", EmitDefaultValue=false)]
        public bool? IsSuppressed { get; set; }

        /// <summary>
        /// Scan id
        /// </summary>
        /// <value>Scan id</value>
        [DataMember(Name="scanId", EmitDefaultValue=false)]
        public int? ScanId { get; set; }

        /// <summary>
        /// PCI 3.0
        /// </summary>
        /// <value>PCI 3.0</value>
        [DataMember(Name="pci3", EmitDefaultValue=false)]
        public string Pci3 { get; set; }

        /// <summary>
        /// Instance id
        /// </summary>
        /// <value>Instance id</value>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Audit Pending - Auditor Status
        /// </summary>
        /// <value>Audit Pending - Auditor Status</value>
        [DataMember(Name="auditPendingAuditorStatus", EmitDefaultValue=false)]
        public string AuditPendingAuditorStatus { get; set; }

        /// <summary>
        /// Auditor Status
        /// </summary>
        /// <value>Auditor Status</value>
        [DataMember(Name="auditorStatus", EmitDefaultValue=false)]
        public string AuditorStatus { get; set; }

        /// <summary>
        /// Check Id
        /// </summary>
        /// <value>Check Id</value>
        [DataMember(Name="checkId", EmitDefaultValue=false)]
        public string CheckId { get; set; }

        /// <summary>
        /// Closed Date
        /// </summary>
        /// <value>Closed Date</value>
        [DataMember(Name="closedDate", EmitDefaultValue=false)]
        public DateTime? ClosedDate { get; set; }

        /// <summary>
        /// Closed Status
        /// </summary>
        /// <value>Closed Status</value>
        [DataMember(Name="closedStatus", EmitDefaultValue=false)]
        public bool? ClosedStatus { get; set; }

        /// <summary>
        /// Developer Status
        /// </summary>
        /// <value>Developer Status</value>
        [DataMember(Name="developerStatus", EmitDefaultValue=false)]
        public string DeveloperStatus { get; set; }

        /// <summary>
        /// False Positive Challenge
        /// </summary>
        /// <value>False Positive Challenge</value>
        [DataMember(Name="falsePositiveChallenge", EmitDefaultValue=false)]
        public string FalsePositiveChallenge { get; set; }

        /// <summary>
        /// Introduced Date
        /// </summary>
        /// <value>Introduced Date</value>
        [DataMember(Name="introducedDate", EmitDefaultValue=false)]
        public string IntroducedDate { get; set; }

        /// <summary>
        /// Scan Started Date
        /// </summary>
        /// <value>Scan Started Date</value>
        [DataMember(Name="scanStartedDate", EmitDefaultValue=false)]
        public DateTime? ScanStartedDate { get; set; }

        /// <summary>
        /// Scan Completed Date
        /// </summary>
        /// <value>Scan Completed Date</value>
        [DataMember(Name="scanCompletedDate", EmitDefaultValue=false)]
        public DateTime? ScanCompletedDate { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Bug Submitted
        /// </summary>
        /// <value>Bug Submitted</value>
        [DataMember(Name="bugSubmitted", EmitDefaultValue=false)]
        public bool? BugSubmitted { get; set; }

        /// <summary>
        /// Bug Link
        /// </summary>
        /// <value>Bug Link</value>
        [DataMember(Name="bugLink", EmitDefaultValue=false)]
        public string BugLink { get; set; }

        /// <summary>
        /// Audit Pending Suppression
        /// </summary>
        /// <value>Audit Pending Suppression</value>
        [DataMember(Name="auditPendingSuppression", EmitDefaultValue=false)]
        public string AuditPendingSuppression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  Fisma: ").Append(Fisma).Append("\n");
            sb.Append("  SeverityString: ").Append(SeverityString).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Kingdom: ").Append(Kingdom).Append("\n");
            sb.Append("  Owasp2004: ").Append(Owasp2004).Append("\n");
            sb.Append("  Owasp2007: ").Append(Owasp2007).Append("\n");
            sb.Append("  Owasp2010: ").Append(Owasp2010).Append("\n");
            sb.Append("  Owasp2013: ").Append(Owasp2013).Append("\n");
            sb.Append("  Owasp2017: ").Append(Owasp2017).Append("\n");
            sb.Append("  Cwe: ").Append(Cwe).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  PrimaryLocation: ").Append(PrimaryLocation).Append("\n");
            sb.Append("  VulnId: ").Append(VulnId).Append("\n");
            sb.Append("  AnalysisType: ").Append(AnalysisType).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  HasComments: ").Append(HasComments).Append("\n");
            sb.Append("  AssignedUser: ").Append(AssignedUser).Append("\n");
            sb.Append("  Scantype: ").Append(Scantype).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  PrimaryLocationFull: ").Append(PrimaryLocationFull).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("  Pci11: ").Append(Pci11).Append("\n");
            sb.Append("  Pci12: ").Append(Pci12).Append("\n");
            sb.Append("  Pci2: ").Append(Pci2).Append("\n");
            sb.Append("  Sans2009: ").Append(Sans2009).Append("\n");
            sb.Append("  Sans2010: ").Append(Sans2010).Append("\n");
            sb.Append("  Sans2011: ").Append(Sans2011).Append("\n");
            sb.Append("  Wasc242: ").Append(Wasc242).Append("\n");
            sb.Append("  IsSuppressed: ").Append(IsSuppressed).Append("\n");
            sb.Append("  ScanId: ").Append(ScanId).Append("\n");
            sb.Append("  Pci3: ").Append(Pci3).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  AuditPendingAuditorStatus: ").Append(AuditPendingAuditorStatus).Append("\n");
            sb.Append("  AuditorStatus: ").Append(AuditorStatus).Append("\n");
            sb.Append("  CheckId: ").Append(CheckId).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  ClosedStatus: ").Append(ClosedStatus).Append("\n");
            sb.Append("  DeveloperStatus: ").Append(DeveloperStatus).Append("\n");
            sb.Append("  FalsePositiveChallenge: ").Append(FalsePositiveChallenge).Append("\n");
            sb.Append("  IntroducedDate: ").Append(IntroducedDate).Append("\n");
            sb.Append("  ScanStartedDate: ").Append(ScanStartedDate).Append("\n");
            sb.Append("  ScanCompletedDate: ").Append(ScanCompletedDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BugSubmitted: ").Append(BugSubmitted).Append("\n");
            sb.Append("  BugLink: ").Append(BugLink).Append("\n");
            sb.Append("  AuditPendingSuppression: ").Append(AuditPendingSuppression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityListItem);
        }

        /// <summary>
        /// Returns true if VulnerabilityListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.Fisma == input.Fisma ||
                    (this.Fisma != null &&
                    this.Fisma.Equals(input.Fisma))
                ) && 
                (
                    this.SeverityString == input.SeverityString ||
                    (this.SeverityString != null &&
                    this.SeverityString.Equals(input.SeverityString))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Kingdom == input.Kingdom ||
                    (this.Kingdom != null &&
                    this.Kingdom.Equals(input.Kingdom))
                ) && 
                (
                    this.Owasp2004 == input.Owasp2004 ||
                    (this.Owasp2004 != null &&
                    this.Owasp2004.Equals(input.Owasp2004))
                ) && 
                (
                    this.Owasp2007 == input.Owasp2007 ||
                    (this.Owasp2007 != null &&
                    this.Owasp2007.Equals(input.Owasp2007))
                ) && 
                (
                    this.Owasp2010 == input.Owasp2010 ||
                    (this.Owasp2010 != null &&
                    this.Owasp2010.Equals(input.Owasp2010))
                ) && 
                (
                    this.Owasp2013 == input.Owasp2013 ||
                    (this.Owasp2013 != null &&
                    this.Owasp2013.Equals(input.Owasp2013))
                ) && 
                (
                    this.Owasp2017 == input.Owasp2017 ||
                    (this.Owasp2017 != null &&
                    this.Owasp2017.Equals(input.Owasp2017))
                ) && 
                (
                    this.Cwe == input.Cwe ||
                    (this.Cwe != null &&
                    this.Cwe.Equals(input.Cwe))
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                ) && 
                (
                    this.PrimaryLocation == input.PrimaryLocation ||
                    (this.PrimaryLocation != null &&
                    this.PrimaryLocation.Equals(input.PrimaryLocation))
                ) && 
                (
                    this.VulnId == input.VulnId ||
                    (this.VulnId != null &&
                    this.VulnId.Equals(input.VulnId))
                ) && 
                (
                    this.AnalysisType == input.AnalysisType ||
                    (this.AnalysisType != null &&
                    this.AnalysisType.Equals(input.AnalysisType))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.HasComments == input.HasComments ||
                    (this.HasComments != null &&
                    this.HasComments.Equals(input.HasComments))
                ) && 
                (
                    this.AssignedUser == input.AssignedUser ||
                    (this.AssignedUser != null &&
                    this.AssignedUser.Equals(input.AssignedUser))
                ) && 
                (
                    this.Scantype == input.Scantype ||
                    (this.Scantype != null &&
                    this.Scantype.Equals(input.Scantype))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.PrimaryLocationFull == input.PrimaryLocationFull ||
                    (this.PrimaryLocationFull != null &&
                    this.PrimaryLocationFull.Equals(input.PrimaryLocationFull))
                ) && 
                (
                    this.HasAttachments == input.HasAttachments ||
                    (this.HasAttachments != null &&
                    this.HasAttachments.Equals(input.HasAttachments))
                ) && 
                (
                    this.Pci11 == input.Pci11 ||
                    (this.Pci11 != null &&
                    this.Pci11.Equals(input.Pci11))
                ) && 
                (
                    this.Pci12 == input.Pci12 ||
                    (this.Pci12 != null &&
                    this.Pci12.Equals(input.Pci12))
                ) && 
                (
                    this.Pci2 == input.Pci2 ||
                    (this.Pci2 != null &&
                    this.Pci2.Equals(input.Pci2))
                ) && 
                (
                    this.Sans2009 == input.Sans2009 ||
                    (this.Sans2009 != null &&
                    this.Sans2009.Equals(input.Sans2009))
                ) && 
                (
                    this.Sans2010 == input.Sans2010 ||
                    (this.Sans2010 != null &&
                    this.Sans2010.Equals(input.Sans2010))
                ) && 
                (
                    this.Sans2011 == input.Sans2011 ||
                    (this.Sans2011 != null &&
                    this.Sans2011.Equals(input.Sans2011))
                ) && 
                (
                    this.Wasc242 == input.Wasc242 ||
                    (this.Wasc242 != null &&
                    this.Wasc242.Equals(input.Wasc242))
                ) && 
                (
                    this.IsSuppressed == input.IsSuppressed ||
                    (this.IsSuppressed != null &&
                    this.IsSuppressed.Equals(input.IsSuppressed))
                ) && 
                (
                    this.ScanId == input.ScanId ||
                    (this.ScanId != null &&
                    this.ScanId.Equals(input.ScanId))
                ) && 
                (
                    this.Pci3 == input.Pci3 ||
                    (this.Pci3 != null &&
                    this.Pci3.Equals(input.Pci3))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.AuditPendingAuditorStatus == input.AuditPendingAuditorStatus ||
                    (this.AuditPendingAuditorStatus != null &&
                    this.AuditPendingAuditorStatus.Equals(input.AuditPendingAuditorStatus))
                ) && 
                (
                    this.AuditorStatus == input.AuditorStatus ||
                    (this.AuditorStatus != null &&
                    this.AuditorStatus.Equals(input.AuditorStatus))
                ) && 
                (
                    this.CheckId == input.CheckId ||
                    (this.CheckId != null &&
                    this.CheckId.Equals(input.CheckId))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.ClosedStatus == input.ClosedStatus ||
                    (this.ClosedStatus != null &&
                    this.ClosedStatus.Equals(input.ClosedStatus))
                ) && 
                (
                    this.DeveloperStatus == input.DeveloperStatus ||
                    (this.DeveloperStatus != null &&
                    this.DeveloperStatus.Equals(input.DeveloperStatus))
                ) && 
                (
                    this.FalsePositiveChallenge == input.FalsePositiveChallenge ||
                    (this.FalsePositiveChallenge != null &&
                    this.FalsePositiveChallenge.Equals(input.FalsePositiveChallenge))
                ) && 
                (
                    this.IntroducedDate == input.IntroducedDate ||
                    (this.IntroducedDate != null &&
                    this.IntroducedDate.Equals(input.IntroducedDate))
                ) && 
                (
                    this.ScanStartedDate == input.ScanStartedDate ||
                    (this.ScanStartedDate != null &&
                    this.ScanStartedDate.Equals(input.ScanStartedDate))
                ) && 
                (
                    this.ScanCompletedDate == input.ScanCompletedDate ||
                    (this.ScanCompletedDate != null &&
                    this.ScanCompletedDate.Equals(input.ScanCompletedDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.BugSubmitted == input.BugSubmitted ||
                    (this.BugSubmitted != null &&
                    this.BugSubmitted.Equals(input.BugSubmitted))
                ) && 
                (
                    this.BugLink == input.BugLink ||
                    (this.BugLink != null &&
                    this.BugLink.Equals(input.BugLink))
                ) && 
                (
                    this.AuditPendingSuppression == input.AuditPendingSuppression ||
                    (this.AuditPendingSuppression != null &&
                    this.AuditPendingSuppression.Equals(input.AuditPendingSuppression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.Fisma != null)
                    hashCode = hashCode * 59 + this.Fisma.GetHashCode();
                if (this.SeverityString != null)
                    hashCode = hashCode * 59 + this.SeverityString.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Kingdom != null)
                    hashCode = hashCode * 59 + this.Kingdom.GetHashCode();
                if (this.Owasp2004 != null)
                    hashCode = hashCode * 59 + this.Owasp2004.GetHashCode();
                if (this.Owasp2007 != null)
                    hashCode = hashCode * 59 + this.Owasp2007.GetHashCode();
                if (this.Owasp2010 != null)
                    hashCode = hashCode * 59 + this.Owasp2010.GetHashCode();
                if (this.Owasp2013 != null)
                    hashCode = hashCode * 59 + this.Owasp2013.GetHashCode();
                if (this.Owasp2017 != null)
                    hashCode = hashCode * 59 + this.Owasp2017.GetHashCode();
                if (this.Cwe != null)
                    hashCode = hashCode * 59 + this.Cwe.GetHashCode();
                if (this.Package != null)
                    hashCode = hashCode * 59 + this.Package.GetHashCode();
                if (this.PrimaryLocation != null)
                    hashCode = hashCode * 59 + this.PrimaryLocation.GetHashCode();
                if (this.VulnId != null)
                    hashCode = hashCode * 59 + this.VulnId.GetHashCode();
                if (this.AnalysisType != null)
                    hashCode = hashCode * 59 + this.AnalysisType.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.HasComments != null)
                    hashCode = hashCode * 59 + this.HasComments.GetHashCode();
                if (this.AssignedUser != null)
                    hashCode = hashCode * 59 + this.AssignedUser.GetHashCode();
                if (this.Scantype != null)
                    hashCode = hashCode * 59 + this.Scantype.GetHashCode();
                if (this.Subtype != null)
                    hashCode = hashCode * 59 + this.Subtype.GetHashCode();
                if (this.PrimaryLocationFull != null)
                    hashCode = hashCode * 59 + this.PrimaryLocationFull.GetHashCode();
                if (this.HasAttachments != null)
                    hashCode = hashCode * 59 + this.HasAttachments.GetHashCode();
                if (this.Pci11 != null)
                    hashCode = hashCode * 59 + this.Pci11.GetHashCode();
                if (this.Pci12 != null)
                    hashCode = hashCode * 59 + this.Pci12.GetHashCode();
                if (this.Pci2 != null)
                    hashCode = hashCode * 59 + this.Pci2.GetHashCode();
                if (this.Sans2009 != null)
                    hashCode = hashCode * 59 + this.Sans2009.GetHashCode();
                if (this.Sans2010 != null)
                    hashCode = hashCode * 59 + this.Sans2010.GetHashCode();
                if (this.Sans2011 != null)
                    hashCode = hashCode * 59 + this.Sans2011.GetHashCode();
                if (this.Wasc242 != null)
                    hashCode = hashCode * 59 + this.Wasc242.GetHashCode();
                if (this.IsSuppressed != null)
                    hashCode = hashCode * 59 + this.IsSuppressed.GetHashCode();
                if (this.ScanId != null)
                    hashCode = hashCode * 59 + this.ScanId.GetHashCode();
                if (this.Pci3 != null)
                    hashCode = hashCode * 59 + this.Pci3.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.AuditPendingAuditorStatus != null)
                    hashCode = hashCode * 59 + this.AuditPendingAuditorStatus.GetHashCode();
                if (this.AuditorStatus != null)
                    hashCode = hashCode * 59 + this.AuditorStatus.GetHashCode();
                if (this.CheckId != null)
                    hashCode = hashCode * 59 + this.CheckId.GetHashCode();
                if (this.ClosedDate != null)
                    hashCode = hashCode * 59 + this.ClosedDate.GetHashCode();
                if (this.ClosedStatus != null)
                    hashCode = hashCode * 59 + this.ClosedStatus.GetHashCode();
                if (this.DeveloperStatus != null)
                    hashCode = hashCode * 59 + this.DeveloperStatus.GetHashCode();
                if (this.FalsePositiveChallenge != null)
                    hashCode = hashCode * 59 + this.FalsePositiveChallenge.GetHashCode();
                if (this.IntroducedDate != null)
                    hashCode = hashCode * 59 + this.IntroducedDate.GetHashCode();
                if (this.ScanStartedDate != null)
                    hashCode = hashCode * 59 + this.ScanStartedDate.GetHashCode();
                if (this.ScanCompletedDate != null)
                    hashCode = hashCode * 59 + this.ScanCompletedDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.BugSubmitted != null)
                    hashCode = hashCode * 59 + this.BugSubmitted.GetHashCode();
                if (this.BugLink != null)
                    hashCode = hashCode * 59 + this.BugLink.GetHashCode();
                if (this.AuditPendingSuppression != null)
                    hashCode = hashCode * 59 + this.AuditPendingSuppression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
