/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Scan
    /// </summary>
    [DataContract]
    public partial class Scan :  IEquatable<Scan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Scan" /> class.
        /// </summary>
        /// <param name="ApplicationId">The application id.</param>
        /// <param name="ReleaseId">The release id.</param>
        /// <param name="ScanId">The scan id.</param>
        /// <param name="ScanTypeId">The scan type id.</param>
        /// <param name="ScanType">The scan type.</param>
        /// <param name="AssessmentTypeId">The assessment type id.</param>
        /// <param name="AnalysisStatusTypeId">The analysis status type id.</param>
        /// <param name="AnalysisStatusType">The analysis status type.</param>
        /// <param name="StartedDateTime">The scan started date time.</param>
        /// <param name="CompletedDateTime">The scan completed date time.</param>
        /// <param name="TotalIssues">Total number of issues.</param>
        /// <param name="StarRating">The star rating.</param>
        /// <param name="Notes">Scan notes.</param>
        /// <param name="IsFalsePositiveChallenge">Indicates if the scan is a false positive challenge.</param>
        /// <param name="IsRemediationScan">Indicates if the scan is a remediation scan.</param>
        /// <param name="EntitlementId">The entitlement id used for the given scan.</param>
        /// <param name="EntitlementUnitsConsumed">The number of entitlement units used for the given scan.</param>
        /// <param name="IsSubscriptionEntitlement">Indicates if the entitlement used for the given scan is a subscription entitlement.</param>
        /// <param name="PauseDetails">The details for each time the scan has been paused/resumed..</param>
        /// <param name="CancelReason">Cancel Reason.</param>
        public Scan(int? ApplicationId = default(int?), int? ReleaseId = default(int?), int? ScanId = default(int?), int? ScanTypeId = default(int?), string ScanType = default(string), int? AssessmentTypeId = default(int?), int? AnalysisStatusTypeId = default(int?), string AnalysisStatusType = default(string), DateTime? StartedDateTime = default(DateTime?), DateTime? CompletedDateTime = default(DateTime?), int? TotalIssues = default(int?), int? StarRating = default(int?), string Notes = default(string), bool? IsFalsePositiveChallenge = default(bool?), bool? IsRemediationScan = default(bool?), int? EntitlementId = default(int?), int? EntitlementUnitsConsumed = default(int?), bool? IsSubscriptionEntitlement = default(bool?), List<ScanPauseDetail> PauseDetails = default(List<ScanPauseDetail>), string CancelReason = default(string))
        {
            this.ApplicationId = ApplicationId;
            this.ReleaseId = ReleaseId;
            this.ScanId = ScanId;
            this.ScanTypeId = ScanTypeId;
            this.ScanType = ScanType;
            this.AssessmentTypeId = AssessmentTypeId;
            this.AnalysisStatusTypeId = AnalysisStatusTypeId;
            this.AnalysisStatusType = AnalysisStatusType;
            this.StartedDateTime = StartedDateTime;
            this.CompletedDateTime = CompletedDateTime;
            this.TotalIssues = TotalIssues;
            this.StarRating = StarRating;
            this.Notes = Notes;
            this.IsFalsePositiveChallenge = IsFalsePositiveChallenge;
            this.IsRemediationScan = IsRemediationScan;
            this.EntitlementId = EntitlementId;
            this.EntitlementUnitsConsumed = EntitlementUnitsConsumed;
            this.IsSubscriptionEntitlement = IsSubscriptionEntitlement;
            this.PauseDetails = PauseDetails;
            this.CancelReason = CancelReason;
        }
        
        /// <summary>
        /// The application id
        /// </summary>
        /// <value>The application id</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int? ApplicationId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// The scan id
        /// </summary>
        /// <value>The scan id</value>
        [DataMember(Name="scanId", EmitDefaultValue=false)]
        public int? ScanId { get; set; }

        /// <summary>
        /// The scan type id
        /// </summary>
        /// <value>The scan type id</value>
        [DataMember(Name="scanTypeId", EmitDefaultValue=false)]
        public int? ScanTypeId { get; set; }

        /// <summary>
        /// The scan type
        /// </summary>
        /// <value>The scan type</value>
        [DataMember(Name="scanType", EmitDefaultValue=false)]
        public string ScanType { get; set; }

        /// <summary>
        /// The assessment type id
        /// </summary>
        /// <value>The assessment type id</value>
        [DataMember(Name="assessmentTypeId", EmitDefaultValue=false)]
        public int? AssessmentTypeId { get; set; }

        /// <summary>
        /// The analysis status type id
        /// </summary>
        /// <value>The analysis status type id</value>
        [DataMember(Name="analysisStatusTypeId", EmitDefaultValue=false)]
        public int? AnalysisStatusTypeId { get; set; }

        /// <summary>
        /// The analysis status type
        /// </summary>
        /// <value>The analysis status type</value>
        [DataMember(Name="analysisStatusType", EmitDefaultValue=false)]
        public string AnalysisStatusType { get; set; }

        /// <summary>
        /// The scan started date time
        /// </summary>
        /// <value>The scan started date time</value>
        [DataMember(Name="startedDateTime", EmitDefaultValue=false)]
        public DateTime? StartedDateTime { get; set; }

        /// <summary>
        /// The scan completed date time
        /// </summary>
        /// <value>The scan completed date time</value>
        [DataMember(Name="completedDateTime", EmitDefaultValue=false)]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// Total number of issues
        /// </summary>
        /// <value>Total number of issues</value>
        [DataMember(Name="totalIssues", EmitDefaultValue=false)]
        public int? TotalIssues { get; set; }

        /// <summary>
        /// The star rating
        /// </summary>
        /// <value>The star rating</value>
        [DataMember(Name="starRating", EmitDefaultValue=false)]
        public int? StarRating { get; set; }

        /// <summary>
        /// Scan notes
        /// </summary>
        /// <value>Scan notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Indicates if the scan is a false positive challenge
        /// </summary>
        /// <value>Indicates if the scan is a false positive challenge</value>
        [DataMember(Name="isFalsePositiveChallenge", EmitDefaultValue=false)]
        public bool? IsFalsePositiveChallenge { get; set; }

        /// <summary>
        /// Indicates if the scan is a remediation scan
        /// </summary>
        /// <value>Indicates if the scan is a remediation scan</value>
        [DataMember(Name="isRemediationScan", EmitDefaultValue=false)]
        public bool? IsRemediationScan { get; set; }

        /// <summary>
        /// The entitlement id used for the given scan
        /// </summary>
        /// <value>The entitlement id used for the given scan</value>
        [DataMember(Name="entitlementId", EmitDefaultValue=false)]
        public int? EntitlementId { get; set; }

        /// <summary>
        /// The number of entitlement units used for the given scan
        /// </summary>
        /// <value>The number of entitlement units used for the given scan</value>
        [DataMember(Name="entitlementUnitsConsumed", EmitDefaultValue=false)]
        public int? EntitlementUnitsConsumed { get; set; }

        /// <summary>
        /// Indicates if the entitlement used for the given scan is a subscription entitlement
        /// </summary>
        /// <value>Indicates if the entitlement used for the given scan is a subscription entitlement</value>
        [DataMember(Name="isSubscriptionEntitlement", EmitDefaultValue=false)]
        public bool? IsSubscriptionEntitlement { get; set; }

        /// <summary>
        /// The details for each time the scan has been paused/resumed.
        /// </summary>
        /// <value>The details for each time the scan has been paused/resumed.</value>
        [DataMember(Name="pauseDetails", EmitDefaultValue=false)]
        public List<ScanPauseDetail> PauseDetails { get; set; }

        /// <summary>
        /// Cancel Reason
        /// </summary>
        /// <value>Cancel Reason</value>
        [DataMember(Name="cancelReason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Scan {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  ScanId: ").Append(ScanId).Append("\n");
            sb.Append("  ScanTypeId: ").Append(ScanTypeId).Append("\n");
            sb.Append("  ScanType: ").Append(ScanType).Append("\n");
            sb.Append("  AssessmentTypeId: ").Append(AssessmentTypeId).Append("\n");
            sb.Append("  AnalysisStatusTypeId: ").Append(AnalysisStatusTypeId).Append("\n");
            sb.Append("  AnalysisStatusType: ").Append(AnalysisStatusType).Append("\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  CompletedDateTime: ").Append(CompletedDateTime).Append("\n");
            sb.Append("  TotalIssues: ").Append(TotalIssues).Append("\n");
            sb.Append("  StarRating: ").Append(StarRating).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  IsFalsePositiveChallenge: ").Append(IsFalsePositiveChallenge).Append("\n");
            sb.Append("  IsRemediationScan: ").Append(IsRemediationScan).Append("\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("  EntitlementUnitsConsumed: ").Append(EntitlementUnitsConsumed).Append("\n");
            sb.Append("  IsSubscriptionEntitlement: ").Append(IsSubscriptionEntitlement).Append("\n");
            sb.Append("  PauseDetails: ").Append(PauseDetails).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scan);
        }

        /// <summary>
        /// Returns true if Scan instances are equal
        /// </summary>
        /// <param name="input">Instance of Scan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.ScanId == input.ScanId ||
                    (this.ScanId != null &&
                    this.ScanId.Equals(input.ScanId))
                ) && 
                (
                    this.ScanTypeId == input.ScanTypeId ||
                    (this.ScanTypeId != null &&
                    this.ScanTypeId.Equals(input.ScanTypeId))
                ) && 
                (
                    this.ScanType == input.ScanType ||
                    (this.ScanType != null &&
                    this.ScanType.Equals(input.ScanType))
                ) && 
                (
                    this.AssessmentTypeId == input.AssessmentTypeId ||
                    (this.AssessmentTypeId != null &&
                    this.AssessmentTypeId.Equals(input.AssessmentTypeId))
                ) && 
                (
                    this.AnalysisStatusTypeId == input.AnalysisStatusTypeId ||
                    (this.AnalysisStatusTypeId != null &&
                    this.AnalysisStatusTypeId.Equals(input.AnalysisStatusTypeId))
                ) && 
                (
                    this.AnalysisStatusType == input.AnalysisStatusType ||
                    (this.AnalysisStatusType != null &&
                    this.AnalysisStatusType.Equals(input.AnalysisStatusType))
                ) && 
                (
                    this.StartedDateTime == input.StartedDateTime ||
                    (this.StartedDateTime != null &&
                    this.StartedDateTime.Equals(input.StartedDateTime))
                ) && 
                (
                    this.CompletedDateTime == input.CompletedDateTime ||
                    (this.CompletedDateTime != null &&
                    this.CompletedDateTime.Equals(input.CompletedDateTime))
                ) && 
                (
                    this.TotalIssues == input.TotalIssues ||
                    (this.TotalIssues != null &&
                    this.TotalIssues.Equals(input.TotalIssues))
                ) && 
                (
                    this.StarRating == input.StarRating ||
                    (this.StarRating != null &&
                    this.StarRating.Equals(input.StarRating))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.IsFalsePositiveChallenge == input.IsFalsePositiveChallenge ||
                    (this.IsFalsePositiveChallenge != null &&
                    this.IsFalsePositiveChallenge.Equals(input.IsFalsePositiveChallenge))
                ) && 
                (
                    this.IsRemediationScan == input.IsRemediationScan ||
                    (this.IsRemediationScan != null &&
                    this.IsRemediationScan.Equals(input.IsRemediationScan))
                ) && 
                (
                    this.EntitlementId == input.EntitlementId ||
                    (this.EntitlementId != null &&
                    this.EntitlementId.Equals(input.EntitlementId))
                ) && 
                (
                    this.EntitlementUnitsConsumed == input.EntitlementUnitsConsumed ||
                    (this.EntitlementUnitsConsumed != null &&
                    this.EntitlementUnitsConsumed.Equals(input.EntitlementUnitsConsumed))
                ) && 
                (
                    this.IsSubscriptionEntitlement == input.IsSubscriptionEntitlement ||
                    (this.IsSubscriptionEntitlement != null &&
                    this.IsSubscriptionEntitlement.Equals(input.IsSubscriptionEntitlement))
                ) && 
                (
                    this.PauseDetails == input.PauseDetails ||
                    this.PauseDetails != null &&
                    this.PauseDetails.SequenceEqual(input.PauseDetails)
                ) && 
                (
                    this.CancelReason == input.CancelReason ||
                    (this.CancelReason != null &&
                    this.CancelReason.Equals(input.CancelReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.ScanId != null)
                    hashCode = hashCode * 59 + this.ScanId.GetHashCode();
                if (this.ScanTypeId != null)
                    hashCode = hashCode * 59 + this.ScanTypeId.GetHashCode();
                if (this.ScanType != null)
                    hashCode = hashCode * 59 + this.ScanType.GetHashCode();
                if (this.AssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.AssessmentTypeId.GetHashCode();
                if (this.AnalysisStatusTypeId != null)
                    hashCode = hashCode * 59 + this.AnalysisStatusTypeId.GetHashCode();
                if (this.AnalysisStatusType != null)
                    hashCode = hashCode * 59 + this.AnalysisStatusType.GetHashCode();
                if (this.StartedDateTime != null)
                    hashCode = hashCode * 59 + this.StartedDateTime.GetHashCode();
                if (this.CompletedDateTime != null)
                    hashCode = hashCode * 59 + this.CompletedDateTime.GetHashCode();
                if (this.TotalIssues != null)
                    hashCode = hashCode * 59 + this.TotalIssues.GetHashCode();
                if (this.StarRating != null)
                    hashCode = hashCode * 59 + this.StarRating.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.IsFalsePositiveChallenge != null)
                    hashCode = hashCode * 59 + this.IsFalsePositiveChallenge.GetHashCode();
                if (this.IsRemediationScan != null)
                    hashCode = hashCode * 59 + this.IsRemediationScan.GetHashCode();
                if (this.EntitlementId != null)
                    hashCode = hashCode * 59 + this.EntitlementId.GetHashCode();
                if (this.EntitlementUnitsConsumed != null)
                    hashCode = hashCode * 59 + this.EntitlementUnitsConsumed.GetHashCode();
                if (this.IsSubscriptionEntitlement != null)
                    hashCode = hashCode * 59 + this.IsSubscriptionEntitlement.GetHashCode();
                if (this.PauseDetails != null)
                    hashCode = hashCode * 59 + this.PauseDetails.GetHashCode();
                if (this.CancelReason != null)
                    hashCode = hashCode * 59 + this.CancelReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
