/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Training Detail
    /// </summary>
    [DataContract]
    public partial class TrainingDetail :  IEquatable<TrainingDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrainingDetail" /> class.
        /// </summary>
        /// <param name="UserName">The username.</param>
        /// <param name="UserRole">The user role.</param>
        /// <param name="CourseName">The course name.</param>
        /// <param name="CourseCategory">The course category.</param>
        /// <param name="Status">The status.</param>
        /// <param name="LastAttemptedDate">The last attempted date.</param>
        /// <param name="PassedDate">The passed date.</param>
        public TrainingDetail(string UserName = default(string), string UserRole = default(string), string CourseName = default(string), string CourseCategory = default(string), string Status = default(string), string LastAttemptedDate = default(string), string PassedDate = default(string))
        {
            this.UserName = UserName;
            this.UserRole = UserRole;
            this.CourseName = CourseName;
            this.CourseCategory = CourseCategory;
            this.Status = Status;
            this.LastAttemptedDate = LastAttemptedDate;
            this.PassedDate = PassedDate;
        }
        
        /// <summary>
        /// The username
        /// </summary>
        /// <value>The username</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The user role
        /// </summary>
        /// <value>The user role</value>
        [DataMember(Name="userRole", EmitDefaultValue=false)]
        public string UserRole { get; set; }

        /// <summary>
        /// The course name
        /// </summary>
        /// <value>The course name</value>
        [DataMember(Name="courseName", EmitDefaultValue=false)]
        public string CourseName { get; set; }

        /// <summary>
        /// The course category
        /// </summary>
        /// <value>The course category</value>
        [DataMember(Name="courseCategory", EmitDefaultValue=false)]
        public string CourseCategory { get; set; }

        /// <summary>
        /// The status
        /// </summary>
        /// <value>The status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The last attempted date
        /// </summary>
        /// <value>The last attempted date</value>
        [DataMember(Name="lastAttemptedDate", EmitDefaultValue=false)]
        public string LastAttemptedDate { get; set; }

        /// <summary>
        /// The passed date
        /// </summary>
        /// <value>The passed date</value>
        [DataMember(Name="passedDate", EmitDefaultValue=false)]
        public string PassedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrainingDetail {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("  CourseName: ").Append(CourseName).Append("\n");
            sb.Append("  CourseCategory: ").Append(CourseCategory).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastAttemptedDate: ").Append(LastAttemptedDate).Append("\n");
            sb.Append("  PassedDate: ").Append(PassedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrainingDetail);
        }

        /// <summary>
        /// Returns true if TrainingDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TrainingDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrainingDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.UserRole == input.UserRole ||
                    (this.UserRole != null &&
                    this.UserRole.Equals(input.UserRole))
                ) && 
                (
                    this.CourseName == input.CourseName ||
                    (this.CourseName != null &&
                    this.CourseName.Equals(input.CourseName))
                ) && 
                (
                    this.CourseCategory == input.CourseCategory ||
                    (this.CourseCategory != null &&
                    this.CourseCategory.Equals(input.CourseCategory))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.LastAttemptedDate == input.LastAttemptedDate ||
                    (this.LastAttemptedDate != null &&
                    this.LastAttemptedDate.Equals(input.LastAttemptedDate))
                ) && 
                (
                    this.PassedDate == input.PassedDate ||
                    (this.PassedDate != null &&
                    this.PassedDate.Equals(input.PassedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.UserRole != null)
                    hashCode = hashCode * 59 + this.UserRole.GetHashCode();
                if (this.CourseName != null)
                    hashCode = hashCode * 59 + this.CourseName.GetHashCode();
                if (this.CourseCategory != null)
                    hashCode = hashCode * 59 + this.CourseCategory.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.LastAttemptedDate != null)
                    hashCode = hashCode * 59 + this.LastAttemptedDate.GetHashCode();
                if (this.PassedDate != null)
                    hashCode = hashCode * 59 + this.PassedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
