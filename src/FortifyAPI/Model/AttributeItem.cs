/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Attribute Item
    /// </summary>
    [DataContract]
    public partial class AttributeItem :  IEquatable<AttributeItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeItem" /> class.
        /// </summary>
        /// <param name="Id">The attribute id.</param>
        /// <param name="Name">The attrrbiute name.</param>
        /// <param name="AttributeTypeId">The attribute type id.</param>
        /// <param name="AttributeType">The attribute type.</param>
        /// <param name="AttributeDataTypeId">The attribute data type id.</param>
        /// <param name="AttributeDataType">The attribute data type.</param>
        /// <param name="IsRequired">Indicates if the attribute is required.</param>
        /// <param name="IsRestricted">Indicates if the attribute is editable only by Security Leads.</param>
        /// <param name="PicklistValues">A list of attribute item values.</param>
        public AttributeItem(int? Id = default(int?), string Name = default(string), int? AttributeTypeId = default(int?), string AttributeType = default(string), int? AttributeDataTypeId = default(int?), string AttributeDataType = default(string), bool? IsRequired = default(bool?), bool? IsRestricted = default(bool?), List<AttributeItemValue> PicklistValues = default(List<AttributeItemValue>))
        {
            this.Id = Id;
            this.Name = Name;
            this.AttributeTypeId = AttributeTypeId;
            this.AttributeType = AttributeType;
            this.AttributeDataTypeId = AttributeDataTypeId;
            this.AttributeDataType = AttributeDataType;
            this.IsRequired = IsRequired;
            this.IsRestricted = IsRestricted;
            this.PicklistValues = PicklistValues;
        }
        
        /// <summary>
        /// The attribute id
        /// </summary>
        /// <value>The attribute id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The attrrbiute name
        /// </summary>
        /// <value>The attrrbiute name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The attribute type id
        /// </summary>
        /// <value>The attribute type id</value>
        [DataMember(Name="attributeTypeId", EmitDefaultValue=false)]
        public int? AttributeTypeId { get; set; }

        /// <summary>
        /// The attribute type
        /// </summary>
        /// <value>The attribute type</value>
        [DataMember(Name="attributeType", EmitDefaultValue=false)]
        public string AttributeType { get; set; }

        /// <summary>
        /// The attribute data type id
        /// </summary>
        /// <value>The attribute data type id</value>
        [DataMember(Name="attributeDataTypeId", EmitDefaultValue=false)]
        public int? AttributeDataTypeId { get; set; }

        /// <summary>
        /// The attribute data type
        /// </summary>
        /// <value>The attribute data type</value>
        [DataMember(Name="attributeDataType", EmitDefaultValue=false)]
        public string AttributeDataType { get; set; }

        /// <summary>
        /// Indicates if the attribute is required
        /// </summary>
        /// <value>Indicates if the attribute is required</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Indicates if the attribute is editable only by Security Leads
        /// </summary>
        /// <value>Indicates if the attribute is editable only by Security Leads</value>
        [DataMember(Name="isRestricted", EmitDefaultValue=false)]
        public bool? IsRestricted { get; set; }

        /// <summary>
        /// A list of attribute item values
        /// </summary>
        /// <value>A list of attribute item values</value>
        [DataMember(Name="picklistValues", EmitDefaultValue=false)]
        public List<AttributeItemValue> PicklistValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AttributeTypeId: ").Append(AttributeTypeId).Append("\n");
            sb.Append("  AttributeType: ").Append(AttributeType).Append("\n");
            sb.Append("  AttributeDataTypeId: ").Append(AttributeDataTypeId).Append("\n");
            sb.Append("  AttributeDataType: ").Append(AttributeDataType).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsRestricted: ").Append(IsRestricted).Append("\n");
            sb.Append("  PicklistValues: ").Append(PicklistValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeItem);
        }

        /// <summary>
        /// Returns true if AttributeItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.AttributeTypeId == input.AttributeTypeId ||
                    (this.AttributeTypeId != null &&
                    this.AttributeTypeId.Equals(input.AttributeTypeId))
                ) && 
                (
                    this.AttributeType == input.AttributeType ||
                    (this.AttributeType != null &&
                    this.AttributeType.Equals(input.AttributeType))
                ) && 
                (
                    this.AttributeDataTypeId == input.AttributeDataTypeId ||
                    (this.AttributeDataTypeId != null &&
                    this.AttributeDataTypeId.Equals(input.AttributeDataTypeId))
                ) && 
                (
                    this.AttributeDataType == input.AttributeDataType ||
                    (this.AttributeDataType != null &&
                    this.AttributeDataType.Equals(input.AttributeDataType))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsRestricted == input.IsRestricted ||
                    (this.IsRestricted != null &&
                    this.IsRestricted.Equals(input.IsRestricted))
                ) && 
                (
                    this.PicklistValues == input.PicklistValues ||
                    this.PicklistValues != null &&
                    this.PicklistValues.SequenceEqual(input.PicklistValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.AttributeTypeId != null)
                    hashCode = hashCode * 59 + this.AttributeTypeId.GetHashCode();
                if (this.AttributeType != null)
                    hashCode = hashCode * 59 + this.AttributeType.GetHashCode();
                if (this.AttributeDataTypeId != null)
                    hashCode = hashCode * 59 + this.AttributeDataTypeId.GetHashCode();
                if (this.AttributeDataType != null)
                    hashCode = hashCode * 59 + this.AttributeDataType.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IsRestricted != null)
                    hashCode = hashCode * 59 + this.IsRestricted.GetHashCode();
                if (this.PicklistValues != null)
                    hashCode = hashCode * 59 + this.PicklistValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
