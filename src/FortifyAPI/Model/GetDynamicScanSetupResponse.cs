/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// GetDynamicScanSetupResponse
    /// </summary>
    [DataContract]
    public partial class GetDynamicScanSetupResponse :  IEquatable<GetDynamicScanSetupResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of environment the server is running in
        /// </summary>
        /// <value>Type of environment the server is running in</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DynamicScanEnvironmentFacingTypeEnum
        {
            
            /// <summary>
            /// Enum Internal for value: Internal
            /// </summary>
            [EnumMember(Value = "Internal")]
            Internal = 1,
            
            /// <summary>
            /// Enum External for value: External
            /// </summary>
            [EnumMember(Value = "External")]
            External = 2
        }

        /// <summary>
        /// Type of environment the server is running in
        /// </summary>
        /// <value>Type of environment the server is running in</value>
        [DataMember(Name="dynamicScanEnvironmentFacingType", EmitDefaultValue=false)]
        public DynamicScanEnvironmentFacingTypeEnum DynamicScanEnvironmentFacingType { get; set; }
        /// <summary>
        /// Type of authentication required
        /// </summary>
        /// <value>Type of authentication required</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DynamicScanAuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum NoAuthentication for value: NoAuthentication
            /// </summary>
            [EnumMember(Value = "NoAuthentication")]
            NoAuthentication = 1,
            
            /// <summary>
            /// Enum GenerateUniqueAuthentication for value: GenerateUniqueAuthentication
            /// </summary>
            [EnumMember(Value = "GenerateUniqueAuthentication")]
            GenerateUniqueAuthentication = 2,
            
            /// <summary>
            /// Enum AuthenticationRequired for value: AuthenticationRequired
            /// </summary>
            [EnumMember(Value = "AuthenticationRequired")]
            AuthenticationRequired = 3
        }

        /// <summary>
        /// Type of authentication required
        /// </summary>
        /// <value>Type of authentication required</value>
        [DataMember(Name="dynamicScanAuthenticationType", EmitDefaultValue=false)]
        public DynamicScanAuthenticationTypeEnum DynamicScanAuthenticationType { get; set; }
        /// <summary>
        /// For scans that are to be run at regular intervals, this specifies how often
        /// </summary>
        /// <value>For scans that are to be run at regular intervals, this specifies how often</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RepeatScheduleTypeEnum
        {
            
            /// <summary>
            /// Enum NoRepeat for value: NoRepeat
            /// </summary>
            [EnumMember(Value = "NoRepeat")]
            NoRepeat = 1,
            
            /// <summary>
            /// Enum Biweekly for value: Biweekly
            /// </summary>
            [EnumMember(Value = "Biweekly")]
            Biweekly = 2,
            
            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            [EnumMember(Value = "Monthly")]
            Monthly = 3,
            
            /// <summary>
            /// Enum Bimonthly for value: Bimonthly
            /// </summary>
            [EnumMember(Value = "Bimonthly")]
            Bimonthly = 4,
            
            /// <summary>
            /// Enum Quarterly for value: Quarterly
            /// </summary>
            [EnumMember(Value = "Quarterly")]
            Quarterly = 5,
            
            /// <summary>
            /// Enum Triannually for value: Triannually
            /// </summary>
            [EnumMember(Value = "Triannually")]
            Triannually = 6,
            
            /// <summary>
            /// Enum Semiannually for value: Semiannually
            /// </summary>
            [EnumMember(Value = "Semiannually")]
            Semiannually = 7,
            
            /// <summary>
            /// Enum Annually for value: Annually
            /// </summary>
            [EnumMember(Value = "Annually")]
            Annually = 8
        }

        /// <summary>
        /// For scans that are to be run at regular intervals, this specifies how often
        /// </summary>
        /// <value>For scans that are to be run at regular intervals, this specifies how often</value>
        [DataMember(Name="repeatScheduleType", EmitDefaultValue=false)]
        public RepeatScheduleTypeEnum? RepeatScheduleType { get; set; }
        /// <summary>
        /// The web service type
        /// </summary>
        /// <value>The web service type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebServiceTypeEnum
        {
            
            /// <summary>
            /// Enum SOAP for value: SOAP
            /// </summary>
            [EnumMember(Value = "SOAP")]
            SOAP = 1,
            
            /// <summary>
            /// Enum REST for value: REST
            /// </summary>
            [EnumMember(Value = "REST")]
            REST = 2
        }

        /// <summary>
        /// The web service type
        /// </summary>
        /// <value>The web service type</value>
        [DataMember(Name="webServiceType", EmitDefaultValue=false)]
        public WebServiceTypeEnum? WebServiceType { get; set; }
        /// <summary>
        /// The entitlement frequency type
        /// </summary>
        /// <value>The entitlement frequency type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntitlementFrequencyTypeEnum
        {
            
            /// <summary>
            /// Enum SingleScan for value: SingleScan
            /// </summary>
            [EnumMember(Value = "SingleScan")]
            SingleScan = 1,
            
            /// <summary>
            /// Enum Subscription for value: Subscription
            /// </summary>
            [EnumMember(Value = "Subscription")]
            Subscription = 2
        }

        /// <summary>
        /// The entitlement frequency type
        /// </summary>
        /// <value>The entitlement frequency type</value>
        [DataMember(Name="entitlementFrequencyType", EmitDefaultValue=false)]
        public EntitlementFrequencyTypeEnum EntitlementFrequencyType { get; set; }
        /// <summary>
        /// The user agent type
        /// </summary>
        /// <value>The user agent type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UserAgentTypeEnum
        {
            
            /// <summary>
            /// Enum Desktop for value: Desktop
            /// </summary>
            [EnumMember(Value = "Desktop")]
            Desktop = 1,
            
            /// <summary>
            /// Enum Mobile for value: Mobile
            /// </summary>
            [EnumMember(Value = "Mobile")]
            Mobile = 2
        }

        /// <summary>
        /// The user agent type
        /// </summary>
        /// <value>The user agent type</value>
        [DataMember(Name="userAgentType", EmitDefaultValue=false)]
        public UserAgentTypeEnum? UserAgentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDynamicScanSetupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDynamicScanSetupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDynamicScanSetupResponse" /> class.
        /// </summary>
        /// <param name="GeoLocationId">Release Id of the scan to start (required).</param>
        /// <param name="DynamicScanEnvironmentFacingType">Type of environment the server is running in (required).</param>
        /// <param name="Exclusions">Deprecated.</param>
        /// <param name="ExclusionsList">List of exclusions..</param>
        /// <param name="DynamicScanAuthenticationType">Type of authentication required (required).</param>
        /// <param name="PrimaryUserName">Primary username to login with.</param>
        /// <param name="PrimaryUserPassword">Primary account password to login with.</param>
        /// <param name="SecondaryUserName">Secondary username to login with.</param>
        /// <param name="SecondaryUserPassword">Secondary account password to login with.</param>
        /// <param name="OtherUserName">Other username needed to operate the site.</param>
        /// <param name="OtherUserPassword">Other password needed to operate the site.</param>
        /// <param name="VpnRequired">True if VPN connection is required to scan the site.</param>
        /// <param name="VpnUserName">VPN account username.</param>
        /// <param name="VpnPassword">VPN account password.</param>
        /// <param name="MultiFactorAuth">True if client requests a call prior to assessment.</param>
        /// <param name="MultiFactorAuthText">All details required for multi-factor authentication.</param>
        /// <param name="Notes">Additional notes that will help with running a scan.</param>
        /// <param name="RequestCall">True if client requests a call prior to assessment.</param>
        /// <param name="WhitelistRequired">Deprecated.</param>
        /// <param name="WhitelistText">Deprecated.</param>
        /// <param name="DynamicSiteURL">The dynamic site url.</param>
        /// <param name="TimeZone">String value of timezone (required).</param>
        /// <param name="Blockout">Blockout days list. All days and hours will default to checked unless otherwise specified..</param>
        /// <param name="RepeatScheduleType">For scans that are to be run at regular intervals, this specifies how often.</param>
        /// <param name="AssessmentTypeId">Assessment type identifier of the scan.</param>
        /// <param name="AllowFormSubmissions">True to allow form submissions (default), otherwise false...</param>
        /// <param name="AllowSameHostRedirects">True to allow HTTP (:80) and HTTPS (:443) of the specified scan host (default), otherwise false..</param>
        /// <param name="RestrictToDirectoryAndSubdirectories">True to restrict to directory and subdirectories, otherwise false.</param>
        /// <param name="GenerateWAFVirtualPatch">True to generate WAF virtual patch, otherwise false.</param>
        /// <param name="IsWebService">True if this a web service scan.</param>
        /// <param name="WebServiceType">The web service type.</param>
        /// <param name="WebServiceDescriptorURL">WSDL Location URL.</param>
        /// <param name="WebServiceUserName">The web service username.</param>
        /// <param name="WebServicePassword">The web service password.</param>
        /// <param name="WebServiceAPIKey">The web service API key.</param>
        /// <param name="WebServiceAPIPassword">The web service API password.</param>
        /// <param name="EntitlementFrequencyType">The entitlement frequency type (required).</param>
        /// <param name="UserAgentType">The user agent type.</param>
        public GetDynamicScanSetupResponse(int? GeoLocationId = default(int?), DynamicScanEnvironmentFacingTypeEnum DynamicScanEnvironmentFacingType = default(DynamicScanEnvironmentFacingTypeEnum), string Exclusions = default(string), List<Exclusion> ExclusionsList = default(List<Exclusion>), DynamicScanAuthenticationTypeEnum DynamicScanAuthenticationType = default(DynamicScanAuthenticationTypeEnum), string PrimaryUserName = default(string), string PrimaryUserPassword = default(string), string SecondaryUserName = default(string), string SecondaryUserPassword = default(string), string OtherUserName = default(string), string OtherUserPassword = default(string), bool? VpnRequired = default(bool?), string VpnUserName = default(string), string VpnPassword = default(string), bool? MultiFactorAuth = default(bool?), string MultiFactorAuthText = default(string), string Notes = default(string), bool? RequestCall = default(bool?), bool? WhitelistRequired = default(bool?), string WhitelistText = default(string), string DynamicSiteURL = default(string), string TimeZone = default(string), List<BlackoutDay> Blockout = default(List<BlackoutDay>), RepeatScheduleTypeEnum? RepeatScheduleType = default(RepeatScheduleTypeEnum?), int? AssessmentTypeId = default(int?), bool? AllowFormSubmissions = default(bool?), bool? AllowSameHostRedirects = default(bool?), bool? RestrictToDirectoryAndSubdirectories = default(bool?), bool? GenerateWAFVirtualPatch = default(bool?), bool? IsWebService = default(bool?), WebServiceTypeEnum? WebServiceType = default(WebServiceTypeEnum?), string WebServiceDescriptorURL = default(string), string WebServiceUserName = default(string), string WebServicePassword = default(string), string WebServiceAPIKey = default(string), string WebServiceAPIPassword = default(string), EntitlementFrequencyTypeEnum EntitlementFrequencyType = default(EntitlementFrequencyTypeEnum), UserAgentTypeEnum? UserAgentType = default(UserAgentTypeEnum?))
        {
            // to ensure "GeoLocationId" is required (not null)
            if (GeoLocationId == null)
            {
                throw new InvalidDataException("GeoLocationId is a required property for GetDynamicScanSetupResponse and cannot be null");
            }
            else
            {
                this.GeoLocationId = GeoLocationId;
            }
            // to ensure "DynamicScanEnvironmentFacingType" is required (not null)
            if (DynamicScanEnvironmentFacingType == null)
            {
                throw new InvalidDataException("DynamicScanEnvironmentFacingType is a required property for GetDynamicScanSetupResponse and cannot be null");
            }
            else
            {
                this.DynamicScanEnvironmentFacingType = DynamicScanEnvironmentFacingType;
            }
            // to ensure "DynamicScanAuthenticationType" is required (not null)
            if (DynamicScanAuthenticationType == null)
            {
                throw new InvalidDataException("DynamicScanAuthenticationType is a required property for GetDynamicScanSetupResponse and cannot be null");
            }
            else
            {
                this.DynamicScanAuthenticationType = DynamicScanAuthenticationType;
            }
            // to ensure "TimeZone" is required (not null)
            if (TimeZone == null)
            {
                throw new InvalidDataException("TimeZone is a required property for GetDynamicScanSetupResponse and cannot be null");
            }
            else
            {
                this.TimeZone = TimeZone;
            }
            // to ensure "EntitlementFrequencyType" is required (not null)
            if (EntitlementFrequencyType == null)
            {
                throw new InvalidDataException("EntitlementFrequencyType is a required property for GetDynamicScanSetupResponse and cannot be null");
            }
            else
            {
                this.EntitlementFrequencyType = EntitlementFrequencyType;
            }
            this.Exclusions = Exclusions;
            this.ExclusionsList = ExclusionsList;
            this.PrimaryUserName = PrimaryUserName;
            this.PrimaryUserPassword = PrimaryUserPassword;
            this.SecondaryUserName = SecondaryUserName;
            this.SecondaryUserPassword = SecondaryUserPassword;
            this.OtherUserName = OtherUserName;
            this.OtherUserPassword = OtherUserPassword;
            this.VpnRequired = VpnRequired;
            this.VpnUserName = VpnUserName;
            this.VpnPassword = VpnPassword;
            this.MultiFactorAuth = MultiFactorAuth;
            this.MultiFactorAuthText = MultiFactorAuthText;
            this.Notes = Notes;
            this.RequestCall = RequestCall;
            this.WhitelistRequired = WhitelistRequired;
            this.WhitelistText = WhitelistText;
            this.DynamicSiteURL = DynamicSiteURL;
            this.Blockout = Blockout;
            this.RepeatScheduleType = RepeatScheduleType;
            this.AssessmentTypeId = AssessmentTypeId;
            this.AllowFormSubmissions = AllowFormSubmissions;
            this.AllowSameHostRedirects = AllowSameHostRedirects;
            this.RestrictToDirectoryAndSubdirectories = RestrictToDirectoryAndSubdirectories;
            this.GenerateWAFVirtualPatch = GenerateWAFVirtualPatch;
            this.IsWebService = IsWebService;
            this.WebServiceType = WebServiceType;
            this.WebServiceDescriptorURL = WebServiceDescriptorURL;
            this.WebServiceUserName = WebServiceUserName;
            this.WebServicePassword = WebServicePassword;
            this.WebServiceAPIKey = WebServiceAPIKey;
            this.WebServiceAPIPassword = WebServiceAPIPassword;
            this.UserAgentType = UserAgentType;
        }
        
        /// <summary>
        /// Release Id of the scan to start
        /// </summary>
        /// <value>Release Id of the scan to start</value>
        [DataMember(Name="geoLocationId", EmitDefaultValue=false)]
        public int? GeoLocationId { get; set; }


        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name="exclusions", EmitDefaultValue=false)]
        public string Exclusions { get; set; }

        /// <summary>
        /// List of exclusions.
        /// </summary>
        /// <value>List of exclusions.</value>
        [DataMember(Name="exclusionsList", EmitDefaultValue=false)]
        public List<Exclusion> ExclusionsList { get; set; }


        /// <summary>
        /// Primary username to login with
        /// </summary>
        /// <value>Primary username to login with</value>
        [DataMember(Name="primaryUserName", EmitDefaultValue=false)]
        public string PrimaryUserName { get; set; }

        /// <summary>
        /// Primary account password to login with
        /// </summary>
        /// <value>Primary account password to login with</value>
        [DataMember(Name="primaryUserPassword", EmitDefaultValue=false)]
        public string PrimaryUserPassword { get; set; }

        /// <summary>
        /// Secondary username to login with
        /// </summary>
        /// <value>Secondary username to login with</value>
        [DataMember(Name="secondaryUserName", EmitDefaultValue=false)]
        public string SecondaryUserName { get; set; }

        /// <summary>
        /// Secondary account password to login with
        /// </summary>
        /// <value>Secondary account password to login with</value>
        [DataMember(Name="secondaryUserPassword", EmitDefaultValue=false)]
        public string SecondaryUserPassword { get; set; }

        /// <summary>
        /// Other username needed to operate the site
        /// </summary>
        /// <value>Other username needed to operate the site</value>
        [DataMember(Name="otherUserName", EmitDefaultValue=false)]
        public string OtherUserName { get; set; }

        /// <summary>
        /// Other password needed to operate the site
        /// </summary>
        /// <value>Other password needed to operate the site</value>
        [DataMember(Name="otherUserPassword", EmitDefaultValue=false)]
        public string OtherUserPassword { get; set; }

        /// <summary>
        /// True if VPN connection is required to scan the site
        /// </summary>
        /// <value>True if VPN connection is required to scan the site</value>
        [DataMember(Name="vpnRequired", EmitDefaultValue=false)]
        public bool? VpnRequired { get; set; }

        /// <summary>
        /// VPN account username
        /// </summary>
        /// <value>VPN account username</value>
        [DataMember(Name="vpnUserName", EmitDefaultValue=false)]
        public string VpnUserName { get; set; }

        /// <summary>
        /// VPN account password
        /// </summary>
        /// <value>VPN account password</value>
        [DataMember(Name="vpnPassword", EmitDefaultValue=false)]
        public string VpnPassword { get; set; }

        /// <summary>
        /// True if client requests a call prior to assessment
        /// </summary>
        /// <value>True if client requests a call prior to assessment</value>
        [DataMember(Name="multiFactorAuth", EmitDefaultValue=false)]
        public bool? MultiFactorAuth { get; set; }

        /// <summary>
        /// All details required for multi-factor authentication
        /// </summary>
        /// <value>All details required for multi-factor authentication</value>
        [DataMember(Name="multiFactorAuthText", EmitDefaultValue=false)]
        public string MultiFactorAuthText { get; set; }

        /// <summary>
        /// Additional notes that will help with running a scan
        /// </summary>
        /// <value>Additional notes that will help with running a scan</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// True if client requests a call prior to assessment
        /// </summary>
        /// <value>True if client requests a call prior to assessment</value>
        [DataMember(Name="requestCall", EmitDefaultValue=false)]
        public bool? RequestCall { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name="whitelistRequired", EmitDefaultValue=false)]
        public bool? WhitelistRequired { get; set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [DataMember(Name="whitelistText", EmitDefaultValue=false)]
        public string WhitelistText { get; set; }

        /// <summary>
        /// The dynamic site url
        /// </summary>
        /// <value>The dynamic site url</value>
        [DataMember(Name="dynamicSiteURL", EmitDefaultValue=false)]
        public string DynamicSiteURL { get; set; }

        /// <summary>
        /// String value of timezone
        /// </summary>
        /// <value>String value of timezone</value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Blockout days list. All days and hours will default to checked unless otherwise specified.
        /// </summary>
        /// <value>Blockout days list. All days and hours will default to checked unless otherwise specified.</value>
        [DataMember(Name="blockout", EmitDefaultValue=false)]
        public List<BlackoutDay> Blockout { get; set; }


        /// <summary>
        /// Assessment type identifier of the scan
        /// </summary>
        /// <value>Assessment type identifier of the scan</value>
        [DataMember(Name="assessmentTypeId", EmitDefaultValue=false)]
        public int? AssessmentTypeId { get; set; }

        /// <summary>
        /// True to allow form submissions (default), otherwise false..
        /// </summary>
        /// <value>True to allow form submissions (default), otherwise false..</value>
        [DataMember(Name="allowFormSubmissions", EmitDefaultValue=false)]
        public bool? AllowFormSubmissions { get; set; }

        /// <summary>
        /// True to allow HTTP (:80) and HTTPS (:443) of the specified scan host (default), otherwise false.
        /// </summary>
        /// <value>True to allow HTTP (:80) and HTTPS (:443) of the specified scan host (default), otherwise false.</value>
        [DataMember(Name="allowSameHostRedirects", EmitDefaultValue=false)]
        public bool? AllowSameHostRedirects { get; set; }

        /// <summary>
        /// True to restrict to directory and subdirectories, otherwise false
        /// </summary>
        /// <value>True to restrict to directory and subdirectories, otherwise false</value>
        [DataMember(Name="restrictToDirectoryAndSubdirectories", EmitDefaultValue=false)]
        public bool? RestrictToDirectoryAndSubdirectories { get; set; }

        /// <summary>
        /// True to generate WAF virtual patch, otherwise false
        /// </summary>
        /// <value>True to generate WAF virtual patch, otherwise false</value>
        [DataMember(Name="generateWAFVirtualPatch", EmitDefaultValue=false)]
        public bool? GenerateWAFVirtualPatch { get; set; }

        /// <summary>
        /// True if this a web service scan
        /// </summary>
        /// <value>True if this a web service scan</value>
        [DataMember(Name="isWebService", EmitDefaultValue=false)]
        public bool? IsWebService { get; set; }


        /// <summary>
        /// WSDL Location URL
        /// </summary>
        /// <value>WSDL Location URL</value>
        [DataMember(Name="webServiceDescriptorURL", EmitDefaultValue=false)]
        public string WebServiceDescriptorURL { get; set; }

        /// <summary>
        /// The web service username
        /// </summary>
        /// <value>The web service username</value>
        [DataMember(Name="webServiceUserName", EmitDefaultValue=false)]
        public string WebServiceUserName { get; set; }

        /// <summary>
        /// The web service password
        /// </summary>
        /// <value>The web service password</value>
        [DataMember(Name="webServicePassword", EmitDefaultValue=false)]
        public string WebServicePassword { get; set; }

        /// <summary>
        /// The web service API key
        /// </summary>
        /// <value>The web service API key</value>
        [DataMember(Name="webServiceAPIKey", EmitDefaultValue=false)]
        public string WebServiceAPIKey { get; set; }

        /// <summary>
        /// The web service API password
        /// </summary>
        /// <value>The web service API password</value>
        [DataMember(Name="webServiceAPIPassword", EmitDefaultValue=false)]
        public string WebServiceAPIPassword { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDynamicScanSetupResponse {\n");
            sb.Append("  GeoLocationId: ").Append(GeoLocationId).Append("\n");
            sb.Append("  DynamicScanEnvironmentFacingType: ").Append(DynamicScanEnvironmentFacingType).Append("\n");
            sb.Append("  Exclusions: ").Append(Exclusions).Append("\n");
            sb.Append("  ExclusionsList: ").Append(ExclusionsList).Append("\n");
            sb.Append("  DynamicScanAuthenticationType: ").Append(DynamicScanAuthenticationType).Append("\n");
            sb.Append("  PrimaryUserName: ").Append(PrimaryUserName).Append("\n");
            sb.Append("  PrimaryUserPassword: ").Append(PrimaryUserPassword).Append("\n");
            sb.Append("  SecondaryUserName: ").Append(SecondaryUserName).Append("\n");
            sb.Append("  SecondaryUserPassword: ").Append(SecondaryUserPassword).Append("\n");
            sb.Append("  OtherUserName: ").Append(OtherUserName).Append("\n");
            sb.Append("  OtherUserPassword: ").Append(OtherUserPassword).Append("\n");
            sb.Append("  VpnRequired: ").Append(VpnRequired).Append("\n");
            sb.Append("  VpnUserName: ").Append(VpnUserName).Append("\n");
            sb.Append("  VpnPassword: ").Append(VpnPassword).Append("\n");
            sb.Append("  MultiFactorAuth: ").Append(MultiFactorAuth).Append("\n");
            sb.Append("  MultiFactorAuthText: ").Append(MultiFactorAuthText).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  RequestCall: ").Append(RequestCall).Append("\n");
            sb.Append("  WhitelistRequired: ").Append(WhitelistRequired).Append("\n");
            sb.Append("  WhitelistText: ").Append(WhitelistText).Append("\n");
            sb.Append("  DynamicSiteURL: ").Append(DynamicSiteURL).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Blockout: ").Append(Blockout).Append("\n");
            sb.Append("  RepeatScheduleType: ").Append(RepeatScheduleType).Append("\n");
            sb.Append("  AssessmentTypeId: ").Append(AssessmentTypeId).Append("\n");
            sb.Append("  AllowFormSubmissions: ").Append(AllowFormSubmissions).Append("\n");
            sb.Append("  AllowSameHostRedirects: ").Append(AllowSameHostRedirects).Append("\n");
            sb.Append("  RestrictToDirectoryAndSubdirectories: ").Append(RestrictToDirectoryAndSubdirectories).Append("\n");
            sb.Append("  GenerateWAFVirtualPatch: ").Append(GenerateWAFVirtualPatch).Append("\n");
            sb.Append("  IsWebService: ").Append(IsWebService).Append("\n");
            sb.Append("  WebServiceType: ").Append(WebServiceType).Append("\n");
            sb.Append("  WebServiceDescriptorURL: ").Append(WebServiceDescriptorURL).Append("\n");
            sb.Append("  WebServiceUserName: ").Append(WebServiceUserName).Append("\n");
            sb.Append("  WebServicePassword: ").Append(WebServicePassword).Append("\n");
            sb.Append("  WebServiceAPIKey: ").Append(WebServiceAPIKey).Append("\n");
            sb.Append("  WebServiceAPIPassword: ").Append(WebServiceAPIPassword).Append("\n");
            sb.Append("  EntitlementFrequencyType: ").Append(EntitlementFrequencyType).Append("\n");
            sb.Append("  UserAgentType: ").Append(UserAgentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDynamicScanSetupResponse);
        }

        /// <summary>
        /// Returns true if GetDynamicScanSetupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDynamicScanSetupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDynamicScanSetupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GeoLocationId == input.GeoLocationId ||
                    (this.GeoLocationId != null &&
                    this.GeoLocationId.Equals(input.GeoLocationId))
                ) && 
                (
                    this.DynamicScanEnvironmentFacingType == input.DynamicScanEnvironmentFacingType ||
                    (this.DynamicScanEnvironmentFacingType != null &&
                    this.DynamicScanEnvironmentFacingType.Equals(input.DynamicScanEnvironmentFacingType))
                ) && 
                (
                    this.Exclusions == input.Exclusions ||
                    (this.Exclusions != null &&
                    this.Exclusions.Equals(input.Exclusions))
                ) && 
                (
                    this.ExclusionsList == input.ExclusionsList ||
                    this.ExclusionsList != null &&
                    this.ExclusionsList.SequenceEqual(input.ExclusionsList)
                ) && 
                (
                    this.DynamicScanAuthenticationType == input.DynamicScanAuthenticationType ||
                    (this.DynamicScanAuthenticationType != null &&
                    this.DynamicScanAuthenticationType.Equals(input.DynamicScanAuthenticationType))
                ) && 
                (
                    this.PrimaryUserName == input.PrimaryUserName ||
                    (this.PrimaryUserName != null &&
                    this.PrimaryUserName.Equals(input.PrimaryUserName))
                ) && 
                (
                    this.PrimaryUserPassword == input.PrimaryUserPassword ||
                    (this.PrimaryUserPassword != null &&
                    this.PrimaryUserPassword.Equals(input.PrimaryUserPassword))
                ) && 
                (
                    this.SecondaryUserName == input.SecondaryUserName ||
                    (this.SecondaryUserName != null &&
                    this.SecondaryUserName.Equals(input.SecondaryUserName))
                ) && 
                (
                    this.SecondaryUserPassword == input.SecondaryUserPassword ||
                    (this.SecondaryUserPassword != null &&
                    this.SecondaryUserPassword.Equals(input.SecondaryUserPassword))
                ) && 
                (
                    this.OtherUserName == input.OtherUserName ||
                    (this.OtherUserName != null &&
                    this.OtherUserName.Equals(input.OtherUserName))
                ) && 
                (
                    this.OtherUserPassword == input.OtherUserPassword ||
                    (this.OtherUserPassword != null &&
                    this.OtherUserPassword.Equals(input.OtherUserPassword))
                ) && 
                (
                    this.VpnRequired == input.VpnRequired ||
                    (this.VpnRequired != null &&
                    this.VpnRequired.Equals(input.VpnRequired))
                ) && 
                (
                    this.VpnUserName == input.VpnUserName ||
                    (this.VpnUserName != null &&
                    this.VpnUserName.Equals(input.VpnUserName))
                ) && 
                (
                    this.VpnPassword == input.VpnPassword ||
                    (this.VpnPassword != null &&
                    this.VpnPassword.Equals(input.VpnPassword))
                ) && 
                (
                    this.MultiFactorAuth == input.MultiFactorAuth ||
                    (this.MultiFactorAuth != null &&
                    this.MultiFactorAuth.Equals(input.MultiFactorAuth))
                ) && 
                (
                    this.MultiFactorAuthText == input.MultiFactorAuthText ||
                    (this.MultiFactorAuthText != null &&
                    this.MultiFactorAuthText.Equals(input.MultiFactorAuthText))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.RequestCall == input.RequestCall ||
                    (this.RequestCall != null &&
                    this.RequestCall.Equals(input.RequestCall))
                ) && 
                (
                    this.WhitelistRequired == input.WhitelistRequired ||
                    (this.WhitelistRequired != null &&
                    this.WhitelistRequired.Equals(input.WhitelistRequired))
                ) && 
                (
                    this.WhitelistText == input.WhitelistText ||
                    (this.WhitelistText != null &&
                    this.WhitelistText.Equals(input.WhitelistText))
                ) && 
                (
                    this.DynamicSiteURL == input.DynamicSiteURL ||
                    (this.DynamicSiteURL != null &&
                    this.DynamicSiteURL.Equals(input.DynamicSiteURL))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Blockout == input.Blockout ||
                    this.Blockout != null &&
                    this.Blockout.SequenceEqual(input.Blockout)
                ) && 
                (
                    this.RepeatScheduleType == input.RepeatScheduleType ||
                    (this.RepeatScheduleType != null &&
                    this.RepeatScheduleType.Equals(input.RepeatScheduleType))
                ) && 
                (
                    this.AssessmentTypeId == input.AssessmentTypeId ||
                    (this.AssessmentTypeId != null &&
                    this.AssessmentTypeId.Equals(input.AssessmentTypeId))
                ) && 
                (
                    this.AllowFormSubmissions == input.AllowFormSubmissions ||
                    (this.AllowFormSubmissions != null &&
                    this.AllowFormSubmissions.Equals(input.AllowFormSubmissions))
                ) && 
                (
                    this.AllowSameHostRedirects == input.AllowSameHostRedirects ||
                    (this.AllowSameHostRedirects != null &&
                    this.AllowSameHostRedirects.Equals(input.AllowSameHostRedirects))
                ) && 
                (
                    this.RestrictToDirectoryAndSubdirectories == input.RestrictToDirectoryAndSubdirectories ||
                    (this.RestrictToDirectoryAndSubdirectories != null &&
                    this.RestrictToDirectoryAndSubdirectories.Equals(input.RestrictToDirectoryAndSubdirectories))
                ) && 
                (
                    this.GenerateWAFVirtualPatch == input.GenerateWAFVirtualPatch ||
                    (this.GenerateWAFVirtualPatch != null &&
                    this.GenerateWAFVirtualPatch.Equals(input.GenerateWAFVirtualPatch))
                ) && 
                (
                    this.IsWebService == input.IsWebService ||
                    (this.IsWebService != null &&
                    this.IsWebService.Equals(input.IsWebService))
                ) && 
                (
                    this.WebServiceType == input.WebServiceType ||
                    (this.WebServiceType != null &&
                    this.WebServiceType.Equals(input.WebServiceType))
                ) && 
                (
                    this.WebServiceDescriptorURL == input.WebServiceDescriptorURL ||
                    (this.WebServiceDescriptorURL != null &&
                    this.WebServiceDescriptorURL.Equals(input.WebServiceDescriptorURL))
                ) && 
                (
                    this.WebServiceUserName == input.WebServiceUserName ||
                    (this.WebServiceUserName != null &&
                    this.WebServiceUserName.Equals(input.WebServiceUserName))
                ) && 
                (
                    this.WebServicePassword == input.WebServicePassword ||
                    (this.WebServicePassword != null &&
                    this.WebServicePassword.Equals(input.WebServicePassword))
                ) && 
                (
                    this.WebServiceAPIKey == input.WebServiceAPIKey ||
                    (this.WebServiceAPIKey != null &&
                    this.WebServiceAPIKey.Equals(input.WebServiceAPIKey))
                ) && 
                (
                    this.WebServiceAPIPassword == input.WebServiceAPIPassword ||
                    (this.WebServiceAPIPassword != null &&
                    this.WebServiceAPIPassword.Equals(input.WebServiceAPIPassword))
                ) && 
                (
                    this.EntitlementFrequencyType == input.EntitlementFrequencyType ||
                    (this.EntitlementFrequencyType != null &&
                    this.EntitlementFrequencyType.Equals(input.EntitlementFrequencyType))
                ) && 
                (
                    this.UserAgentType == input.UserAgentType ||
                    (this.UserAgentType != null &&
                    this.UserAgentType.Equals(input.UserAgentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeoLocationId != null)
                    hashCode = hashCode * 59 + this.GeoLocationId.GetHashCode();
                if (this.DynamicScanEnvironmentFacingType != null)
                    hashCode = hashCode * 59 + this.DynamicScanEnvironmentFacingType.GetHashCode();
                if (this.Exclusions != null)
                    hashCode = hashCode * 59 + this.Exclusions.GetHashCode();
                if (this.ExclusionsList != null)
                    hashCode = hashCode * 59 + this.ExclusionsList.GetHashCode();
                if (this.DynamicScanAuthenticationType != null)
                    hashCode = hashCode * 59 + this.DynamicScanAuthenticationType.GetHashCode();
                if (this.PrimaryUserName != null)
                    hashCode = hashCode * 59 + this.PrimaryUserName.GetHashCode();
                if (this.PrimaryUserPassword != null)
                    hashCode = hashCode * 59 + this.PrimaryUserPassword.GetHashCode();
                if (this.SecondaryUserName != null)
                    hashCode = hashCode * 59 + this.SecondaryUserName.GetHashCode();
                if (this.SecondaryUserPassword != null)
                    hashCode = hashCode * 59 + this.SecondaryUserPassword.GetHashCode();
                if (this.OtherUserName != null)
                    hashCode = hashCode * 59 + this.OtherUserName.GetHashCode();
                if (this.OtherUserPassword != null)
                    hashCode = hashCode * 59 + this.OtherUserPassword.GetHashCode();
                if (this.VpnRequired != null)
                    hashCode = hashCode * 59 + this.VpnRequired.GetHashCode();
                if (this.VpnUserName != null)
                    hashCode = hashCode * 59 + this.VpnUserName.GetHashCode();
                if (this.VpnPassword != null)
                    hashCode = hashCode * 59 + this.VpnPassword.GetHashCode();
                if (this.MultiFactorAuth != null)
                    hashCode = hashCode * 59 + this.MultiFactorAuth.GetHashCode();
                if (this.MultiFactorAuthText != null)
                    hashCode = hashCode * 59 + this.MultiFactorAuthText.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.RequestCall != null)
                    hashCode = hashCode * 59 + this.RequestCall.GetHashCode();
                if (this.WhitelistRequired != null)
                    hashCode = hashCode * 59 + this.WhitelistRequired.GetHashCode();
                if (this.WhitelistText != null)
                    hashCode = hashCode * 59 + this.WhitelistText.GetHashCode();
                if (this.DynamicSiteURL != null)
                    hashCode = hashCode * 59 + this.DynamicSiteURL.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Blockout != null)
                    hashCode = hashCode * 59 + this.Blockout.GetHashCode();
                if (this.RepeatScheduleType != null)
                    hashCode = hashCode * 59 + this.RepeatScheduleType.GetHashCode();
                if (this.AssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.AssessmentTypeId.GetHashCode();
                if (this.AllowFormSubmissions != null)
                    hashCode = hashCode * 59 + this.AllowFormSubmissions.GetHashCode();
                if (this.AllowSameHostRedirects != null)
                    hashCode = hashCode * 59 + this.AllowSameHostRedirects.GetHashCode();
                if (this.RestrictToDirectoryAndSubdirectories != null)
                    hashCode = hashCode * 59 + this.RestrictToDirectoryAndSubdirectories.GetHashCode();
                if (this.GenerateWAFVirtualPatch != null)
                    hashCode = hashCode * 59 + this.GenerateWAFVirtualPatch.GetHashCode();
                if (this.IsWebService != null)
                    hashCode = hashCode * 59 + this.IsWebService.GetHashCode();
                if (this.WebServiceType != null)
                    hashCode = hashCode * 59 + this.WebServiceType.GetHashCode();
                if (this.WebServiceDescriptorURL != null)
                    hashCode = hashCode * 59 + this.WebServiceDescriptorURL.GetHashCode();
                if (this.WebServiceUserName != null)
                    hashCode = hashCode * 59 + this.WebServiceUserName.GetHashCode();
                if (this.WebServicePassword != null)
                    hashCode = hashCode * 59 + this.WebServicePassword.GetHashCode();
                if (this.WebServiceAPIKey != null)
                    hashCode = hashCode * 59 + this.WebServiceAPIKey.GetHashCode();
                if (this.WebServiceAPIPassword != null)
                    hashCode = hashCode * 59 + this.WebServiceAPIPassword.GetHashCode();
                if (this.EntitlementFrequencyType != null)
                    hashCode = hashCode * 59 + this.EntitlementFrequencyType.GetHashCode();
                if (this.UserAgentType != null)
                    hashCode = hashCode * 59 + this.UserAgentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
