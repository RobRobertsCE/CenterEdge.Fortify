/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Get Auto Report Response
    /// </summary>
    [DataContract]
    public partial class GetAutoReportResponse :  IEquatable<GetAutoReportResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAutoReportResponse" /> class.
        /// </summary>
        /// <param name="StaticScanReportId">The report id for static scans.</param>
        /// <param name="StaticScanReportName">The report name for static scans.</param>
        /// <param name="DynamicScanReportId">The report id for dynamic scans.</param>
        /// <param name="DynamicScanReportName">The report name for dynamic scans.</param>
        public GetAutoReportResponse(int? StaticScanReportId = default(int?), string StaticScanReportName = default(string), int? DynamicScanReportId = default(int?), string DynamicScanReportName = default(string))
        {
            this.StaticScanReportId = StaticScanReportId;
            this.StaticScanReportName = StaticScanReportName;
            this.DynamicScanReportId = DynamicScanReportId;
            this.DynamicScanReportName = DynamicScanReportName;
        }
        
        /// <summary>
        /// The report id for static scans
        /// </summary>
        /// <value>The report id for static scans</value>
        [DataMember(Name="staticScanReportId", EmitDefaultValue=false)]
        public int? StaticScanReportId { get; set; }

        /// <summary>
        /// The report name for static scans
        /// </summary>
        /// <value>The report name for static scans</value>
        [DataMember(Name="staticScanReportName", EmitDefaultValue=false)]
        public string StaticScanReportName { get; set; }

        /// <summary>
        /// The report id for dynamic scans
        /// </summary>
        /// <value>The report id for dynamic scans</value>
        [DataMember(Name="dynamicScanReportId", EmitDefaultValue=false)]
        public int? DynamicScanReportId { get; set; }

        /// <summary>
        /// The report name for dynamic scans
        /// </summary>
        /// <value>The report name for dynamic scans</value>
        [DataMember(Name="dynamicScanReportName", EmitDefaultValue=false)]
        public string DynamicScanReportName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAutoReportResponse {\n");
            sb.Append("  StaticScanReportId: ").Append(StaticScanReportId).Append("\n");
            sb.Append("  StaticScanReportName: ").Append(StaticScanReportName).Append("\n");
            sb.Append("  DynamicScanReportId: ").Append(DynamicScanReportId).Append("\n");
            sb.Append("  DynamicScanReportName: ").Append(DynamicScanReportName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAutoReportResponse);
        }

        /// <summary>
        /// Returns true if GetAutoReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAutoReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAutoReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StaticScanReportId == input.StaticScanReportId ||
                    (this.StaticScanReportId != null &&
                    this.StaticScanReportId.Equals(input.StaticScanReportId))
                ) && 
                (
                    this.StaticScanReportName == input.StaticScanReportName ||
                    (this.StaticScanReportName != null &&
                    this.StaticScanReportName.Equals(input.StaticScanReportName))
                ) && 
                (
                    this.DynamicScanReportId == input.DynamicScanReportId ||
                    (this.DynamicScanReportId != null &&
                    this.DynamicScanReportId.Equals(input.DynamicScanReportId))
                ) && 
                (
                    this.DynamicScanReportName == input.DynamicScanReportName ||
                    (this.DynamicScanReportName != null &&
                    this.DynamicScanReportName.Equals(input.DynamicScanReportName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StaticScanReportId != null)
                    hashCode = hashCode * 59 + this.StaticScanReportId.GetHashCode();
                if (this.StaticScanReportName != null)
                    hashCode = hashCode * 59 + this.StaticScanReportName.GetHashCode();
                if (this.DynamicScanReportId != null)
                    hashCode = hashCode * 59 + this.DynamicScanReportId.GetHashCode();
                if (this.DynamicScanReportName != null)
                    hashCode = hashCode * 59 + this.DynamicScanReportName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
