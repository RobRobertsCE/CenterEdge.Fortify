/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Release Assessment Type
    /// </summary>
    [DataContract]
    public partial class ReleaseAssessmentType :  IEquatable<ReleaseAssessmentType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseAssessmentType" /> class.
        /// </summary>
        /// <param name="AssessmentTypeId">The assessment type id.</param>
        /// <param name="Name">The assessment type name.</param>
        /// <param name="ScanType">The scan type name.</param>
        /// <param name="ScanTypeId">The scan type id.</param>
        /// <param name="EntitlementId">The entitlement id. -1 indicates the assessment type is available for purchase.</param>
        /// <param name="FrequencyType">The entitlement frequency type id.</param>
        /// <param name="FrequencyTypeId">The entitlement frequency type id.</param>
        /// <param name="Units">The number of units the scan will consume.</param>
        /// <param name="UnitsAvailable">The number of units available.</param>
        /// <param name="SubscriptionEndDate">The subscription end date for the entitlement.</param>
        /// <param name="IsRemediation">Indicates if a remediation scan is available for the assessment type.</param>
        /// <param name="RemediationScansAvailable">The number of remediation scans available for the release and assessment type.</param>
        /// <param name="IsBundledAssessment">Indicates if the assessment type is a bundled assessment.</param>
        /// <param name="ParentAssessmentTypeId">The parent assessment type id for the bundled assessment.</param>
        /// <param name="ParentAssessmentTypeName">The parent assessment type name.</param>
        /// <param name="ParentAssessmentTypeScanType">The parent assessment type scan type name.</param>
        /// <param name="ParentAssessmentTypeScanTypeId">The parent assessment type scan type id.</param>
        public ReleaseAssessmentType(int? AssessmentTypeId = default(int?), string Name = default(string), string ScanType = default(string), int? ScanTypeId = default(int?), int? EntitlementId = default(int?), string FrequencyType = default(string), int? FrequencyTypeId = default(int?), int? Units = default(int?), int? UnitsAvailable = default(int?), DateTime? SubscriptionEndDate = default(DateTime?), bool? IsRemediation = default(bool?), int? RemediationScansAvailable = default(int?), bool? IsBundledAssessment = default(bool?), int? ParentAssessmentTypeId = default(int?), string ParentAssessmentTypeName = default(string), string ParentAssessmentTypeScanType = default(string), int? ParentAssessmentTypeScanTypeId = default(int?))
        {
            this.AssessmentTypeId = AssessmentTypeId;
            this.Name = Name;
            this.ScanType = ScanType;
            this.ScanTypeId = ScanTypeId;
            this.EntitlementId = EntitlementId;
            this.FrequencyType = FrequencyType;
            this.FrequencyTypeId = FrequencyTypeId;
            this.Units = Units;
            this.UnitsAvailable = UnitsAvailable;
            this.SubscriptionEndDate = SubscriptionEndDate;
            this.IsRemediation = IsRemediation;
            this.RemediationScansAvailable = RemediationScansAvailable;
            this.IsBundledAssessment = IsBundledAssessment;
            this.ParentAssessmentTypeId = ParentAssessmentTypeId;
            this.ParentAssessmentTypeName = ParentAssessmentTypeName;
            this.ParentAssessmentTypeScanType = ParentAssessmentTypeScanType;
            this.ParentAssessmentTypeScanTypeId = ParentAssessmentTypeScanTypeId;
        }
        
        /// <summary>
        /// The assessment type id
        /// </summary>
        /// <value>The assessment type id</value>
        [DataMember(Name="assessmentTypeId", EmitDefaultValue=false)]
        public int? AssessmentTypeId { get; set; }

        /// <summary>
        /// The assessment type name
        /// </summary>
        /// <value>The assessment type name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The scan type name
        /// </summary>
        /// <value>The scan type name</value>
        [DataMember(Name="scanType", EmitDefaultValue=false)]
        public string ScanType { get; set; }

        /// <summary>
        /// The scan type id
        /// </summary>
        /// <value>The scan type id</value>
        [DataMember(Name="scanTypeId", EmitDefaultValue=false)]
        public int? ScanTypeId { get; set; }

        /// <summary>
        /// The entitlement id. -1 indicates the assessment type is available for purchase
        /// </summary>
        /// <value>The entitlement id. -1 indicates the assessment type is available for purchase</value>
        [DataMember(Name="entitlementId", EmitDefaultValue=false)]
        public int? EntitlementId { get; set; }

        /// <summary>
        /// The entitlement frequency type id
        /// </summary>
        /// <value>The entitlement frequency type id</value>
        [DataMember(Name="frequencyType", EmitDefaultValue=false)]
        public string FrequencyType { get; set; }

        /// <summary>
        /// The entitlement frequency type id
        /// </summary>
        /// <value>The entitlement frequency type id</value>
        [DataMember(Name="frequencyTypeId", EmitDefaultValue=false)]
        public int? FrequencyTypeId { get; set; }

        /// <summary>
        /// The number of units the scan will consume
        /// </summary>
        /// <value>The number of units the scan will consume</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public int? Units { get; set; }

        /// <summary>
        /// The number of units available
        /// </summary>
        /// <value>The number of units available</value>
        [DataMember(Name="unitsAvailable", EmitDefaultValue=false)]
        public int? UnitsAvailable { get; set; }

        /// <summary>
        /// The subscription end date for the entitlement
        /// </summary>
        /// <value>The subscription end date for the entitlement</value>
        [DataMember(Name="subscriptionEndDate", EmitDefaultValue=false)]
        public DateTime? SubscriptionEndDate { get; set; }

        /// <summary>
        /// Indicates if a remediation scan is available for the assessment type
        /// </summary>
        /// <value>Indicates if a remediation scan is available for the assessment type</value>
        [DataMember(Name="isRemediation", EmitDefaultValue=false)]
        public bool? IsRemediation { get; set; }

        /// <summary>
        /// The number of remediation scans available for the release and assessment type
        /// </summary>
        /// <value>The number of remediation scans available for the release and assessment type</value>
        [DataMember(Name="remediationScansAvailable", EmitDefaultValue=false)]
        public int? RemediationScansAvailable { get; set; }

        /// <summary>
        /// Indicates if the assessment type is a bundled assessment
        /// </summary>
        /// <value>Indicates if the assessment type is a bundled assessment</value>
        [DataMember(Name="isBundledAssessment", EmitDefaultValue=false)]
        public bool? IsBundledAssessment { get; set; }

        /// <summary>
        /// The parent assessment type id for the bundled assessment
        /// </summary>
        /// <value>The parent assessment type id for the bundled assessment</value>
        [DataMember(Name="parentAssessmentTypeId", EmitDefaultValue=false)]
        public int? ParentAssessmentTypeId { get; set; }

        /// <summary>
        /// The parent assessment type name
        /// </summary>
        /// <value>The parent assessment type name</value>
        [DataMember(Name="parentAssessmentTypeName", EmitDefaultValue=false)]
        public string ParentAssessmentTypeName { get; set; }

        /// <summary>
        /// The parent assessment type scan type name
        /// </summary>
        /// <value>The parent assessment type scan type name</value>
        [DataMember(Name="parentAssessmentTypeScanType", EmitDefaultValue=false)]
        public string ParentAssessmentTypeScanType { get; set; }

        /// <summary>
        /// The parent assessment type scan type id
        /// </summary>
        /// <value>The parent assessment type scan type id</value>
        [DataMember(Name="parentAssessmentTypeScanTypeId", EmitDefaultValue=false)]
        public int? ParentAssessmentTypeScanTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseAssessmentType {\n");
            sb.Append("  AssessmentTypeId: ").Append(AssessmentTypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScanType: ").Append(ScanType).Append("\n");
            sb.Append("  ScanTypeId: ").Append(ScanTypeId).Append("\n");
            sb.Append("  EntitlementId: ").Append(EntitlementId).Append("\n");
            sb.Append("  FrequencyType: ").Append(FrequencyType).Append("\n");
            sb.Append("  FrequencyTypeId: ").Append(FrequencyTypeId).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  UnitsAvailable: ").Append(UnitsAvailable).Append("\n");
            sb.Append("  SubscriptionEndDate: ").Append(SubscriptionEndDate).Append("\n");
            sb.Append("  IsRemediation: ").Append(IsRemediation).Append("\n");
            sb.Append("  RemediationScansAvailable: ").Append(RemediationScansAvailable).Append("\n");
            sb.Append("  IsBundledAssessment: ").Append(IsBundledAssessment).Append("\n");
            sb.Append("  ParentAssessmentTypeId: ").Append(ParentAssessmentTypeId).Append("\n");
            sb.Append("  ParentAssessmentTypeName: ").Append(ParentAssessmentTypeName).Append("\n");
            sb.Append("  ParentAssessmentTypeScanType: ").Append(ParentAssessmentTypeScanType).Append("\n");
            sb.Append("  ParentAssessmentTypeScanTypeId: ").Append(ParentAssessmentTypeScanTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseAssessmentType);
        }

        /// <summary>
        /// Returns true if ReleaseAssessmentType instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseAssessmentType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssessmentTypeId == input.AssessmentTypeId ||
                    (this.AssessmentTypeId != null &&
                    this.AssessmentTypeId.Equals(input.AssessmentTypeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScanType == input.ScanType ||
                    (this.ScanType != null &&
                    this.ScanType.Equals(input.ScanType))
                ) && 
                (
                    this.ScanTypeId == input.ScanTypeId ||
                    (this.ScanTypeId != null &&
                    this.ScanTypeId.Equals(input.ScanTypeId))
                ) && 
                (
                    this.EntitlementId == input.EntitlementId ||
                    (this.EntitlementId != null &&
                    this.EntitlementId.Equals(input.EntitlementId))
                ) && 
                (
                    this.FrequencyType == input.FrequencyType ||
                    (this.FrequencyType != null &&
                    this.FrequencyType.Equals(input.FrequencyType))
                ) && 
                (
                    this.FrequencyTypeId == input.FrequencyTypeId ||
                    (this.FrequencyTypeId != null &&
                    this.FrequencyTypeId.Equals(input.FrequencyTypeId))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.UnitsAvailable == input.UnitsAvailable ||
                    (this.UnitsAvailable != null &&
                    this.UnitsAvailable.Equals(input.UnitsAvailable))
                ) && 
                (
                    this.SubscriptionEndDate == input.SubscriptionEndDate ||
                    (this.SubscriptionEndDate != null &&
                    this.SubscriptionEndDate.Equals(input.SubscriptionEndDate))
                ) && 
                (
                    this.IsRemediation == input.IsRemediation ||
                    (this.IsRemediation != null &&
                    this.IsRemediation.Equals(input.IsRemediation))
                ) && 
                (
                    this.RemediationScansAvailable == input.RemediationScansAvailable ||
                    (this.RemediationScansAvailable != null &&
                    this.RemediationScansAvailable.Equals(input.RemediationScansAvailable))
                ) && 
                (
                    this.IsBundledAssessment == input.IsBundledAssessment ||
                    (this.IsBundledAssessment != null &&
                    this.IsBundledAssessment.Equals(input.IsBundledAssessment))
                ) && 
                (
                    this.ParentAssessmentTypeId == input.ParentAssessmentTypeId ||
                    (this.ParentAssessmentTypeId != null &&
                    this.ParentAssessmentTypeId.Equals(input.ParentAssessmentTypeId))
                ) && 
                (
                    this.ParentAssessmentTypeName == input.ParentAssessmentTypeName ||
                    (this.ParentAssessmentTypeName != null &&
                    this.ParentAssessmentTypeName.Equals(input.ParentAssessmentTypeName))
                ) && 
                (
                    this.ParentAssessmentTypeScanType == input.ParentAssessmentTypeScanType ||
                    (this.ParentAssessmentTypeScanType != null &&
                    this.ParentAssessmentTypeScanType.Equals(input.ParentAssessmentTypeScanType))
                ) && 
                (
                    this.ParentAssessmentTypeScanTypeId == input.ParentAssessmentTypeScanTypeId ||
                    (this.ParentAssessmentTypeScanTypeId != null &&
                    this.ParentAssessmentTypeScanTypeId.Equals(input.ParentAssessmentTypeScanTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.AssessmentTypeId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ScanType != null)
                    hashCode = hashCode * 59 + this.ScanType.GetHashCode();
                if (this.ScanTypeId != null)
                    hashCode = hashCode * 59 + this.ScanTypeId.GetHashCode();
                if (this.EntitlementId != null)
                    hashCode = hashCode * 59 + this.EntitlementId.GetHashCode();
                if (this.FrequencyType != null)
                    hashCode = hashCode * 59 + this.FrequencyType.GetHashCode();
                if (this.FrequencyTypeId != null)
                    hashCode = hashCode * 59 + this.FrequencyTypeId.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.UnitsAvailable != null)
                    hashCode = hashCode * 59 + this.UnitsAvailable.GetHashCode();
                if (this.SubscriptionEndDate != null)
                    hashCode = hashCode * 59 + this.SubscriptionEndDate.GetHashCode();
                if (this.IsRemediation != null)
                    hashCode = hashCode * 59 + this.IsRemediation.GetHashCode();
                if (this.RemediationScansAvailable != null)
                    hashCode = hashCode * 59 + this.RemediationScansAvailable.GetHashCode();
                if (this.IsBundledAssessment != null)
                    hashCode = hashCode * 59 + this.IsBundledAssessment.GetHashCode();
                if (this.ParentAssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.ParentAssessmentTypeId.GetHashCode();
                if (this.ParentAssessmentTypeName != null)
                    hashCode = hashCode * 59 + this.ParentAssessmentTypeName.GetHashCode();
                if (this.ParentAssessmentTypeScanType != null)
                    hashCode = hashCode * 59 + this.ParentAssessmentTypeScanType.GetHashCode();
                if (this.ParentAssessmentTypeScanTypeId != null)
                    hashCode = hashCode * 59 + this.ParentAssessmentTypeScanTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
