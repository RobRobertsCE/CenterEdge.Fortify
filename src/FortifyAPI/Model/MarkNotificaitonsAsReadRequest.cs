/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// MarkNotificaitonsAsReadRequest
    /// </summary>
    [DataContract]
    public partial class MarkNotificaitonsAsReadRequest :  IEquatable<MarkNotificaitonsAsReadRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkNotificaitonsAsReadRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarkNotificaitonsAsReadRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkNotificaitonsAsReadRequest" /> class.
        /// </summary>
        /// <param name="MessageIds">The list of message ids to mark as read (required).</param>
        public MarkNotificaitonsAsReadRequest(List<int?> MessageIds = default(List<int?>))
        {
            // to ensure "MessageIds" is required (not null)
            if (MessageIds == null)
            {
                throw new InvalidDataException("MessageIds is a required property for MarkNotificaitonsAsReadRequest and cannot be null");
            }
            else
            {
                this.MessageIds = MessageIds;
            }
        }
        
        /// <summary>
        /// The list of message ids to mark as read
        /// </summary>
        /// <value>The list of message ids to mark as read</value>
        [DataMember(Name="messageIds", EmitDefaultValue=false)]
        public List<int?> MessageIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarkNotificaitonsAsReadRequest {\n");
            sb.Append("  MessageIds: ").Append(MessageIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkNotificaitonsAsReadRequest);
        }

        /// <summary>
        /// Returns true if MarkNotificaitonsAsReadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkNotificaitonsAsReadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkNotificaitonsAsReadRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageIds == input.MessageIds ||
                    this.MessageIds != null &&
                    this.MessageIds.SequenceEqual(input.MessageIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageIds != null)
                    hashCode = hashCode * 59 + this.MessageIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
