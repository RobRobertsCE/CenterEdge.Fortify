/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="UserId">The users&#39;s id.</param>
        /// <param name="UserName">The users&#39;s username.</param>
        /// <param name="FirstName">The users&#39;s first name.</param>
        /// <param name="LastName">The users&#39;s last name.</param>
        /// <param name="Email">The users&#39;s email address.</param>
        /// <param name="PhoneNumber">The users&#39;s phone number.</param>
        /// <param name="IsVerified">Indicates if the user has been verified.</param>
        /// <param name="RoleId">The users&#39;s role id.</param>
        /// <param name="RoleName">The users&#39;s role name.</param>
        /// <param name="IsSuspended">Indicates if the user&#39;s account is suspended.</param>
        /// <param name="MustChange">Indicates if the user must change the password on the next login.</param>
        /// <param name="PasswordNeverExpires">Indicates if the password never expires.</param>
        public User(int? UserId = default(int?), string UserName = default(string), string FirstName = default(string), string LastName = default(string), string Email = default(string), string PhoneNumber = default(string), bool? IsVerified = default(bool?), int? RoleId = default(int?), string RoleName = default(string), bool? IsSuspended = default(bool?), bool? MustChange = default(bool?), bool? PasswordNeverExpires = default(bool?))
        {
            this.UserId = UserId;
            this.UserName = UserName;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
            this.IsVerified = IsVerified;
            this.RoleId = RoleId;
            this.RoleName = RoleName;
            this.IsSuspended = IsSuspended;
            this.MustChange = MustChange;
            this.PasswordNeverExpires = PasswordNeverExpires;
        }
        
        /// <summary>
        /// The users&#39;s id
        /// </summary>
        /// <value>The users&#39;s id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// The users&#39;s username
        /// </summary>
        /// <value>The users&#39;s username</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// The users&#39;s first name
        /// </summary>
        /// <value>The users&#39;s first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The users&#39;s last name
        /// </summary>
        /// <value>The users&#39;s last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The users&#39;s email address
        /// </summary>
        /// <value>The users&#39;s email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The users&#39;s phone number
        /// </summary>
        /// <value>The users&#39;s phone number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Indicates if the user has been verified
        /// </summary>
        /// <value>Indicates if the user has been verified</value>
        [DataMember(Name="isVerified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// The users&#39;s role id
        /// </summary>
        /// <value>The users&#39;s role id</value>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public int? RoleId { get; set; }

        /// <summary>
        /// The users&#39;s role name
        /// </summary>
        /// <value>The users&#39;s role name</value>
        [DataMember(Name="roleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Indicates if the user&#39;s account is suspended
        /// </summary>
        /// <value>Indicates if the user&#39;s account is suspended</value>
        [DataMember(Name="isSuspended", EmitDefaultValue=false)]
        public bool? IsSuspended { get; set; }

        /// <summary>
        /// Indicates if the user must change the password on the next login
        /// </summary>
        /// <value>Indicates if the user must change the password on the next login</value>
        [DataMember(Name="mustChange", EmitDefaultValue=false)]
        public bool? MustChange { get; set; }

        /// <summary>
        /// Indicates if the password never expires
        /// </summary>
        /// <value>Indicates if the password never expires</value>
        [DataMember(Name="passwordNeverExpires", EmitDefaultValue=false)]
        public bool? PasswordNeverExpires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  IsSuspended: ").Append(IsSuspended).Append("\n");
            sb.Append("  MustChange: ").Append(MustChange).Append("\n");
            sb.Append("  PasswordNeverExpires: ").Append(PasswordNeverExpires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.RoleId == input.RoleId ||
                    (this.RoleId != null &&
                    this.RoleId.Equals(input.RoleId))
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.IsSuspended == input.IsSuspended ||
                    (this.IsSuspended != null &&
                    this.IsSuspended.Equals(input.IsSuspended))
                ) && 
                (
                    this.MustChange == input.MustChange ||
                    (this.MustChange != null &&
                    this.MustChange.Equals(input.MustChange))
                ) && 
                (
                    this.PasswordNeverExpires == input.PasswordNeverExpires ||
                    (this.PasswordNeverExpires != null &&
                    this.PasswordNeverExpires.Equals(input.PasswordNeverExpires))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.RoleId != null)
                    hashCode = hashCode * 59 + this.RoleId.GetHashCode();
                if (this.RoleName != null)
                    hashCode = hashCode * 59 + this.RoleName.GetHashCode();
                if (this.IsSuspended != null)
                    hashCode = hashCode * 59 + this.IsSuspended.GetHashCode();
                if (this.MustChange != null)
                    hashCode = hashCode * 59 + this.MustChange.GetHashCode();
                if (this.PasswordNeverExpires != null)
                    hashCode = hashCode * 59 + this.PasswordNeverExpires.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
