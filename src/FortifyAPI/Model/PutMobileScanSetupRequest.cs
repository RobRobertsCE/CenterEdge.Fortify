/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Put Mobile Scan Setup Request
    /// </summary>
    [DataContract]
    public partial class PutMobileScanSetupRequest :  IEquatable<PutMobileScanSetupRequest>, IValidatableObject
    {
        /// <summary>
        /// The framework type
        /// </summary>
        /// <value>The framework type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrameworkTypeEnum
        {
            
            /// <summary>
            /// Enum IOS for value: iOS
            /// </summary>
            [EnumMember(Value = "iOS")]
            IOS = 1,
            
            /// <summary>
            /// Enum Android for value: Android
            /// </summary>
            [EnumMember(Value = "Android")]
            Android = 2,
            
            /// <summary>
            /// Enum Windows for value: Windows
            /// </summary>
            [EnumMember(Value = "Windows")]
            Windows = 3
        }

        /// <summary>
        /// The framework type
        /// </summary>
        /// <value>The framework type</value>
        [DataMember(Name="frameworkType", EmitDefaultValue=false)]
        public FrameworkTypeEnum FrameworkType { get; set; }
        /// <summary>
        /// The platform type
        /// </summary>
        /// <value>The platform type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformTypeEnum
        {
            
            /// <summary>
            /// Enum Phone for value: Phone
            /// </summary>
            [EnumMember(Value = "Phone")]
            Phone = 1,
            
            /// <summary>
            /// Enum Tablet for value: Tablet
            /// </summary>
            [EnumMember(Value = "Tablet")]
            Tablet = 2,
            
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3
        }

        /// <summary>
        /// The platform type
        /// </summary>
        /// <value>The platform type</value>
        [DataMember(Name="platformType", EmitDefaultValue=false)]
        public PlatformTypeEnum PlatformType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutMobileScanSetupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutMobileScanSetupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutMobileScanSetupRequest" /> class.
        /// </summary>
        /// <param name="AssessmentTypeId">The assessment type id (required).</param>
        /// <param name="FrameworkType">The framework type (required).</param>
        /// <param name="PlatformType">The platform type (required).</param>
        /// <param name="TimeZone">The time zone (required).</param>
        /// <param name="UserAccountsRequried">Indicates if user accounts are required.</param>
        /// <param name="UserAccounts">List of user accounts.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="VpnRequired">Indicates if VPN is required.</param>
        /// <param name="VpnUserName">The VPN username.</param>
        /// <param name="VpnPassword">The VPN password.</param>
        /// <param name="HasMultiFactorAuthentication">Indicates if multi-factor authentication is used.</param>
        /// <param name="MultiFactorAuthenticationNotes">Multi-factor authentication notes.</param>
        /// <param name="IntrusionDetectionSystem">Indicates if intrusion detection system is used.</param>
        /// <param name="IntrusionPreventionSystem">Indicates if intrusion prevention system is used.</param>
        /// <param name="WebApplicationFirewall">Indicates if web application firewall is used.</param>
        /// <param name="ProxyServers">Indicates if proxy servers are used.</param>
        /// <param name="LoadBalancer">Indicates if load balancer is used.</param>
        /// <param name="PreAssessmentCall">Indicates if the customer should be contacted prior to beginning the assessment.</param>
        public PutMobileScanSetupRequest(int? AssessmentTypeId = default(int?), FrameworkTypeEnum FrameworkType = default(FrameworkTypeEnum), PlatformTypeEnum PlatformType = default(PlatformTypeEnum), string TimeZone = default(string), bool? UserAccountsRequried = default(bool?), List<MobileScanUserAccount> UserAccounts = default(List<MobileScanUserAccount>), string Notes = default(string), bool? VpnRequired = default(bool?), string VpnUserName = default(string), string VpnPassword = default(string), bool? HasMultiFactorAuthentication = default(bool?), string MultiFactorAuthenticationNotes = default(string), bool? IntrusionDetectionSystem = default(bool?), bool? IntrusionPreventionSystem = default(bool?), bool? WebApplicationFirewall = default(bool?), bool? ProxyServers = default(bool?), bool? LoadBalancer = default(bool?), bool? PreAssessmentCall = default(bool?))
        {
            // to ensure "AssessmentTypeId" is required (not null)
            if (AssessmentTypeId == null)
            {
                throw new InvalidDataException("AssessmentTypeId is a required property for PutMobileScanSetupRequest and cannot be null");
            }
            else
            {
                this.AssessmentTypeId = AssessmentTypeId;
            }
            // to ensure "FrameworkType" is required (not null)
            if (FrameworkType == null)
            {
                throw new InvalidDataException("FrameworkType is a required property for PutMobileScanSetupRequest and cannot be null");
            }
            else
            {
                this.FrameworkType = FrameworkType;
            }
            // to ensure "PlatformType" is required (not null)
            if (PlatformType == null)
            {
                throw new InvalidDataException("PlatformType is a required property for PutMobileScanSetupRequest and cannot be null");
            }
            else
            {
                this.PlatformType = PlatformType;
            }
            // to ensure "TimeZone" is required (not null)
            if (TimeZone == null)
            {
                throw new InvalidDataException("TimeZone is a required property for PutMobileScanSetupRequest and cannot be null");
            }
            else
            {
                this.TimeZone = TimeZone;
            }
            this.UserAccountsRequried = UserAccountsRequried;
            this.UserAccounts = UserAccounts;
            this.Notes = Notes;
            this.VpnRequired = VpnRequired;
            this.VpnUserName = VpnUserName;
            this.VpnPassword = VpnPassword;
            this.HasMultiFactorAuthentication = HasMultiFactorAuthentication;
            this.MultiFactorAuthenticationNotes = MultiFactorAuthenticationNotes;
            this.IntrusionDetectionSystem = IntrusionDetectionSystem;
            this.IntrusionPreventionSystem = IntrusionPreventionSystem;
            this.WebApplicationFirewall = WebApplicationFirewall;
            this.ProxyServers = ProxyServers;
            this.LoadBalancer = LoadBalancer;
            this.PreAssessmentCall = PreAssessmentCall;
        }
        
        /// <summary>
        /// The assessment type id
        /// </summary>
        /// <value>The assessment type id</value>
        [DataMember(Name="assessmentTypeId", EmitDefaultValue=false)]
        public int? AssessmentTypeId { get; set; }



        /// <summary>
        /// The time zone
        /// </summary>
        /// <value>The time zone</value>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Indicates if user accounts are required
        /// </summary>
        /// <value>Indicates if user accounts are required</value>
        [DataMember(Name="userAccountsRequried", EmitDefaultValue=false)]
        public bool? UserAccountsRequried { get; set; }

        /// <summary>
        /// List of user accounts
        /// </summary>
        /// <value>List of user accounts</value>
        [DataMember(Name="userAccounts", EmitDefaultValue=false)]
        public List<MobileScanUserAccount> UserAccounts { get; set; }

        /// <summary>
        /// Notes
        /// </summary>
        /// <value>Notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Indicates if VPN is required
        /// </summary>
        /// <value>Indicates if VPN is required</value>
        [DataMember(Name="vpnRequired", EmitDefaultValue=false)]
        public bool? VpnRequired { get; set; }

        /// <summary>
        /// The VPN username
        /// </summary>
        /// <value>The VPN username</value>
        [DataMember(Name="vpnUserName", EmitDefaultValue=false)]
        public string VpnUserName { get; set; }

        /// <summary>
        /// The VPN password
        /// </summary>
        /// <value>The VPN password</value>
        [DataMember(Name="vpnPassword", EmitDefaultValue=false)]
        public string VpnPassword { get; set; }

        /// <summary>
        /// Indicates if multi-factor authentication is used
        /// </summary>
        /// <value>Indicates if multi-factor authentication is used</value>
        [DataMember(Name="hasMultiFactorAuthentication", EmitDefaultValue=false)]
        public bool? HasMultiFactorAuthentication { get; set; }

        /// <summary>
        /// Multi-factor authentication notes
        /// </summary>
        /// <value>Multi-factor authentication notes</value>
        [DataMember(Name="multiFactorAuthenticationNotes", EmitDefaultValue=false)]
        public string MultiFactorAuthenticationNotes { get; set; }

        /// <summary>
        /// Indicates if intrusion detection system is used
        /// </summary>
        /// <value>Indicates if intrusion detection system is used</value>
        [DataMember(Name="intrusionDetectionSystem", EmitDefaultValue=false)]
        public bool? IntrusionDetectionSystem { get; set; }

        /// <summary>
        /// Indicates if intrusion prevention system is used
        /// </summary>
        /// <value>Indicates if intrusion prevention system is used</value>
        [DataMember(Name="intrusionPreventionSystem", EmitDefaultValue=false)]
        public bool? IntrusionPreventionSystem { get; set; }

        /// <summary>
        /// Indicates if web application firewall is used
        /// </summary>
        /// <value>Indicates if web application firewall is used</value>
        [DataMember(Name="webApplicationFirewall", EmitDefaultValue=false)]
        public bool? WebApplicationFirewall { get; set; }

        /// <summary>
        /// Indicates if proxy servers are used
        /// </summary>
        /// <value>Indicates if proxy servers are used</value>
        [DataMember(Name="proxyServers", EmitDefaultValue=false)]
        public bool? ProxyServers { get; set; }

        /// <summary>
        /// Indicates if load balancer is used
        /// </summary>
        /// <value>Indicates if load balancer is used</value>
        [DataMember(Name="loadBalancer", EmitDefaultValue=false)]
        public bool? LoadBalancer { get; set; }

        /// <summary>
        /// Indicates if the customer should be contacted prior to beginning the assessment
        /// </summary>
        /// <value>Indicates if the customer should be contacted prior to beginning the assessment</value>
        [DataMember(Name="preAssessmentCall", EmitDefaultValue=false)]
        public bool? PreAssessmentCall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutMobileScanSetupRequest {\n");
            sb.Append("  AssessmentTypeId: ").Append(AssessmentTypeId).Append("\n");
            sb.Append("  FrameworkType: ").Append(FrameworkType).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  UserAccountsRequried: ").Append(UserAccountsRequried).Append("\n");
            sb.Append("  UserAccounts: ").Append(UserAccounts).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  VpnRequired: ").Append(VpnRequired).Append("\n");
            sb.Append("  VpnUserName: ").Append(VpnUserName).Append("\n");
            sb.Append("  VpnPassword: ").Append(VpnPassword).Append("\n");
            sb.Append("  HasMultiFactorAuthentication: ").Append(HasMultiFactorAuthentication).Append("\n");
            sb.Append("  MultiFactorAuthenticationNotes: ").Append(MultiFactorAuthenticationNotes).Append("\n");
            sb.Append("  IntrusionDetectionSystem: ").Append(IntrusionDetectionSystem).Append("\n");
            sb.Append("  IntrusionPreventionSystem: ").Append(IntrusionPreventionSystem).Append("\n");
            sb.Append("  WebApplicationFirewall: ").Append(WebApplicationFirewall).Append("\n");
            sb.Append("  ProxyServers: ").Append(ProxyServers).Append("\n");
            sb.Append("  LoadBalancer: ").Append(LoadBalancer).Append("\n");
            sb.Append("  PreAssessmentCall: ").Append(PreAssessmentCall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutMobileScanSetupRequest);
        }

        /// <summary>
        /// Returns true if PutMobileScanSetupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PutMobileScanSetupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutMobileScanSetupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssessmentTypeId == input.AssessmentTypeId ||
                    (this.AssessmentTypeId != null &&
                    this.AssessmentTypeId.Equals(input.AssessmentTypeId))
                ) && 
                (
                    this.FrameworkType == input.FrameworkType ||
                    (this.FrameworkType != null &&
                    this.FrameworkType.Equals(input.FrameworkType))
                ) && 
                (
                    this.PlatformType == input.PlatformType ||
                    (this.PlatformType != null &&
                    this.PlatformType.Equals(input.PlatformType))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.UserAccountsRequried == input.UserAccountsRequried ||
                    (this.UserAccountsRequried != null &&
                    this.UserAccountsRequried.Equals(input.UserAccountsRequried))
                ) && 
                (
                    this.UserAccounts == input.UserAccounts ||
                    this.UserAccounts != null &&
                    this.UserAccounts.SequenceEqual(input.UserAccounts)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.VpnRequired == input.VpnRequired ||
                    (this.VpnRequired != null &&
                    this.VpnRequired.Equals(input.VpnRequired))
                ) && 
                (
                    this.VpnUserName == input.VpnUserName ||
                    (this.VpnUserName != null &&
                    this.VpnUserName.Equals(input.VpnUserName))
                ) && 
                (
                    this.VpnPassword == input.VpnPassword ||
                    (this.VpnPassword != null &&
                    this.VpnPassword.Equals(input.VpnPassword))
                ) && 
                (
                    this.HasMultiFactorAuthentication == input.HasMultiFactorAuthentication ||
                    (this.HasMultiFactorAuthentication != null &&
                    this.HasMultiFactorAuthentication.Equals(input.HasMultiFactorAuthentication))
                ) && 
                (
                    this.MultiFactorAuthenticationNotes == input.MultiFactorAuthenticationNotes ||
                    (this.MultiFactorAuthenticationNotes != null &&
                    this.MultiFactorAuthenticationNotes.Equals(input.MultiFactorAuthenticationNotes))
                ) && 
                (
                    this.IntrusionDetectionSystem == input.IntrusionDetectionSystem ||
                    (this.IntrusionDetectionSystem != null &&
                    this.IntrusionDetectionSystem.Equals(input.IntrusionDetectionSystem))
                ) && 
                (
                    this.IntrusionPreventionSystem == input.IntrusionPreventionSystem ||
                    (this.IntrusionPreventionSystem != null &&
                    this.IntrusionPreventionSystem.Equals(input.IntrusionPreventionSystem))
                ) && 
                (
                    this.WebApplicationFirewall == input.WebApplicationFirewall ||
                    (this.WebApplicationFirewall != null &&
                    this.WebApplicationFirewall.Equals(input.WebApplicationFirewall))
                ) && 
                (
                    this.ProxyServers == input.ProxyServers ||
                    (this.ProxyServers != null &&
                    this.ProxyServers.Equals(input.ProxyServers))
                ) && 
                (
                    this.LoadBalancer == input.LoadBalancer ||
                    (this.LoadBalancer != null &&
                    this.LoadBalancer.Equals(input.LoadBalancer))
                ) && 
                (
                    this.PreAssessmentCall == input.PreAssessmentCall ||
                    (this.PreAssessmentCall != null &&
                    this.PreAssessmentCall.Equals(input.PreAssessmentCall))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssessmentTypeId != null)
                    hashCode = hashCode * 59 + this.AssessmentTypeId.GetHashCode();
                if (this.FrameworkType != null)
                    hashCode = hashCode * 59 + this.FrameworkType.GetHashCode();
                if (this.PlatformType != null)
                    hashCode = hashCode * 59 + this.PlatformType.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.UserAccountsRequried != null)
                    hashCode = hashCode * 59 + this.UserAccountsRequried.GetHashCode();
                if (this.UserAccounts != null)
                    hashCode = hashCode * 59 + this.UserAccounts.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.VpnRequired != null)
                    hashCode = hashCode * 59 + this.VpnRequired.GetHashCode();
                if (this.VpnUserName != null)
                    hashCode = hashCode * 59 + this.VpnUserName.GetHashCode();
                if (this.VpnPassword != null)
                    hashCode = hashCode * 59 + this.VpnPassword.GetHashCode();
                if (this.HasMultiFactorAuthentication != null)
                    hashCode = hashCode * 59 + this.HasMultiFactorAuthentication.GetHashCode();
                if (this.MultiFactorAuthenticationNotes != null)
                    hashCode = hashCode * 59 + this.MultiFactorAuthenticationNotes.GetHashCode();
                if (this.IntrusionDetectionSystem != null)
                    hashCode = hashCode * 59 + this.IntrusionDetectionSystem.GetHashCode();
                if (this.IntrusionPreventionSystem != null)
                    hashCode = hashCode * 59 + this.IntrusionPreventionSystem.GetHashCode();
                if (this.WebApplicationFirewall != null)
                    hashCode = hashCode * 59 + this.WebApplicationFirewall.GetHashCode();
                if (this.ProxyServers != null)
                    hashCode = hashCode * 59 + this.ProxyServers.GetHashCode();
                if (this.LoadBalancer != null)
                    hashCode = hashCode * 59 + this.LoadBalancer.GetHashCode();
                if (this.PreAssessmentCall != null)
                    hashCode = hashCode * 59 + this.PreAssessmentCall.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
