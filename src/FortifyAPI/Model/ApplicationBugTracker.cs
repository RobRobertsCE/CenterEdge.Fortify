/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Application Bug Tracker Settings
    /// </summary>
    [DataContract]
    public partial class ApplicationBugTracker :  IEquatable<ApplicationBugTracker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationBugTracker" /> class.
        /// </summary>
        /// <param name="BugTrackerTypeId">The Bug Tracker Type Id.</param>
        /// <param name="BugTrackerType">The Bug Tracker Type name.</param>
        /// <param name="BugTrackerUrl">The Bug Tracker Url.</param>
        /// <param name="Enabled">Whether the Bug Tracker is enabled.</param>
        /// <param name="AutoClose">Whether to auto-close bug when the issue is fix-validated.</param>
        /// <param name="LevelOneProjectName">The Bug Tracker&#39;s Domain/Product.</param>
        /// <param name="LevelTwoProjectName">The Bug Tracker&#39; Component.</param>
        public ApplicationBugTracker(int? BugTrackerTypeId = default(int?), string BugTrackerType = default(string), string BugTrackerUrl = default(string), bool? Enabled = default(bool?), bool? AutoClose = default(bool?), string LevelOneProjectName = default(string), string LevelTwoProjectName = default(string))
        {
            this.BugTrackerTypeId = BugTrackerTypeId;
            this.BugTrackerType = BugTrackerType;
            this.BugTrackerUrl = BugTrackerUrl;
            this.Enabled = Enabled;
            this.AutoClose = AutoClose;
            this.LevelOneProjectName = LevelOneProjectName;
            this.LevelTwoProjectName = LevelTwoProjectName;
        }
        
        /// <summary>
        /// The Bug Tracker Type Id
        /// </summary>
        /// <value>The Bug Tracker Type Id</value>
        [DataMember(Name="bugTrackerTypeId", EmitDefaultValue=false)]
        public int? BugTrackerTypeId { get; set; }

        /// <summary>
        /// The Bug Tracker Type name
        /// </summary>
        /// <value>The Bug Tracker Type name</value>
        [DataMember(Name="bugTrackerType", EmitDefaultValue=false)]
        public string BugTrackerType { get; set; }

        /// <summary>
        /// The Bug Tracker Url
        /// </summary>
        /// <value>The Bug Tracker Url</value>
        [DataMember(Name="bugTrackerUrl", EmitDefaultValue=false)]
        public string BugTrackerUrl { get; set; }

        /// <summary>
        /// Whether the Bug Tracker is enabled
        /// </summary>
        /// <value>Whether the Bug Tracker is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Whether to auto-close bug when the issue is fix-validated
        /// </summary>
        /// <value>Whether to auto-close bug when the issue is fix-validated</value>
        [DataMember(Name="autoClose", EmitDefaultValue=false)]
        public bool? AutoClose { get; set; }

        /// <summary>
        /// The Bug Tracker&#39;s Domain/Product
        /// </summary>
        /// <value>The Bug Tracker&#39;s Domain/Product</value>
        [DataMember(Name="levelOneProjectName", EmitDefaultValue=false)]
        public string LevelOneProjectName { get; set; }

        /// <summary>
        /// The Bug Tracker&#39; Component
        /// </summary>
        /// <value>The Bug Tracker&#39; Component</value>
        [DataMember(Name="levelTwoProjectName", EmitDefaultValue=false)]
        public string LevelTwoProjectName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationBugTracker {\n");
            sb.Append("  BugTrackerTypeId: ").Append(BugTrackerTypeId).Append("\n");
            sb.Append("  BugTrackerType: ").Append(BugTrackerType).Append("\n");
            sb.Append("  BugTrackerUrl: ").Append(BugTrackerUrl).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AutoClose: ").Append(AutoClose).Append("\n");
            sb.Append("  LevelOneProjectName: ").Append(LevelOneProjectName).Append("\n");
            sb.Append("  LevelTwoProjectName: ").Append(LevelTwoProjectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationBugTracker);
        }

        /// <summary>
        /// Returns true if ApplicationBugTracker instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationBugTracker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationBugTracker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BugTrackerTypeId == input.BugTrackerTypeId ||
                    (this.BugTrackerTypeId != null &&
                    this.BugTrackerTypeId.Equals(input.BugTrackerTypeId))
                ) && 
                (
                    this.BugTrackerType == input.BugTrackerType ||
                    (this.BugTrackerType != null &&
                    this.BugTrackerType.Equals(input.BugTrackerType))
                ) && 
                (
                    this.BugTrackerUrl == input.BugTrackerUrl ||
                    (this.BugTrackerUrl != null &&
                    this.BugTrackerUrl.Equals(input.BugTrackerUrl))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.AutoClose == input.AutoClose ||
                    (this.AutoClose != null &&
                    this.AutoClose.Equals(input.AutoClose))
                ) && 
                (
                    this.LevelOneProjectName == input.LevelOneProjectName ||
                    (this.LevelOneProjectName != null &&
                    this.LevelOneProjectName.Equals(input.LevelOneProjectName))
                ) && 
                (
                    this.LevelTwoProjectName == input.LevelTwoProjectName ||
                    (this.LevelTwoProjectName != null &&
                    this.LevelTwoProjectName.Equals(input.LevelTwoProjectName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BugTrackerTypeId != null)
                    hashCode = hashCode * 59 + this.BugTrackerTypeId.GetHashCode();
                if (this.BugTrackerType != null)
                    hashCode = hashCode * 59 + this.BugTrackerType.GetHashCode();
                if (this.BugTrackerUrl != null)
                    hashCode = hashCode * 59 + this.BugTrackerUrl.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.AutoClose != null)
                    hashCode = hashCode * 59 + this.AutoClose.GetHashCode();
                if (this.LevelOneProjectName != null)
                    hashCode = hashCode * 59 + this.LevelOneProjectName.GetHashCode();
                if (this.LevelTwoProjectName != null)
                    hashCode = hashCode * 59 + this.LevelTwoProjectName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
