/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Blockout hour option
    /// </summary>
    [DataContract]
    public partial class BlackoutHour :  IEquatable<BlackoutHour>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlackoutHour" /> class.
        /// </summary>
        /// <param name="Hour">The 24 hour identifier (0-23).</param>
        /// <param name="_Checked">Checked is true when this hour is blocked out. It is false when clear to scan.</param>
        public BlackoutHour(int? Hour = default(int?), bool? _Checked = default(bool?))
        {
            this.Hour = Hour;
            this._Checked = _Checked;
        }
        
        /// <summary>
        /// The 24 hour identifier (0-23)
        /// </summary>
        /// <value>The 24 hour identifier (0-23)</value>
        [DataMember(Name="hour", EmitDefaultValue=false)]
        public int? Hour { get; set; }

        /// <summary>
        /// Checked is true when this hour is blocked out. It is false when clear to scan
        /// </summary>
        /// <value>Checked is true when this hour is blocked out. It is false when clear to scan</value>
        [DataMember(Name="checked", EmitDefaultValue=false)]
        public bool? _Checked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlackoutHour {\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  _Checked: ").Append(_Checked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlackoutHour);
        }

        /// <summary>
        /// Returns true if BlackoutHour instances are equal
        /// </summary>
        /// <param name="input">Instance of BlackoutHour to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlackoutHour input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hour == input.Hour ||
                    (this.Hour != null &&
                    this.Hour.Equals(input.Hour))
                ) && 
                (
                    this._Checked == input._Checked ||
                    (this._Checked != null &&
                    this._Checked.Equals(input._Checked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hour != null)
                    hashCode = hashCode * 59 + this.Hour.GetHashCode();
                if (this._Checked != null)
                    hashCode = hashCode * 59 + this._Checked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
