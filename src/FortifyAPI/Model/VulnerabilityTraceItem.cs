/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability Trace Item
    /// </summary>
    [DataContract]
    public partial class VulnerabilityTraceItem :  IEquatable<VulnerabilityTraceItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityTraceItem" /> class.
        /// </summary>
        /// <param name="TraceIndex">Trace index.</param>
        /// <param name="TraceEntries">List of trace entries.</param>
        public VulnerabilityTraceItem(int? TraceIndex = default(int?), List<VulnerabilityTraceEntry> TraceEntries = default(List<VulnerabilityTraceEntry>))
        {
            this.TraceIndex = TraceIndex;
            this.TraceEntries = TraceEntries;
        }
        
        /// <summary>
        /// Trace index
        /// </summary>
        /// <value>Trace index</value>
        [DataMember(Name="traceIndex", EmitDefaultValue=false)]
        public int? TraceIndex { get; set; }

        /// <summary>
        /// List of trace entries
        /// </summary>
        /// <value>List of trace entries</value>
        [DataMember(Name="traceEntries", EmitDefaultValue=false)]
        public List<VulnerabilityTraceEntry> TraceEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityTraceItem {\n");
            sb.Append("  TraceIndex: ").Append(TraceIndex).Append("\n");
            sb.Append("  TraceEntries: ").Append(TraceEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityTraceItem);
        }

        /// <summary>
        /// Returns true if VulnerabilityTraceItem instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityTraceItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityTraceItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TraceIndex == input.TraceIndex ||
                    (this.TraceIndex != null &&
                    this.TraceIndex.Equals(input.TraceIndex))
                ) && 
                (
                    this.TraceEntries == input.TraceEntries ||
                    this.TraceEntries != null &&
                    this.TraceEntries.SequenceEqual(input.TraceEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraceIndex != null)
                    hashCode = hashCode * 59 + this.TraceIndex.GetHashCode();
                if (this.TraceEntries != null)
                    hashCode = hashCode * 59 + this.TraceEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
