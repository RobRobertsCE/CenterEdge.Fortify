/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Report
    /// </summary>
    [DataContract]
    public partial class Report :  IEquatable<Report>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Report" /> class.
        /// </summary>
        /// <param name="ReportId">The report id.</param>
        /// <param name="ReportName">The report name.</param>
        /// <param name="ReportNotes">The report notes.</param>
        /// <param name="ReportStatusTypeId">The report status type id.</param>
        /// <param name="ReportStatusType">The report status type.</param>
        /// <param name="ReportTypeId">The report type id.</param>
        /// <param name="ReportType">The report type.</param>
        /// <param name="CustomReportTypeName">The custome report type name.</param>
        /// <param name="IsReceived">Is received.</param>
        /// <param name="Language">The report language.</param>
        /// <param name="ApplicationId">The application id.</param>
        /// <param name="ReleaseId">The release id.</param>
        /// <param name="UserId">The user id.</param>
        public Report(int? ReportId = default(int?), string ReportName = default(string), string ReportNotes = default(string), int? ReportStatusTypeId = default(int?), string ReportStatusType = default(string), int? ReportTypeId = default(int?), string ReportType = default(string), string CustomReportTypeName = default(string), bool? IsReceived = default(bool?), string Language = default(string), int? ApplicationId = default(int?), int? ReleaseId = default(int?), int? UserId = default(int?))
        {
            this.ReportId = ReportId;
            this.ReportName = ReportName;
            this.ReportNotes = ReportNotes;
            this.ReportStatusTypeId = ReportStatusTypeId;
            this.ReportStatusType = ReportStatusType;
            this.ReportTypeId = ReportTypeId;
            this.ReportType = ReportType;
            this.CustomReportTypeName = CustomReportTypeName;
            this.IsReceived = IsReceived;
            this.Language = Language;
            this.ApplicationId = ApplicationId;
            this.ReleaseId = ReleaseId;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// The report id
        /// </summary>
        /// <value>The report id</value>
        [DataMember(Name="reportId", EmitDefaultValue=false)]
        public int? ReportId { get; set; }

        /// <summary>
        /// The report name
        /// </summary>
        /// <value>The report name</value>
        [DataMember(Name="reportName", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// The report notes
        /// </summary>
        /// <value>The report notes</value>
        [DataMember(Name="reportNotes", EmitDefaultValue=false)]
        public string ReportNotes { get; set; }

        /// <summary>
        /// The report status type id
        /// </summary>
        /// <value>The report status type id</value>
        [DataMember(Name="reportStatusTypeId", EmitDefaultValue=false)]
        public int? ReportStatusTypeId { get; set; }

        /// <summary>
        /// The report status type
        /// </summary>
        /// <value>The report status type</value>
        [DataMember(Name="reportStatusType", EmitDefaultValue=false)]
        public string ReportStatusType { get; set; }

        /// <summary>
        /// The report type id
        /// </summary>
        /// <value>The report type id</value>
        [DataMember(Name="reportTypeId", EmitDefaultValue=false)]
        public int? ReportTypeId { get; set; }

        /// <summary>
        /// The report type
        /// </summary>
        /// <value>The report type</value>
        [DataMember(Name="reportType", EmitDefaultValue=false)]
        public string ReportType { get; set; }

        /// <summary>
        /// The custome report type name
        /// </summary>
        /// <value>The custome report type name</value>
        [DataMember(Name="customReportTypeName", EmitDefaultValue=false)]
        public string CustomReportTypeName { get; set; }

        /// <summary>
        /// Is received
        /// </summary>
        /// <value>Is received</value>
        [DataMember(Name="isReceived", EmitDefaultValue=false)]
        public bool? IsReceived { get; set; }

        /// <summary>
        /// The report language
        /// </summary>
        /// <value>The report language</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The application id
        /// </summary>
        /// <value>The application id</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public int? ApplicationId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// The user id
        /// </summary>
        /// <value>The user id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Report {\n");
            sb.Append("  ReportId: ").Append(ReportId).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  ReportNotes: ").Append(ReportNotes).Append("\n");
            sb.Append("  ReportStatusTypeId: ").Append(ReportStatusTypeId).Append("\n");
            sb.Append("  ReportStatusType: ").Append(ReportStatusType).Append("\n");
            sb.Append("  ReportTypeId: ").Append(ReportTypeId).Append("\n");
            sb.Append("  ReportType: ").Append(ReportType).Append("\n");
            sb.Append("  CustomReportTypeName: ").Append(CustomReportTypeName).Append("\n");
            sb.Append("  IsReceived: ").Append(IsReceived).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Report);
        }

        /// <summary>
        /// Returns true if Report instances are equal
        /// </summary>
        /// <param name="input">Instance of Report to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Report input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReportId == input.ReportId ||
                    (this.ReportId != null &&
                    this.ReportId.Equals(input.ReportId))
                ) && 
                (
                    this.ReportName == input.ReportName ||
                    (this.ReportName != null &&
                    this.ReportName.Equals(input.ReportName))
                ) && 
                (
                    this.ReportNotes == input.ReportNotes ||
                    (this.ReportNotes != null &&
                    this.ReportNotes.Equals(input.ReportNotes))
                ) && 
                (
                    this.ReportStatusTypeId == input.ReportStatusTypeId ||
                    (this.ReportStatusTypeId != null &&
                    this.ReportStatusTypeId.Equals(input.ReportStatusTypeId))
                ) && 
                (
                    this.ReportStatusType == input.ReportStatusType ||
                    (this.ReportStatusType != null &&
                    this.ReportStatusType.Equals(input.ReportStatusType))
                ) && 
                (
                    this.ReportTypeId == input.ReportTypeId ||
                    (this.ReportTypeId != null &&
                    this.ReportTypeId.Equals(input.ReportTypeId))
                ) && 
                (
                    this.ReportType == input.ReportType ||
                    (this.ReportType != null &&
                    this.ReportType.Equals(input.ReportType))
                ) && 
                (
                    this.CustomReportTypeName == input.CustomReportTypeName ||
                    (this.CustomReportTypeName != null &&
                    this.CustomReportTypeName.Equals(input.CustomReportTypeName))
                ) && 
                (
                    this.IsReceived == input.IsReceived ||
                    (this.IsReceived != null &&
                    this.IsReceived.Equals(input.IsReceived))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReportId != null)
                    hashCode = hashCode * 59 + this.ReportId.GetHashCode();
                if (this.ReportName != null)
                    hashCode = hashCode * 59 + this.ReportName.GetHashCode();
                if (this.ReportNotes != null)
                    hashCode = hashCode * 59 + this.ReportNotes.GetHashCode();
                if (this.ReportStatusTypeId != null)
                    hashCode = hashCode * 59 + this.ReportStatusTypeId.GetHashCode();
                if (this.ReportStatusType != null)
                    hashCode = hashCode * 59 + this.ReportStatusType.GetHashCode();
                if (this.ReportTypeId != null)
                    hashCode = hashCode * 59 + this.ReportTypeId.GetHashCode();
                if (this.ReportType != null)
                    hashCode = hashCode * 59 + this.ReportType.GetHashCode();
                if (this.CustomReportTypeName != null)
                    hashCode = hashCode * 59 + this.CustomReportTypeName.GetHashCode();
                if (this.IsReceived != null)
                    hashCode = hashCode * 59 + this.IsReceived.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
