/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Put Release Request
    /// </summary>
    [DataContract]
    public partial class PutReleaseRequest :  IEquatable<PutReleaseRequest>, IValidatableObject
    {
        /// <summary>
        /// The release SDLC status type
        /// </summary>
        /// <value>The release SDLC status type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SdlcStatusTypeEnum
        {
            
            /// <summary>
            /// Enum Production for value: Production
            /// </summary>
            [EnumMember(Value = "Production")]
            Production = 1,
            
            /// <summary>
            /// Enum QA for value: QA
            /// </summary>
            [EnumMember(Value = "QA")]
            QA = 2,
            
            /// <summary>
            /// Enum Development for value: Development
            /// </summary>
            [EnumMember(Value = "Development")]
            Development = 3,
            
            /// <summary>
            /// Enum Retired for value: Retired
            /// </summary>
            [EnumMember(Value = "Retired")]
            Retired = 4
        }

        /// <summary>
        /// The release SDLC status type
        /// </summary>
        /// <value>The release SDLC status type</value>
        [DataMember(Name="sdlcStatusType", EmitDefaultValue=false)]
        public SdlcStatusTypeEnum SdlcStatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutReleaseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutReleaseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutReleaseRequest" /> class.
        /// </summary>
        /// <param name="ReleaseName">The release name (required).</param>
        /// <param name="ReleaseDescription">The release description.</param>
        /// <param name="SdlcStatusType">The release SDLC status type (required).</param>
        /// <param name="OwnerId">The owner id for the release (required).</param>
        public PutReleaseRequest(string ReleaseName = default(string), string ReleaseDescription = default(string), SdlcStatusTypeEnum SdlcStatusType = default(SdlcStatusTypeEnum), int? OwnerId = default(int?))
        {
            // to ensure "ReleaseName" is required (not null)
            if (ReleaseName == null)
            {
                throw new InvalidDataException("ReleaseName is a required property for PutReleaseRequest and cannot be null");
            }
            else
            {
                this.ReleaseName = ReleaseName;
            }
            // to ensure "SdlcStatusType" is required (not null)
            if (SdlcStatusType == null)
            {
                throw new InvalidDataException("SdlcStatusType is a required property for PutReleaseRequest and cannot be null");
            }
            else
            {
                this.SdlcStatusType = SdlcStatusType;
            }
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException("OwnerId is a required property for PutReleaseRequest and cannot be null");
            }
            else
            {
                this.OwnerId = OwnerId;
            }
            this.ReleaseDescription = ReleaseDescription;
        }
        
        /// <summary>
        /// The release name
        /// </summary>
        /// <value>The release name</value>
        [DataMember(Name="releaseName", EmitDefaultValue=false)]
        public string ReleaseName { get; set; }

        /// <summary>
        /// The release description
        /// </summary>
        /// <value>The release description</value>
        [DataMember(Name="releaseDescription", EmitDefaultValue=false)]
        public string ReleaseDescription { get; set; }


        /// <summary>
        /// The owner id for the release
        /// </summary>
        /// <value>The owner id for the release</value>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PutReleaseRequest {\n");
            sb.Append("  ReleaseName: ").Append(ReleaseName).Append("\n");
            sb.Append("  ReleaseDescription: ").Append(ReleaseDescription).Append("\n");
            sb.Append("  SdlcStatusType: ").Append(SdlcStatusType).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PutReleaseRequest);
        }

        /// <summary>
        /// Returns true if PutReleaseRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PutReleaseRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PutReleaseRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReleaseName == input.ReleaseName ||
                    (this.ReleaseName != null &&
                    this.ReleaseName.Equals(input.ReleaseName))
                ) && 
                (
                    this.ReleaseDescription == input.ReleaseDescription ||
                    (this.ReleaseDescription != null &&
                    this.ReleaseDescription.Equals(input.ReleaseDescription))
                ) && 
                (
                    this.SdlcStatusType == input.SdlcStatusType ||
                    (this.SdlcStatusType != null &&
                    this.SdlcStatusType.Equals(input.SdlcStatusType))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReleaseName != null)
                    hashCode = hashCode * 59 + this.ReleaseName.GetHashCode();
                if (this.ReleaseDescription != null)
                    hashCode = hashCode * 59 + this.ReleaseDescription.GetHashCode();
                if (this.SdlcStatusType != null)
                    hashCode = hashCode * 59 + this.SdlcStatusType.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
