/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability History Item
    /// </summary>
    [DataContract]
    public partial class VulnerabilityHistoryItem :  IEquatable<VulnerabilityHistoryItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityHistoryItem" /> class.
        /// </summary>
        /// <param name="Content">The history content.</param>
        /// <param name="HistoryDateTime">The history date time.</param>
        /// <param name="User">The user that created the history item.</param>
        public VulnerabilityHistoryItem(string Content = default(string), DateTime? HistoryDateTime = default(DateTime?), string User = default(string))
        {
            this.Content = Content;
            this.HistoryDateTime = HistoryDateTime;
            this.User = User;
        }
        
        /// <summary>
        /// The history content
        /// </summary>
        /// <value>The history content</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The history date time
        /// </summary>
        /// <value>The history date time</value>
        [DataMember(Name="historyDateTime", EmitDefaultValue=false)]
        public DateTime? HistoryDateTime { get; set; }

        /// <summary>
        /// The user that created the history item
        /// </summary>
        /// <value>The user that created the history item</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityHistoryItem {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  HistoryDateTime: ").Append(HistoryDateTime).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityHistoryItem);
        }

        /// <summary>
        /// Returns true if VulnerabilityHistoryItem instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityHistoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityHistoryItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.HistoryDateTime == input.HistoryDateTime ||
                    (this.HistoryDateTime != null &&
                    this.HistoryDateTime.Equals(input.HistoryDateTime))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.HistoryDateTime != null)
                    hashCode = hashCode * 59 + this.HistoryDateTime.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
