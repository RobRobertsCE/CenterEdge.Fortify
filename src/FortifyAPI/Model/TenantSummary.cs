/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Tenant Summary
    /// </summary>
    [DataContract]
    public partial class TenantSummary :  IEquatable<TenantSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantSummary" /> class.
        /// </summary>
        /// <param name="TotalReleaseCount">The number of releases.</param>
        /// <param name="ScannedApplicationCount">The number of scanned applications.</param>
        /// <param name="TotalAnalysisCount">The number of all analyses.</param>
        /// <param name="StaticAnalysisCount">The number of static analyses.</param>
        /// <param name="DynamicAnalysisCount">The number of dynamic analyses.</param>
        /// <param name="MobileAnalysisCount">The number of mobile analyses.</param>
        /// <param name="StaticAnalysisDVIdx">The static analysis dvidx.</param>
        /// <param name="DynamicAnalysisDVIdx">The dynamic analysis dvidx.</param>
        /// <param name="MobileAnalysisDVIdx">The mobile analysis dvidx.</param>
        /// <param name="CriticalCount">The number of critical issues.</param>
        /// <param name="HighCount">The number of high issues.</param>
        /// <param name="MediumCount">The number of medium issues.</param>
        /// <param name="LowCount">The number of low issues.</param>
        /// <param name="CriticalUrl">The critical url.</param>
        /// <param name="HighUrl">The high url.</param>
        /// <param name="MediumUrl">The medium url.</param>
        /// <param name="LowUrl">The low url.</param>
        /// <param name="UnassessedCount">The number of unaccessed applications.</param>
        /// <param name="OneStarRatingCount">The number of one star applications.</param>
        /// <param name="TwoStarRatingCount">The number of two star applications.</param>
        /// <param name="ThreeStarRatingCount">The number of three star applications.</param>
        /// <param name="FourStarRatingCount">The number of four star applications.</param>
        /// <param name="FiveStarRatingCount">The number of five star applications.</param>
        /// <param name="OneStarRatingDVIdx">The one star rating dvidx.</param>
        /// <param name="TwoStarRatingDVIdx">The two star rating dvidx.</param>
        /// <param name="ThreeStarRatingDVIdx">The three star rating dvidx.</param>
        /// <param name="FourStarRatingDVIdx">The four star rating dvidx.</param>
        /// <param name="FiveStarRatingDVIdx">The five star rating dvidx.</param>
        public TenantSummary(int? TotalReleaseCount = default(int?), int? ScannedApplicationCount = default(int?), int? TotalAnalysisCount = default(int?), int? StaticAnalysisCount = default(int?), int? DynamicAnalysisCount = default(int?), int? MobileAnalysisCount = default(int?), long? StaticAnalysisDVIdx = default(long?), long? DynamicAnalysisDVIdx = default(long?), long? MobileAnalysisDVIdx = default(long?), int? CriticalCount = default(int?), int? HighCount = default(int?), int? MediumCount = default(int?), int? LowCount = default(int?), string CriticalUrl = default(string), string HighUrl = default(string), string MediumUrl = default(string), string LowUrl = default(string), int? UnassessedCount = default(int?), int? OneStarRatingCount = default(int?), int? TwoStarRatingCount = default(int?), int? ThreeStarRatingCount = default(int?), int? FourStarRatingCount = default(int?), int? FiveStarRatingCount = default(int?), long? OneStarRatingDVIdx = default(long?), long? TwoStarRatingDVIdx = default(long?), long? ThreeStarRatingDVIdx = default(long?), long? FourStarRatingDVIdx = default(long?), long? FiveStarRatingDVIdx = default(long?))
        {
            this.TotalReleaseCount = TotalReleaseCount;
            this.ScannedApplicationCount = ScannedApplicationCount;
            this.TotalAnalysisCount = TotalAnalysisCount;
            this.StaticAnalysisCount = StaticAnalysisCount;
            this.DynamicAnalysisCount = DynamicAnalysisCount;
            this.MobileAnalysisCount = MobileAnalysisCount;
            this.StaticAnalysisDVIdx = StaticAnalysisDVIdx;
            this.DynamicAnalysisDVIdx = DynamicAnalysisDVIdx;
            this.MobileAnalysisDVIdx = MobileAnalysisDVIdx;
            this.CriticalCount = CriticalCount;
            this.HighCount = HighCount;
            this.MediumCount = MediumCount;
            this.LowCount = LowCount;
            this.CriticalUrl = CriticalUrl;
            this.HighUrl = HighUrl;
            this.MediumUrl = MediumUrl;
            this.LowUrl = LowUrl;
            this.UnassessedCount = UnassessedCount;
            this.OneStarRatingCount = OneStarRatingCount;
            this.TwoStarRatingCount = TwoStarRatingCount;
            this.ThreeStarRatingCount = ThreeStarRatingCount;
            this.FourStarRatingCount = FourStarRatingCount;
            this.FiveStarRatingCount = FiveStarRatingCount;
            this.OneStarRatingDVIdx = OneStarRatingDVIdx;
            this.TwoStarRatingDVIdx = TwoStarRatingDVIdx;
            this.ThreeStarRatingDVIdx = ThreeStarRatingDVIdx;
            this.FourStarRatingDVIdx = FourStarRatingDVIdx;
            this.FiveStarRatingDVIdx = FiveStarRatingDVIdx;
        }
        
        /// <summary>
        /// The number of releases
        /// </summary>
        /// <value>The number of releases</value>
        [DataMember(Name="totalReleaseCount", EmitDefaultValue=false)]
        public int? TotalReleaseCount { get; set; }

        /// <summary>
        /// The number of scanned applications
        /// </summary>
        /// <value>The number of scanned applications</value>
        [DataMember(Name="scannedApplicationCount", EmitDefaultValue=false)]
        public int? ScannedApplicationCount { get; set; }

        /// <summary>
        /// The number of all analyses
        /// </summary>
        /// <value>The number of all analyses</value>
        [DataMember(Name="totalAnalysisCount", EmitDefaultValue=false)]
        public int? TotalAnalysisCount { get; set; }

        /// <summary>
        /// The number of static analyses
        /// </summary>
        /// <value>The number of static analyses</value>
        [DataMember(Name="staticAnalysisCount", EmitDefaultValue=false)]
        public int? StaticAnalysisCount { get; set; }

        /// <summary>
        /// The number of dynamic analyses
        /// </summary>
        /// <value>The number of dynamic analyses</value>
        [DataMember(Name="dynamicAnalysisCount", EmitDefaultValue=false)]
        public int? DynamicAnalysisCount { get; set; }

        /// <summary>
        /// The number of mobile analyses
        /// </summary>
        /// <value>The number of mobile analyses</value>
        [DataMember(Name="mobileAnalysisCount", EmitDefaultValue=false)]
        public int? MobileAnalysisCount { get; set; }

        /// <summary>
        /// The static analysis dvidx
        /// </summary>
        /// <value>The static analysis dvidx</value>
        [DataMember(Name="staticAnalysisDVIdx", EmitDefaultValue=false)]
        public long? StaticAnalysisDVIdx { get; set; }

        /// <summary>
        /// The dynamic analysis dvidx
        /// </summary>
        /// <value>The dynamic analysis dvidx</value>
        [DataMember(Name="dynamicAnalysisDVIdx", EmitDefaultValue=false)]
        public long? DynamicAnalysisDVIdx { get; set; }

        /// <summary>
        /// The mobile analysis dvidx
        /// </summary>
        /// <value>The mobile analysis dvidx</value>
        [DataMember(Name="mobileAnalysisDVIdx", EmitDefaultValue=false)]
        public long? MobileAnalysisDVIdx { get; set; }

        /// <summary>
        /// The number of critical issues
        /// </summary>
        /// <value>The number of critical issues</value>
        [DataMember(Name="criticalCount", EmitDefaultValue=false)]
        public int? CriticalCount { get; set; }

        /// <summary>
        /// The number of high issues
        /// </summary>
        /// <value>The number of high issues</value>
        [DataMember(Name="highCount", EmitDefaultValue=false)]
        public int? HighCount { get; set; }

        /// <summary>
        /// The number of medium issues
        /// </summary>
        /// <value>The number of medium issues</value>
        [DataMember(Name="mediumCount", EmitDefaultValue=false)]
        public int? MediumCount { get; set; }

        /// <summary>
        /// The number of low issues
        /// </summary>
        /// <value>The number of low issues</value>
        [DataMember(Name="lowCount", EmitDefaultValue=false)]
        public int? LowCount { get; set; }

        /// <summary>
        /// The critical url
        /// </summary>
        /// <value>The critical url</value>
        [DataMember(Name="criticalUrl", EmitDefaultValue=false)]
        public string CriticalUrl { get; set; }

        /// <summary>
        /// The high url
        /// </summary>
        /// <value>The high url</value>
        [DataMember(Name="highUrl", EmitDefaultValue=false)]
        public string HighUrl { get; set; }

        /// <summary>
        /// The medium url
        /// </summary>
        /// <value>The medium url</value>
        [DataMember(Name="mediumUrl", EmitDefaultValue=false)]
        public string MediumUrl { get; set; }

        /// <summary>
        /// The low url
        /// </summary>
        /// <value>The low url</value>
        [DataMember(Name="lowUrl", EmitDefaultValue=false)]
        public string LowUrl { get; set; }

        /// <summary>
        /// The number of unaccessed applications
        /// </summary>
        /// <value>The number of unaccessed applications</value>
        [DataMember(Name="unassessedCount", EmitDefaultValue=false)]
        public int? UnassessedCount { get; set; }

        /// <summary>
        /// The number of one star applications
        /// </summary>
        /// <value>The number of one star applications</value>
        [DataMember(Name="oneStarRatingCount", EmitDefaultValue=false)]
        public int? OneStarRatingCount { get; set; }

        /// <summary>
        /// The number of two star applications
        /// </summary>
        /// <value>The number of two star applications</value>
        [DataMember(Name="twoStarRatingCount", EmitDefaultValue=false)]
        public int? TwoStarRatingCount { get; set; }

        /// <summary>
        /// The number of three star applications
        /// </summary>
        /// <value>The number of three star applications</value>
        [DataMember(Name="threeStarRatingCount", EmitDefaultValue=false)]
        public int? ThreeStarRatingCount { get; set; }

        /// <summary>
        /// The number of four star applications
        /// </summary>
        /// <value>The number of four star applications</value>
        [DataMember(Name="fourStarRatingCount", EmitDefaultValue=false)]
        public int? FourStarRatingCount { get; set; }

        /// <summary>
        /// The number of five star applications
        /// </summary>
        /// <value>The number of five star applications</value>
        [DataMember(Name="fiveStarRatingCount", EmitDefaultValue=false)]
        public int? FiveStarRatingCount { get; set; }

        /// <summary>
        /// The one star rating dvidx
        /// </summary>
        /// <value>The one star rating dvidx</value>
        [DataMember(Name="oneStarRatingDVIdx", EmitDefaultValue=false)]
        public long? OneStarRatingDVIdx { get; set; }

        /// <summary>
        /// The two star rating dvidx
        /// </summary>
        /// <value>The two star rating dvidx</value>
        [DataMember(Name="twoStarRatingDVIdx", EmitDefaultValue=false)]
        public long? TwoStarRatingDVIdx { get; set; }

        /// <summary>
        /// The three star rating dvidx
        /// </summary>
        /// <value>The three star rating dvidx</value>
        [DataMember(Name="threeStarRatingDVIdx", EmitDefaultValue=false)]
        public long? ThreeStarRatingDVIdx { get; set; }

        /// <summary>
        /// The four star rating dvidx
        /// </summary>
        /// <value>The four star rating dvidx</value>
        [DataMember(Name="fourStarRatingDVIdx", EmitDefaultValue=false)]
        public long? FourStarRatingDVIdx { get; set; }

        /// <summary>
        /// The five star rating dvidx
        /// </summary>
        /// <value>The five star rating dvidx</value>
        [DataMember(Name="fiveStarRatingDVIdx", EmitDefaultValue=false)]
        public long? FiveStarRatingDVIdx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TenantSummary {\n");
            sb.Append("  TotalReleaseCount: ").Append(TotalReleaseCount).Append("\n");
            sb.Append("  ScannedApplicationCount: ").Append(ScannedApplicationCount).Append("\n");
            sb.Append("  TotalAnalysisCount: ").Append(TotalAnalysisCount).Append("\n");
            sb.Append("  StaticAnalysisCount: ").Append(StaticAnalysisCount).Append("\n");
            sb.Append("  DynamicAnalysisCount: ").Append(DynamicAnalysisCount).Append("\n");
            sb.Append("  MobileAnalysisCount: ").Append(MobileAnalysisCount).Append("\n");
            sb.Append("  StaticAnalysisDVIdx: ").Append(StaticAnalysisDVIdx).Append("\n");
            sb.Append("  DynamicAnalysisDVIdx: ").Append(DynamicAnalysisDVIdx).Append("\n");
            sb.Append("  MobileAnalysisDVIdx: ").Append(MobileAnalysisDVIdx).Append("\n");
            sb.Append("  CriticalCount: ").Append(CriticalCount).Append("\n");
            sb.Append("  HighCount: ").Append(HighCount).Append("\n");
            sb.Append("  MediumCount: ").Append(MediumCount).Append("\n");
            sb.Append("  LowCount: ").Append(LowCount).Append("\n");
            sb.Append("  CriticalUrl: ").Append(CriticalUrl).Append("\n");
            sb.Append("  HighUrl: ").Append(HighUrl).Append("\n");
            sb.Append("  MediumUrl: ").Append(MediumUrl).Append("\n");
            sb.Append("  LowUrl: ").Append(LowUrl).Append("\n");
            sb.Append("  UnassessedCount: ").Append(UnassessedCount).Append("\n");
            sb.Append("  OneStarRatingCount: ").Append(OneStarRatingCount).Append("\n");
            sb.Append("  TwoStarRatingCount: ").Append(TwoStarRatingCount).Append("\n");
            sb.Append("  ThreeStarRatingCount: ").Append(ThreeStarRatingCount).Append("\n");
            sb.Append("  FourStarRatingCount: ").Append(FourStarRatingCount).Append("\n");
            sb.Append("  FiveStarRatingCount: ").Append(FiveStarRatingCount).Append("\n");
            sb.Append("  OneStarRatingDVIdx: ").Append(OneStarRatingDVIdx).Append("\n");
            sb.Append("  TwoStarRatingDVIdx: ").Append(TwoStarRatingDVIdx).Append("\n");
            sb.Append("  ThreeStarRatingDVIdx: ").Append(ThreeStarRatingDVIdx).Append("\n");
            sb.Append("  FourStarRatingDVIdx: ").Append(FourStarRatingDVIdx).Append("\n");
            sb.Append("  FiveStarRatingDVIdx: ").Append(FiveStarRatingDVIdx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantSummary);
        }

        /// <summary>
        /// Returns true if TenantSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalReleaseCount == input.TotalReleaseCount ||
                    (this.TotalReleaseCount != null &&
                    this.TotalReleaseCount.Equals(input.TotalReleaseCount))
                ) && 
                (
                    this.ScannedApplicationCount == input.ScannedApplicationCount ||
                    (this.ScannedApplicationCount != null &&
                    this.ScannedApplicationCount.Equals(input.ScannedApplicationCount))
                ) && 
                (
                    this.TotalAnalysisCount == input.TotalAnalysisCount ||
                    (this.TotalAnalysisCount != null &&
                    this.TotalAnalysisCount.Equals(input.TotalAnalysisCount))
                ) && 
                (
                    this.StaticAnalysisCount == input.StaticAnalysisCount ||
                    (this.StaticAnalysisCount != null &&
                    this.StaticAnalysisCount.Equals(input.StaticAnalysisCount))
                ) && 
                (
                    this.DynamicAnalysisCount == input.DynamicAnalysisCount ||
                    (this.DynamicAnalysisCount != null &&
                    this.DynamicAnalysisCount.Equals(input.DynamicAnalysisCount))
                ) && 
                (
                    this.MobileAnalysisCount == input.MobileAnalysisCount ||
                    (this.MobileAnalysisCount != null &&
                    this.MobileAnalysisCount.Equals(input.MobileAnalysisCount))
                ) && 
                (
                    this.StaticAnalysisDVIdx == input.StaticAnalysisDVIdx ||
                    (this.StaticAnalysisDVIdx != null &&
                    this.StaticAnalysisDVIdx.Equals(input.StaticAnalysisDVIdx))
                ) && 
                (
                    this.DynamicAnalysisDVIdx == input.DynamicAnalysisDVIdx ||
                    (this.DynamicAnalysisDVIdx != null &&
                    this.DynamicAnalysisDVIdx.Equals(input.DynamicAnalysisDVIdx))
                ) && 
                (
                    this.MobileAnalysisDVIdx == input.MobileAnalysisDVIdx ||
                    (this.MobileAnalysisDVIdx != null &&
                    this.MobileAnalysisDVIdx.Equals(input.MobileAnalysisDVIdx))
                ) && 
                (
                    this.CriticalCount == input.CriticalCount ||
                    (this.CriticalCount != null &&
                    this.CriticalCount.Equals(input.CriticalCount))
                ) && 
                (
                    this.HighCount == input.HighCount ||
                    (this.HighCount != null &&
                    this.HighCount.Equals(input.HighCount))
                ) && 
                (
                    this.MediumCount == input.MediumCount ||
                    (this.MediumCount != null &&
                    this.MediumCount.Equals(input.MediumCount))
                ) && 
                (
                    this.LowCount == input.LowCount ||
                    (this.LowCount != null &&
                    this.LowCount.Equals(input.LowCount))
                ) && 
                (
                    this.CriticalUrl == input.CriticalUrl ||
                    (this.CriticalUrl != null &&
                    this.CriticalUrl.Equals(input.CriticalUrl))
                ) && 
                (
                    this.HighUrl == input.HighUrl ||
                    (this.HighUrl != null &&
                    this.HighUrl.Equals(input.HighUrl))
                ) && 
                (
                    this.MediumUrl == input.MediumUrl ||
                    (this.MediumUrl != null &&
                    this.MediumUrl.Equals(input.MediumUrl))
                ) && 
                (
                    this.LowUrl == input.LowUrl ||
                    (this.LowUrl != null &&
                    this.LowUrl.Equals(input.LowUrl))
                ) && 
                (
                    this.UnassessedCount == input.UnassessedCount ||
                    (this.UnassessedCount != null &&
                    this.UnassessedCount.Equals(input.UnassessedCount))
                ) && 
                (
                    this.OneStarRatingCount == input.OneStarRatingCount ||
                    (this.OneStarRatingCount != null &&
                    this.OneStarRatingCount.Equals(input.OneStarRatingCount))
                ) && 
                (
                    this.TwoStarRatingCount == input.TwoStarRatingCount ||
                    (this.TwoStarRatingCount != null &&
                    this.TwoStarRatingCount.Equals(input.TwoStarRatingCount))
                ) && 
                (
                    this.ThreeStarRatingCount == input.ThreeStarRatingCount ||
                    (this.ThreeStarRatingCount != null &&
                    this.ThreeStarRatingCount.Equals(input.ThreeStarRatingCount))
                ) && 
                (
                    this.FourStarRatingCount == input.FourStarRatingCount ||
                    (this.FourStarRatingCount != null &&
                    this.FourStarRatingCount.Equals(input.FourStarRatingCount))
                ) && 
                (
                    this.FiveStarRatingCount == input.FiveStarRatingCount ||
                    (this.FiveStarRatingCount != null &&
                    this.FiveStarRatingCount.Equals(input.FiveStarRatingCount))
                ) && 
                (
                    this.OneStarRatingDVIdx == input.OneStarRatingDVIdx ||
                    (this.OneStarRatingDVIdx != null &&
                    this.OneStarRatingDVIdx.Equals(input.OneStarRatingDVIdx))
                ) && 
                (
                    this.TwoStarRatingDVIdx == input.TwoStarRatingDVIdx ||
                    (this.TwoStarRatingDVIdx != null &&
                    this.TwoStarRatingDVIdx.Equals(input.TwoStarRatingDVIdx))
                ) && 
                (
                    this.ThreeStarRatingDVIdx == input.ThreeStarRatingDVIdx ||
                    (this.ThreeStarRatingDVIdx != null &&
                    this.ThreeStarRatingDVIdx.Equals(input.ThreeStarRatingDVIdx))
                ) && 
                (
                    this.FourStarRatingDVIdx == input.FourStarRatingDVIdx ||
                    (this.FourStarRatingDVIdx != null &&
                    this.FourStarRatingDVIdx.Equals(input.FourStarRatingDVIdx))
                ) && 
                (
                    this.FiveStarRatingDVIdx == input.FiveStarRatingDVIdx ||
                    (this.FiveStarRatingDVIdx != null &&
                    this.FiveStarRatingDVIdx.Equals(input.FiveStarRatingDVIdx))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalReleaseCount != null)
                    hashCode = hashCode * 59 + this.TotalReleaseCount.GetHashCode();
                if (this.ScannedApplicationCount != null)
                    hashCode = hashCode * 59 + this.ScannedApplicationCount.GetHashCode();
                if (this.TotalAnalysisCount != null)
                    hashCode = hashCode * 59 + this.TotalAnalysisCount.GetHashCode();
                if (this.StaticAnalysisCount != null)
                    hashCode = hashCode * 59 + this.StaticAnalysisCount.GetHashCode();
                if (this.DynamicAnalysisCount != null)
                    hashCode = hashCode * 59 + this.DynamicAnalysisCount.GetHashCode();
                if (this.MobileAnalysisCount != null)
                    hashCode = hashCode * 59 + this.MobileAnalysisCount.GetHashCode();
                if (this.StaticAnalysisDVIdx != null)
                    hashCode = hashCode * 59 + this.StaticAnalysisDVIdx.GetHashCode();
                if (this.DynamicAnalysisDVIdx != null)
                    hashCode = hashCode * 59 + this.DynamicAnalysisDVIdx.GetHashCode();
                if (this.MobileAnalysisDVIdx != null)
                    hashCode = hashCode * 59 + this.MobileAnalysisDVIdx.GetHashCode();
                if (this.CriticalCount != null)
                    hashCode = hashCode * 59 + this.CriticalCount.GetHashCode();
                if (this.HighCount != null)
                    hashCode = hashCode * 59 + this.HighCount.GetHashCode();
                if (this.MediumCount != null)
                    hashCode = hashCode * 59 + this.MediumCount.GetHashCode();
                if (this.LowCount != null)
                    hashCode = hashCode * 59 + this.LowCount.GetHashCode();
                if (this.CriticalUrl != null)
                    hashCode = hashCode * 59 + this.CriticalUrl.GetHashCode();
                if (this.HighUrl != null)
                    hashCode = hashCode * 59 + this.HighUrl.GetHashCode();
                if (this.MediumUrl != null)
                    hashCode = hashCode * 59 + this.MediumUrl.GetHashCode();
                if (this.LowUrl != null)
                    hashCode = hashCode * 59 + this.LowUrl.GetHashCode();
                if (this.UnassessedCount != null)
                    hashCode = hashCode * 59 + this.UnassessedCount.GetHashCode();
                if (this.OneStarRatingCount != null)
                    hashCode = hashCode * 59 + this.OneStarRatingCount.GetHashCode();
                if (this.TwoStarRatingCount != null)
                    hashCode = hashCode * 59 + this.TwoStarRatingCount.GetHashCode();
                if (this.ThreeStarRatingCount != null)
                    hashCode = hashCode * 59 + this.ThreeStarRatingCount.GetHashCode();
                if (this.FourStarRatingCount != null)
                    hashCode = hashCode * 59 + this.FourStarRatingCount.GetHashCode();
                if (this.FiveStarRatingCount != null)
                    hashCode = hashCode * 59 + this.FiveStarRatingCount.GetHashCode();
                if (this.OneStarRatingDVIdx != null)
                    hashCode = hashCode * 59 + this.OneStarRatingDVIdx.GetHashCode();
                if (this.TwoStarRatingDVIdx != null)
                    hashCode = hashCode * 59 + this.TwoStarRatingDVIdx.GetHashCode();
                if (this.ThreeStarRatingDVIdx != null)
                    hashCode = hashCode * 59 + this.ThreeStarRatingDVIdx.GetHashCode();
                if (this.FourStarRatingDVIdx != null)
                    hashCode = hashCode * 59 + this.FourStarRatingDVIdx.GetHashCode();
                if (this.FiveStarRatingDVIdx != null)
                    hashCode = hashCode * 59 + this.FiveStarRatingDVIdx.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
