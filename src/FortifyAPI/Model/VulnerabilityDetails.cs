/* 
 * Fortify on Demand Web API Explorer
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = FortifyAPI.Client.SwaggerDateConverter;

namespace FortifyAPI.Model
{
    /// <summary>
    /// Vulnerability Details
    /// </summary>
    [DataContract]
    public partial class VulnerabilityDetails :  IEquatable<VulnerabilityDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VulnerabilityDetails" /> class.
        /// </summary>
        /// <param name="IsStatic">Indicates if the vulnerability is static.</param>
        /// <param name="Summary">The vulnerability summary.</param>
        /// <param name="Explanation">The vulnerability explanation.</param>
        /// <param name="InstanceId">The vulnerability instance id.</param>
        /// <param name="RuleId">The vulnerability rule id.</param>
        /// <param name="Impact">The vulnerability impact.</param>
        /// <param name="Probability">The vulnerability probability.</param>
        /// <param name="Severity">The vulnerability severity.</param>
        /// <param name="Confidence">The vulnerability confidence.</param>
        /// <param name="AnalyzerName">The vulnerability analyzer name.</param>
        /// <param name="ComplianceCategories">The compliance rules which pertain to this vulnerability, grouped by category..</param>
        /// <param name="VulnId">The vulnerability id.</param>
        /// <param name="ReleaseId">The release id.</param>
        public VulnerabilityDetails(bool? IsStatic = default(bool?), string Summary = default(string), string Explanation = default(string), string InstanceId = default(string), string RuleId = default(string), string Impact = default(string), string Probability = default(string), string Severity = default(string), string Confidence = default(string), string AnalyzerName = default(string), List<VulnerabilityComplianceCategory> ComplianceCategories = default(List<VulnerabilityComplianceCategory>), string VulnId = default(string), int? ReleaseId = default(int?))
        {
            this.IsStatic = IsStatic;
            this.Summary = Summary;
            this.Explanation = Explanation;
            this.InstanceId = InstanceId;
            this.RuleId = RuleId;
            this.Impact = Impact;
            this.Probability = Probability;
            this.Severity = Severity;
            this.Confidence = Confidence;
            this.AnalyzerName = AnalyzerName;
            this.ComplianceCategories = ComplianceCategories;
            this.VulnId = VulnId;
            this.ReleaseId = ReleaseId;
        }
        
        /// <summary>
        /// Indicates if the vulnerability is static
        /// </summary>
        /// <value>Indicates if the vulnerability is static</value>
        [DataMember(Name="isStatic", EmitDefaultValue=false)]
        public bool? IsStatic { get; set; }

        /// <summary>
        /// The vulnerability summary
        /// </summary>
        /// <value>The vulnerability summary</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// The vulnerability explanation
        /// </summary>
        /// <value>The vulnerability explanation</value>
        [DataMember(Name="explanation", EmitDefaultValue=false)]
        public string Explanation { get; set; }

        /// <summary>
        /// The vulnerability instance id
        /// </summary>
        /// <value>The vulnerability instance id</value>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// The vulnerability rule id
        /// </summary>
        /// <value>The vulnerability rule id</value>
        [DataMember(Name="ruleId", EmitDefaultValue=false)]
        public string RuleId { get; set; }

        /// <summary>
        /// The vulnerability impact
        /// </summary>
        /// <value>The vulnerability impact</value>
        [DataMember(Name="impact", EmitDefaultValue=false)]
        public string Impact { get; set; }

        /// <summary>
        /// The vulnerability probability
        /// </summary>
        /// <value>The vulnerability probability</value>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public string Probability { get; set; }

        /// <summary>
        /// The vulnerability severity
        /// </summary>
        /// <value>The vulnerability severity</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// The vulnerability confidence
        /// </summary>
        /// <value>The vulnerability confidence</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public string Confidence { get; set; }

        /// <summary>
        /// The vulnerability analyzer name
        /// </summary>
        /// <value>The vulnerability analyzer name</value>
        [DataMember(Name="analyzerName", EmitDefaultValue=false)]
        public string AnalyzerName { get; set; }

        /// <summary>
        /// The compliance rules which pertain to this vulnerability, grouped by category.
        /// </summary>
        /// <value>The compliance rules which pertain to this vulnerability, grouped by category.</value>
        [DataMember(Name="complianceCategories", EmitDefaultValue=false)]
        public List<VulnerabilityComplianceCategory> ComplianceCategories { get; set; }

        /// <summary>
        /// The vulnerability id
        /// </summary>
        /// <value>The vulnerability id</value>
        [DataMember(Name="vulnId", EmitDefaultValue=false)]
        public string VulnId { get; set; }

        /// <summary>
        /// The release id
        /// </summary>
        /// <value>The release id</value>
        [DataMember(Name="releaseId", EmitDefaultValue=false)]
        public int? ReleaseId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VulnerabilityDetails {\n");
            sb.Append("  IsStatic: ").Append(IsStatic).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Explanation: ").Append(Explanation).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  Impact: ").Append(Impact).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  AnalyzerName: ").Append(AnalyzerName).Append("\n");
            sb.Append("  ComplianceCategories: ").Append(ComplianceCategories).Append("\n");
            sb.Append("  VulnId: ").Append(VulnId).Append("\n");
            sb.Append("  ReleaseId: ").Append(ReleaseId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VulnerabilityDetails);
        }

        /// <summary>
        /// Returns true if VulnerabilityDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of VulnerabilityDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VulnerabilityDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsStatic == input.IsStatic ||
                    (this.IsStatic != null &&
                    this.IsStatic.Equals(input.IsStatic))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Explanation == input.Explanation ||
                    (this.Explanation != null &&
                    this.Explanation.Equals(input.Explanation))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.Impact == input.Impact ||
                    (this.Impact != null &&
                    this.Impact.Equals(input.Impact))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.AnalyzerName == input.AnalyzerName ||
                    (this.AnalyzerName != null &&
                    this.AnalyzerName.Equals(input.AnalyzerName))
                ) && 
                (
                    this.ComplianceCategories == input.ComplianceCategories ||
                    this.ComplianceCategories != null &&
                    this.ComplianceCategories.SequenceEqual(input.ComplianceCategories)
                ) && 
                (
                    this.VulnId == input.VulnId ||
                    (this.VulnId != null &&
                    this.VulnId.Equals(input.VulnId))
                ) && 
                (
                    this.ReleaseId == input.ReleaseId ||
                    (this.ReleaseId != null &&
                    this.ReleaseId.Equals(input.ReleaseId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsStatic != null)
                    hashCode = hashCode * 59 + this.IsStatic.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Explanation != null)
                    hashCode = hashCode * 59 + this.Explanation.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.RuleId != null)
                    hashCode = hashCode * 59 + this.RuleId.GetHashCode();
                if (this.Impact != null)
                    hashCode = hashCode * 59 + this.Impact.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.AnalyzerName != null)
                    hashCode = hashCode * 59 + this.AnalyzerName.GetHashCode();
                if (this.ComplianceCategories != null)
                    hashCode = hashCode * 59 + this.ComplianceCategories.GetHashCode();
                if (this.VulnId != null)
                    hashCode = hashCode * 59 + this.VulnId.GetHashCode();
                if (this.ReleaseId != null)
                    hashCode = hashCode * 59 + this.ReleaseId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
